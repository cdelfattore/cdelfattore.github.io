export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "fflib_Answer",
        "fileName": "fflib_Answer.html",
        "text": "fflib_Answer Interface for the answering framework. This interface must be implemented inside the test class and implement the call back method answer. Signature public interface fflib_Answer fflib_Answer Methods answer(invocation) Method to be implemented in the test class to implement the call back method. answer(invocation) Method to be implemented in the test class to implement the call back method. Signature Object answer(fflib_InvocationOnMock invocation) Parameters invocation Type: fflib_InvocationOnMock The invocation on the mock. @throws The exception to be thrown. Returns The value to be returned."
    },
    {
        "title": "fflib_AnswerTest",
        "fileName": "fflib_AnswerTest.html",
        "text": "fflib_AnswerTest @nodoc Signature @isTest private class fflib_AnswerTest fflib_AnswerTest Properties Name Signature actualInvocation private static fflib_InvocationOnMock actualInvocation fflib_AnswerTest Methods thatAnswerOnlyForTheMethodStubbedWithAnswer() thatAnswerOnlyForTheStubbedParameter() thatAnswersWithException() thatAnswerToDifferentVoidMethods() thatAnswerToVoidAndNotVoidMethods() thatAnswerToVoidMethod() thatArgumentListEmptyForMethodWithNoArgument() thatExceptionIsThrownWhenAccessNegativeIndexArgument() thatExceptionIsThrownWhenAccessOutOfIndexArgument() thatMethodsParametersAreAccessible() thatMethodsParametersAreAccessibleWhenCalledWithMatchers() thatMultipleAnswersAreHandled() thatStoresMethodIntoInvocationOnMock() thatStoresMockInstanceIntoInvocationOnMock() thatAnswerOnlyForTheMethodStubbedWithAnswer() Signature @isTest static void thatAnswerOnlyForTheMethodStubbedWithAnswer() thatAnswerOnlyForTheStubbedParameter() Signature @isTest static void thatAnswerOnlyForTheStubbedParameter() thatAnswersWithException() Signature @isTest static void thatAnswersWithException() thatAnswerToDifferentVoidMethods() Signature @isTest static void thatAnswerToDifferentVoidMethods() thatAnswerToVoidAndNotVoidMethods() Signature @isTest static void thatAnswerToVoidAndNotVoidMethods() thatAnswerToVoidMethod() Signature @isTest static void thatAnswerToVoidMethod() thatArgumentListEmptyForMethodWithNoArgument() Signature @isTest static void thatArgumentListEmptyForMethodWithNoArgument() thatExceptionIsThrownWhenAccessNegativeIndexArgument() Signature @isTest static void thatExceptionIsThrownWhenAccessNegativeIndexArgument() thatExceptionIsThrownWhenAccessOutOfIndexArgument() Signature @isTest static void thatExceptionIsThrownWhenAccessOutOfIndexArgument() thatMethodsParametersAreAccessible() Signature @isTest static void thatMethodsParametersAreAccessible() thatMethodsParametersAreAccessibleWhenCalledWithMatchers() Signature @isTest static void thatMethodsParametersAreAccessibleWhenCalledWithMatchers() thatMultipleAnswersAreHandled() Signature @isTest static void thatMultipleAnswersAreHandled() thatStoresMethodIntoInvocationOnMock() Signature @isTest static void thatStoresMethodIntoInvocationOnMock() thatStoresMockInstanceIntoInvocationOnMock() Signature @isTest static void thatStoresMockInstanceIntoInvocationOnMock() fflib_AnswerTest.ArgumentListEmptyForMethodWithNoArgument Signature public class ArgumentListEmptyForMethodWithNoArgument implements fflib_Answer fflib_AnswerTest.ArgumentListEmptyForMethodWithNoArgument Methods answer(invocation) answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) fflib_AnswerTest.BasicAnswer Signature public class BasicAnswer implements fflib_Answer fflib_AnswerTest.BasicAnswer Methods answer(invocation) answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) fflib_AnswerTest.ExceptionForAnswer Signature public class ExceptionForAnswer implements fflib_Answer fflib_AnswerTest.ExceptionForAnswer Methods answer(invocation) answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) fflib_AnswerTest.ExceptionForArgumentsOutOfBound Signature public class ExceptionForArgumentsOutOfBound implements fflib_Answer fflib_AnswerTest.ExceptionForArgumentsOutOfBound Methods answer(invocation) answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) fflib_AnswerTest.ExceptionForNegativeArgumentIndex Signature public class ExceptionForNegativeArgumentIndex implements fflib_Answer fflib_AnswerTest.ExceptionForNegativeArgumentIndex Methods answer(invocation) answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) fflib_AnswerTest.FirstAnswer Signature public class FirstAnswer implements fflib_Answer fflib_AnswerTest.FirstAnswer Properties Name Signature answerMessage private String answerMessage fflib_AnswerTest.FirstAnswer Methods answer(invocation) getMessage() answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) getMessage() Signature public String getMessage() fflib_AnswerTest.ProcessArgumentAnswer Signature public class ProcessArgumentAnswer implements fflib_Answer fflib_AnswerTest.ProcessArgumentAnswer Methods answer(invocation) answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) fflib_AnswerTest.SecondAnswer Signature public class SecondAnswer implements fflib_Answer fflib_AnswerTest.SecondAnswer Properties Name Signature answerMessage private String answerMessage fflib_AnswerTest.SecondAnswer Methods answer(invocation) getMessage() answer(invocation) Signature public Object answer(fflib_InvocationOnMock invocation) getMessage() Signature public String getMessage()"
    },
    {
        "title": "fflib_AnyOrder",
        "fileName": "fflib_AnyOrder.html",
        "text": "fflib_AnyOrder 'Classic' invocation verifier - checks that a method was called with the given arguments the expected number of times. The order of method calls is not important. Signature public class fflib_AnyOrder extends fflib_MethodVerifier fflib_AnyOrder Methods countCalls(methodArgs, methodArg) getMethodCount(methodArg, matchers, methodArgs) validateMode(verificationMode) verify(qm, expectedArguments, verificationMode) countCalls(methodArgs, methodArg) Signature private Integer countCalls(List<fflib_MethodArgValues> methodArgs, fflib_MethodArgValues methodArg) getMethodCount(methodArg, matchers, methodArgs) Signature private Integer getMethodCount(fflib_MethodArgValues methodArg, List<fflib_IMatcher> matchers, List<fflib_MethodArgValues> methodArgs) validateMode(verificationMode) Signature protected override void validateMode(fflib_VerificationMode verificationMode) verify(qm, expectedArguments, verificationMode) Signature protected override void verify(\t\tfflib_QualifiedMethod qm,\t\tfflib_MethodArgValues expectedArguments,\t\tfflib_VerificationMode verificationMode)"
    },
    {
        "title": "fflib_AnyOrderTest",
        "fileName": "fflib_AnyOrderTest.html",
        "text": "fflib_AnyOrderTest @nodoc Signature @isTest private class fflib_AnyOrderTest fflib_AnyOrderTest Methods assertFailMessage(exceptionMessage, expectedInvocations, actualsInvocations) thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() thatCustomMessageIsAdded() thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() thatThrownExceptionIfCalledLessThanAtLeastOnce() thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimes() thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimesWithMatchers() thatThrownExceptionIfCalledLessThanAtLeastOnceWithMatchers() thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() thatVerifiesAtLeastNumberOfTimes() thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimes() thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimesWithMatchers() thatVerifiesAtLeastNumberOfTimesWithMatchers() thatVerifiesAtLeastOnce() thatVerifiesAtLeastOnceNumberOfTimes() thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimes() thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimesWithMatchers() thatVerifiesAtLeastOnceNumberOfTimesWithMatchers() thatVerifiesAtLeastOnceWhenIsCalledMoreTimes() thatVerifiesAtLeastOnceWhenIsCalledMoreTimesWithMatchers() thatVerifiesAtLeastOnceWithMatchers() thatVerifiesAtMostNumberOfTimes() thatVerifiesAtMostNumberOfTimesWithMatchers() thatVerifiesAtMostSameNumberOfTimes() thatVerifiesAtMostSameNumberOfTimesWithMatchers() thatVerifiesBetweenNumberOfTimes() thatVerifiesBetweenNumberOfTimesWithMatchers() thatVerifyNeverFailsWhenCalledMoreTimes() thatVerifyNeverFailsWhenCalledMoreTimesWithMatchers() thatVerifyTimesMethodFailsWhenCalledLessTimes() thatVerifyTimesMethodFailsWhenCalledLessTimesWithMatchers() thatVerifyTimesMethodFailsWhenCalledMoreTimes() thatVerifyTimesMethodFailsWhenCalledMoreTimesWithMatchers() verifyMethodCallWhenNoCallsBeenMadeForType() verifyMethodNotCalled() verifyMultipleMethodCallsWithSameSingleArgument() verifyNeverMethodHasBeenNotCalledWithMatchers() verifyNeverMethodHasNotBeenCalled() verifySingleMethodCallWithMultipleArguments() verifyTimesMethodHasBeenCalled() verifyTimesMethodHasBeenCalledWithMatchers() whenVerifyCustomMatchersCanBeUsed() whenVerifyMethodNeverCalledMatchersAreReset() whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() assertFailMessage(exceptionMessage, expectedInvocations, actualsInvocations) Signature private static void assertFailMessage(String exceptionMessage, Integer expectedInvocations, Integer actualsInvocations) thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() Signature @isTest private static void thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() Signature @isTest private static void thatBetweenThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() Signature @isTest private static void thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() Signature @isTest private static void thatBetweenThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() thatCustomMessageIsAdded() Signature @isTest private static void thatCustomMessageIsAdded() thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() Signature @isTest private static void thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimes() thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() Signature @isTest private static void thatThrownExceptionIfCalledLessThanAtLeastNumberOfTimesWithMatchers() thatThrownExceptionIfCalledLessThanAtLeastOnce() Signature @isTest private static void thatThrownExceptionIfCalledLessThanAtLeastOnce() thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimes() Signature @isTest private static void thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimes() thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimesWithMatchers() Signature @isTest private static void thatThrownExceptionIfCalledLessThanAtLeastOnceNumberOfTimesWithMatchers() thatThrownExceptionIfCalledLessThanAtLeastOnceWithMatchers() Signature @isTest private static void thatThrownExceptionIfCalledLessThanAtLeastOnceWithMatchers() thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() Signature @isTest private static void thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimes() thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() Signature @isTest private static void thatThrownExceptionIfCalledMoreThanAtMostNumberOfTimesWithMatchers() thatVerifiesAtLeastNumberOfTimes() Signature @isTest private static void thatVerifiesAtLeastNumberOfTimes() thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimes() Signature @isTest private static void thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimes() thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimesWithMatchers() Signature @isTest private static void thatVerifiesAtLeastNumberOfTimesWhenIsCalledMoreTimesWithMatchers() thatVerifiesAtLeastNumberOfTimesWithMatchers() Signature @isTest private static void thatVerifiesAtLeastNumberOfTimesWithMatchers() thatVerifiesAtLeastOnce() Signature @isTest private static void thatVerifiesAtLeastOnce() thatVerifiesAtLeastOnceNumberOfTimes() Signature @isTest private static void thatVerifiesAtLeastOnceNumberOfTimes() thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimes() Signature @isTest private static void thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimes() thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimesWithMatchers() Signature @isTest private static void thatVerifiesAtLeastOnceNumberOfTimesWhenIsCalledMoreTimesWithMatchers() thatVerifiesAtLeastOnceNumberOfTimesWithMatchers() Signature @isTest private static void thatVerifiesAtLeastOnceNumberOfTimesWithMatchers() thatVerifiesAtLeastOnceWhenIsCalledMoreTimes() Signature @isTest private static void thatVerifiesAtLeastOnceWhenIsCalledMoreTimes() thatVerifiesAtLeastOnceWhenIsCalledMoreTimesWithMatchers() Signature @isTest private static void thatVerifiesAtLeastOnceWhenIsCalledMoreTimesWithMatchers() thatVerifiesAtLeastOnceWithMatchers() Signature @isTest private static void thatVerifiesAtLeastOnceWithMatchers() thatVerifiesAtMostNumberOfTimes() Signature @isTest private static void thatVerifiesAtMostNumberOfTimes() thatVerifiesAtMostNumberOfTimesWithMatchers() Signature @isTest private static void thatVerifiesAtMostNumberOfTimesWithMatchers() thatVerifiesAtMostSameNumberOfTimes() Signature @isTest private static void thatVerifiesAtMostSameNumberOfTimes() thatVerifiesAtMostSameNumberOfTimesWithMatchers() Signature @isTest private static void thatVerifiesAtMostSameNumberOfTimesWithMatchers() thatVerifiesBetweenNumberOfTimes() Signature @isTest private static void thatVerifiesBetweenNumberOfTimes() thatVerifiesBetweenNumberOfTimesWithMatchers() Signature @isTest private static void thatVerifiesBetweenNumberOfTimesWithMatchers() thatVerifyNeverFailsWhenCalledMoreTimes() Signature @isTest private static void thatVerifyNeverFailsWhenCalledMoreTimes() thatVerifyNeverFailsWhenCalledMoreTimesWithMatchers() Signature @isTest private static void thatVerifyNeverFailsWhenCalledMoreTimesWithMatchers() thatVerifyTimesMethodFailsWhenCalledLessTimes() Signature @isTest private static void thatVerifyTimesMethodFailsWhenCalledLessTimes() thatVerifyTimesMethodFailsWhenCalledLessTimesWithMatchers() Signature @isTest private static void thatVerifyTimesMethodFailsWhenCalledLessTimesWithMatchers() thatVerifyTimesMethodFailsWhenCalledMoreTimes() Signature @isTest private static void thatVerifyTimesMethodFailsWhenCalledMoreTimes() thatVerifyTimesMethodFailsWhenCalledMoreTimesWithMatchers() Signature @isTest private static void thatVerifyTimesMethodFailsWhenCalledMoreTimesWithMatchers() verifyMethodCallWhenNoCallsBeenMadeForType() Signature @isTest private static void verifyMethodCallWhenNoCallsBeenMadeForType() verifyMethodNotCalled() Signature @isTest private static void verifyMethodNotCalled() verifyMultipleMethodCallsWithSameSingleArgument() Signature @isTest private static void verifyMultipleMethodCallsWithSameSingleArgument() verifyNeverMethodHasBeenNotCalledWithMatchers() Signature @isTest private static void verifyNeverMethodHasBeenNotCalledWithMatchers() verifyNeverMethodHasNotBeenCalled() Signature @isTest private static void verifyNeverMethodHasNotBeenCalled() verifySingleMethodCallWithMultipleArguments() Signature @isTest private static void verifySingleMethodCallWithMultipleArguments() verifyTimesMethodHasBeenCalled() Signature @isTest private static void verifyTimesMethodHasBeenCalled() verifyTimesMethodHasBeenCalledWithMatchers() Signature @isTest private static void verifyTimesMethodHasBeenCalledWithMatchers() whenVerifyCustomMatchersCanBeUsed() Signature @isTest private static void whenVerifyCustomMatchersCanBeUsed() whenVerifyMethodNeverCalledMatchersAreReset() Signature @isTest private static void whenVerifyMethodNeverCalledMatchersAreReset() whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() Signature @isTest private static void whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() Signature @isTest private static void whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() fflib_AnyOrderTest.isEven Signature private class isEven implements fflib_IMatcher fflib_AnyOrderTest.isEven Methods matches(arg) matches(arg) Signature public Boolean matches(Object arg) fflib_AnyOrderTest.isOdd Signature private class isOdd implements fflib_IMatcher fflib_AnyOrderTest.isOdd Methods matches(arg) matches(arg) Signature public Boolean matches(Object arg)"
    },
    {
        "title": "fflib_ApexMocks",
        "fileName": "fflib_ApexMocks.html",
        "text": "fflib_ApexMocks Signature public with sharing class fflib_ApexMocks implements System.StubProvider fflib_ApexMocks Properties Name Signature DoThrowWhenExceptions public List<Exception> DoThrowWhenExceptions methodCountRecorder private final fflib_MethodCountRecorder methodCountRecorder methodReturnValueRecorder private final fflib_MethodReturnValueRecorder methodReturnValueRecorder methodVerifier private fflib_MethodVerifier methodVerifier myAnswer private fflib_Answer myAnswer NEVER public static final Integer NEVER set private set Stubbing public Boolean Stubbing verificationMode private fflib_VerificationMode verificationMode verifying public Boolean verifying fflib_ApexMocks Constructors fflib_ApexMocks() Construct an ApexMocks instance. fflib_ApexMocks() Construct an ApexMocks instance. Signature public fflib_ApexMocks() fflib_ApexMocks Methods atLeast(atLeastTimes) Sets the minimum number of times the method is expected to be called. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. atLeastOnce() Sets that the method is called at least once. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. atMost(atMostTimes) Sets the maximum number of times the method is expected to be called. Not available in the InOrder verification. between(atLeastTimes, atMostTimes) Sets the range of how many times the method is expected to be called. Not available in the InOrder verification. calls(times) Sets how many times the method is expected to be called for an InOrder verifier. Available Only with the InOrder verification. A verification mode using calls will not fail if the method is called more times than expected. description(customAssertMessage) Sets a custom assert message for the verify. doAnswer(answer, mockInstance) Setup answer stubbing for a void method. doThrowWhen(e, mockInstance) Setup exception stubbing for a void method. doThrowWhen(exps, mockInstance) Setup exception stubbing for a void method. extractTypeName(mockInstance) getMethodReturnValue(mockInvocation) Get the method return value for the given method call. handleMethodCall(stubbedObject, stubbedMethodName, returnType, listOfParamTypes, listOfParamNames, listOfArgs) Inherited from StubProvider. mock(classToMock) Creates mock object of given class or interface. mockNonVoidMethod(mockInstance, methodName, methodArgTypes, methodArgValues) Mock a non-void method. Called by generated mock instance classes, not directly by a developers code. mockVoidMethod(mockInstance, methodName, methodArgTypes, methodArgValues) Mock a void method. Called by generated mock instance classes, not directly by a developers code. never() Sets that the method is not expected to be called. prepareMethodReturnValue(mockInvocation) Prepare a stubbed method return value. recordMethod(mockInvocation) Record a method was called on a mock object. returnValue(invocation) setOrderedVerifier(verifyOrderingMode) Sets the fflib_VerificationMode object. To internal use only. Used to pass the verification mode that has been set in the  verify of the fflib_InOrder class. startStubbing() Tell ApexMocks framework you are about to start stubbing using when() calls. stopStubbing() Tell ApexMocks framework you are about to stop stubbing using when() calls. times(times) Sets how many times the method is expected to be called. For InOrder verification we copy Mockito behavior which is as follows;  Consume the specified number of matching invocations, ignoring non-matching invocations in between  Fail an assert if the very next invocation matches, but additional matches can still exist so long as at least one non-matching invocation exists before them    For example if you had a(); a(); b(); a(); then inOrder.verify(myMock, 2)).a(); or inOrder.verify(myMock, 3)).a(); would pass but not inOrder.verify(myMock, 1)).a(); toString() A simple override to suppress the default toString logic, which is noisy and rarely useful. In some cases, the Salesforce default implementation of toString here can cause internal Salesforce errors if it has circular references. verify(mockInstance) Verify a method was called on a mock object. verify(mockInstance, verificationMode) Verify a method was called on a mock object. verify(mockInstance, times) Verify a method was called on a mock object. verifyMethodCall(mockInvocation) Verfiy a method was called on a mock object. when(ignoredRetVal) Setup when stubbing for a mock object instance. atLeast(atLeastTimes) Sets the minimum number of times the method is expected to be called. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. Signature public fflib_VerificationMode atLeast(Integer atLeastTimes) Parameters atLeastTimes Type: Integer The minimum number of times you expect the method to have been called. Returns The fflib_VerificationMode object instance with the proper settings. atLeastOnce() Sets that the method is called at least once. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. Signature public fflib_VerificationMode atLeastOnce() Returns The fflib_VerificationMode object instance with the proper settings. atMost(atMostTimes) Sets the maximum number of times the method is expected to be called. Not available in the InOrder verification. Signature public fflib_VerificationMode atMost(Integer atMostTimes) Parameters atMostTimes Type: Integer The maximum number of times the method is expected to be called. Returns The fflib_VerificationMode object instance with the proper settings. between(atLeastTimes, atMostTimes) Sets the range of how many times the method is expected to be called. Not available in the InOrder verification. Signature public fflib_VerificationMode between(Integer atLeastTimes, Integer atMostTimes) Parameters atLeastTimes Type: Integer The minimum number of times you expect the method to have been called. atMostTimes Type: Integer The maximum number of times the method is expected to be called. Returns The fflib_VerificationMode object instance with the proper settings. calls(times) Sets how many times the method is expected to be called for an InOrder verifier. Available Only with the InOrder verification. A verification mode using calls will not fail if the method is called more times than expected. Signature public fflib_VerificationMode calls(Integer times) Parameters times Type: Integer The number of times you expect the method to have been called in the InOrder verifying( no greedy verify). Returns The fflib_VerificationMode object instance with the proper settings. description(customAssertMessage) Sets a custom assert message for the verify. Signature public fflib_VerificationMode description(String customAssertMessage) Parameters customAssertMessage Type: String The custom message for the assert in case the assert is false. The custom message is queued to the default message. Returns The fflib_VerificationMode object instance with the proper settings. doAnswer(answer, mockInstance) Setup answer stubbing for a void method. Signature public Object doAnswer(fflib_Answer answer, Object mockInstance) Parameters answer Type: fflib_Answer The answer to invoke. mockInstance Type: Object The mock object instance. doThrowWhen(e, mockInstance) Setup exception stubbing for a void method. Signature public Object doThrowWhen(Exception e, Object mockInstance) Parameters e Type: Exception The exception to throw. mockInstance Type: Object The mock object instance. doThrowWhen(exps, mockInstance) Setup exception stubbing for a void method. Signature public Object doThrowWhen(List<Exception> exps, Object mockInstance) Parameters exps Type: List<Exception> The list of exceptions to throw. mockInstance Type: Object The mock object instance. extractTypeName(mockInstance) Signature public static String extractTypeName(Object mockInstance) getMethodReturnValue(mockInvocation) Get the method return value for the given method call. Signature public fflib_MethodReturnValue getMethodReturnValue(fflib_InvocationOnMock mockInvocation) Parameters mockInvocation Type: fflib_InvocationOnMock The invocation on the mock containing information about the method and the arguments. Returns The MethodReturnValue instance. handleMethodCall(stubbedObject, stubbedMethodName, returnType, listOfParamTypes, listOfParamNames, listOfArgs) Inherited from StubProvider. Signature public Object handleMethodCall(Object stubbedObject, String stubbedMethodName, Type returnType,\t\tList<type> listOfParamTypes, List<String> listOfParamNames, List<Object> listOfArgs) Parameters stubbedObject Type: Object The stubbed object. stubbedMethodName Type: String The name of the invoked method. returnType Type: Type The return type of the invoked method. listOfParamTypes A list of the parameter types of the invoked method. listOfParamNames Type: List<String> A list of the parameter names of the invoked method. listOfArgs Type: List<Object> The actual argument values passed into this method at runtime. Returns The stubbed return value. Null by default, unless you prepared one that matches this method and argument values in stubbing. mock(classToMock) Creates mock object of given class or interface. Signature public Object mock(Type classToMock) Parameters classToMock Type: Type class or interface to mock. Returns mock object. mockNonVoidMethod(mockInstance, methodName, methodArgTypes, methodArgValues) Mock a non-void method. Called by generated mock instance classes, not directly by a developers code. Signature public Object mockNonVoidMethod(Object mockInstance, String methodName, List<Type> methodArgTypes, List<Object> methodArgValues) Parameters mockInstance Type: Object The mock object instance. methodName Type: String The method for which to prepare a return value. methodArgTypes Type: List<Type> The method argument types for which to prepare a return value. methodArgValues Type: List<Object> The method argument values for which to prepare a return value. mockVoidMethod(mockInstance, methodName, methodArgTypes, methodArgValues) Mock a void method. Called by generated mock instance classes, not directly by a developers code. Signature public void mockVoidMethod(Object mockInstance, String methodName, List<Type> methodArgTypes, List<Object> methodArgValues) Parameters mockInstance Type: Object The mock object instance. methodName Type: String The method for which to prepare a return value. methodArgTypes Type: List<Type> The method argument types for which to prepare a return value. methodArgValues Type: List<Object> The method argument values for which to prepare a return value. never() Sets that the method is not expected to be called. Signature public fflib_VerificationMode never() Returns The fflib_VerificationMode object instance with the proper settings. prepareMethodReturnValue(mockInvocation) Prepare a stubbed method return value. Signature public fflib_MethodReturnValue prepareMethodReturnValue(fflib_InvocationOnMock mockInvocation) Parameters mockInvocation Type: fflib_InvocationOnMock The invocation on the mock containing information about the method and the arguments. Returns The MethodReturnValue instance. recordMethod(mockInvocation) Record a method was called on a mock object. Signature public void recordMethod(fflib_InvocationOnMock mockInvocation) Parameters mockInvocation Type: fflib_InvocationOnMock The invocation on the mock containing information about the method and the arguments. returnValue(invocation) Signature private Object returnValue(fflib_InvocationOnMock invocation) setOrderedVerifier(verifyOrderingMode) Sets the fflib_VerificationMode object. To internal use only. Used to pass the verification mode that has been set in the  verify of the fflib_InOrder class. Signature public void setOrderedVerifier(fflib_InOrder verifyOrderingMode) Returns The fflib_VerificationMode object instance with the proper settings. startStubbing() Tell ApexMocks framework you are about to start stubbing using when() calls. Signature public void startStubbing() stopStubbing() Tell ApexMocks framework you are about to stop stubbing using when() calls. Signature public void stopStubbing() times(times) Sets how many times the method is expected to be called. For InOrder verification we copy Mockito behavior which is as follows;  Consume the specified number of matching invocations, ignoring non-matching invocations in between  Fail an assert if the very next invocation matches, but additional matches can still exist so long as at least one non-matching invocation exists before them    For example if you had a(); a(); b(); a(); then inOrder.verify(myMock, 2)).a(); or inOrder.verify(myMock, 3)).a(); would pass but not inOrder.verify(myMock, 1)).a(); Signature public fflib_VerificationMode times(Integer times) Parameters times Type: public fflib_VerificationMode The number of times you expect the method to have been called. Returns The fflib_VerificationMode object instance with the proper settings. toString() A simple override to suppress the default toString logic, which is noisy and rarely useful. In some cases, the Salesforce default implementation of toString here can cause internal Salesforce errors if it has circular references. Signature public override String toString() Returns \"fflib_ApexMocks\" String literal verify(mockInstance) Verify a method was called on a mock object. Signature public Object verify(Object mockInstance) Parameters mockInstance Type: Object The mock object instance. Returns The mock object instance. verify(mockInstance, verificationMode) Verify a method was called on a mock object. Signature public Object verify(Object mockInstance, fflib_VerificationMode verificationMode) Parameters mockInstance Type: Object The mock object instance. verificationMode Type: fflib_VerificationMode Defines the constraints for performing the verification(e.g. the minimum and maximum expected invocation counts). Returns The mock object instance. verify(mockInstance, times) Verify a method was called on a mock object. Signature public Object verify(Object mockInstance, Integer times) Parameters mockInstance Type: Object The mock object instance. times Type: Integer The number of times you expect the method to have been called. Returns The mock object instance. verifyMethodCall(mockInvocation) Verfiy a method was called on a mock object. Signature public void verifyMethodCall(fflib_InvocationOnMock mockInvocation) Parameters mockInvocation Type: fflib_InvocationOnMock The invocation on the mock containing information about the method and the arguments. when(ignoredRetVal) Setup when stubbing for a mock object instance. Signature public fflib_MethodReturnValue when(Object ignoredRetVal) Parameters ignoredRetVal Type: Object This is the return value from the method called on the mockInstance, and is ignored here since we are about to setup the stubbed return value using thenReturn()(see MethodReturnValue class below). fflib_ApexMocks.ApexMocksException Signature public class ApexMocksException extends Exception"
    },
    {
        "title": "fflib_ApexMocksConfig",
        "fileName": "fflib_ApexMocksConfig.html",
        "text": "fflib_ApexMocksConfig Signature @IsTest public class fflib_ApexMocksConfig fflib_ApexMocksConfig Properties Name Signature Description HasIndependentMocks public static Boolean HasIndependentMocks When false, stubbed behaviour and invocation counts are shared among all test spies. - See fflib_ApexMocksTest.thatMultipleInstancesCanBeMockedDependently - This is the default for backwards compatibility. When true, each test spy instance has its own stubbed behaviour and invocations. - See fflib_ApexMocksTest.thatMultipleInstancesCanBeMockedIndependently"
    },
    {
        "title": "fflib_ApexMocksTest",
        "fileName": "fflib_ApexMocksTest.html",
        "text": "fflib_ApexMocksTest Signature @isTest private class fflib_ApexMocksTest fflib_ApexMocksTest Properties Name Signature MY_MOCK_LIST private static final fflib_MyList MY_MOCK_LIST MY_MOCKS private static final fflib_ApexMocks MY_MOCKS fflib_ApexMocksTest Methods assertExceptionMessage(expectedMessage) assertExceptionMessageForGet2(expectedMessage) assertExceptionMessageOnAddMoreVoidMethod(expectedMessage) assertExceptionMessageOnVoidMethod(expectedMessage) assertReturnedValue(expectedValue) assertReturnedValueForGet2(expectedValue) stubAndVerifyMethodCallsWithNoArguments() thatExceptionIsthrownWhenReturnMultiPassEmptyList() thatExceptionIsthrownWhenReturnMultiPassNullList() thatExceptionIsthrownWhenStubbingIsNotDone() thatExceptionIsthrownWhenThrowMultiPassEmptyList() thatExceptionIsthrownWhenThrowMultiPassNullList() thatMultipleInstancesCanBeMockedDependently() thatMultipleInstancesCanBeMockedIndependently() thatMultipleVoidMethodsThrowsMultipleExceptions() thatNullCanBeUsedAsExceptionvalue() thatNullCanBeUsedAsReturnValue() thatStubbingCanBeChainedFirstExceptionThenValue() thatStubbingCanBeChainedFirstValueThenException() thatStubbingMultipleMethodsCanBeChainedFirstExceptionThenValue() thatStubbingMultipleMethodsCanBeChainedFirstValueThenException() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiValue() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleException() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleValue() thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiValues() thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleException() thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleValue() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiValue() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleException() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleValue() thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiValues() thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleException() thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleValue() thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverride() thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverrideWithSingleException() thatStubbingReturnsAndThrowsDifferentValuesAndExceptionsForDifferentCalls() thatStubbingReturnsDifferentValuesForDifferentCalls() thatStubbingReturnsDifferentValuesForDifferentCallsAndRepeatLastValuesForFurtherCalls() thatStubbingThrowsAndReturnsDifferentExceptionsAndValuesForDifferentCalls() thatStubbingThrowsDifferentExceptionsForDifferentCalls() thatStubbingThrowsDifferentExceptionsForDifferentCallsAndRepeatLastExceptionForFurtherCalls() thatToStringReturnsSimpleStringValue() thatVoidMethodThrowsMultipleExceptions() verifyMethodCallsWithSameNameButDifferentArgumentTypes() verifyMethodCallWhenNoCallsBeenMadeForType() verifyMethodNotCalled() verifyMultipleMethodCallsWithDifferentSingleArgument() verifyMultipleMethodCallsWithSameSingleArgument() verifySingleMethodCallWithMultipleArguments() verifySingleMethodCallWithNoArguments() verifySingleMethodCallWithSingleArgument() whenMockIsGeneratedCanStubVerify() whenMockIsGeneratedCanVerify() whenSetDoThrowWhenExceptionsValuesAreSet() whenStubCallWithNoArgumentsShouldReturnStubbedValue() whenStubCustomMatchersCanBeUsed() whenStubExceptionSameMethodWithMatchersAndNonMatchersShouldStubInOrder() whenStubExceptionTheExceptionShouldBeThrown() whenStubExceptionWithMatchersShouldThrowException() whenStubMultipleCallsWithMatchersShouldReturnExpectedValues() whenStubMultipleCallsWithMultipleArgumentShouldReturnStubbedValues() whenStubMultipleCallsWithSingleArgumentShouldReturnStubbedValues() whenStubMultipleVoidMethodsWithExceptionsThenExceptionsShouldBeThrown() whenStubNullConcreteArgValueCorrectValueIsReturned() whenStubSameCallWithDifferentArgumentValueShouldReturnLastStubbedValue() whenStubSameMethodWithMatchersAndNonMatchersShouldStubInOrder() whenStubSingleCallWithNullReturnValueItShouldReturnNull() whenStubSingleCallWithSingleArgumentShouldReturnStubbedValue() whenStubVoidMethodWithExceptionAndCallMethodTwiceThenExceptionShouldBeThrownTwice() whenStubVoidMethodWithExceptionThenExceptionShouldBeThrown() whenStubWithMatcherAndNonMatcherArgumentsShouldThrowException() whenVerifyCustomMatchersCanBeUsed() whenVerifyMethodNeverCalledMatchersAreReset() whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() whenVerifyWithMatcherAndNonMatcherArgumentsShouldThrowException() assertExceptionMessage(expectedMessage) Signature private static void assertExceptionMessage(String expectedMessage) assertExceptionMessageForGet2(expectedMessage) Signature private static void assertExceptionMessageForGet2(String expectedMessage) assertExceptionMessageOnAddMoreVoidMethod(expectedMessage) Signature private static void assertExceptionMessageOnAddMoreVoidMethod(String expectedMessage) assertExceptionMessageOnVoidMethod(expectedMessage) Signature private static void assertExceptionMessageOnVoidMethod(String expectedMessage) assertReturnedValue(expectedValue) Signature private static void assertReturnedValue(String expectedValue) assertReturnedValueForGet2(expectedValue) Signature private static void assertReturnedValueForGet2(String expectedValue) stubAndVerifyMethodCallsWithNoArguments() Signature @isTest static void stubAndVerifyMethodCallsWithNoArguments() thatExceptionIsthrownWhenReturnMultiPassEmptyList() Signature @isTest static void thatExceptionIsthrownWhenReturnMultiPassEmptyList() thatExceptionIsthrownWhenReturnMultiPassNullList() Signature @isTest static void thatExceptionIsthrownWhenReturnMultiPassNullList() thatExceptionIsthrownWhenStubbingIsNotDone() Signature @isTest static void thatExceptionIsthrownWhenStubbingIsNotDone() thatExceptionIsthrownWhenThrowMultiPassEmptyList() Signature @isTest static void thatExceptionIsthrownWhenThrowMultiPassEmptyList() thatExceptionIsthrownWhenThrowMultiPassNullList() Signature @isTest static void thatExceptionIsthrownWhenThrowMultiPassNullList() thatMultipleInstancesCanBeMockedDependently() Signature @isTest static void thatMultipleInstancesCanBeMockedDependently() thatMultipleInstancesCanBeMockedIndependently() Signature @isTest static void thatMultipleInstancesCanBeMockedIndependently() thatMultipleVoidMethodsThrowsMultipleExceptions() Signature @isTest static void thatMultipleVoidMethodsThrowsMultipleExceptions() thatNullCanBeUsedAsExceptionvalue() Signature @isTest static void thatNullCanBeUsedAsExceptionvalue() thatNullCanBeUsedAsReturnValue() Signature @isTest static void thatNullCanBeUsedAsReturnValue() thatStubbingCanBeChainedFirstExceptionThenValue() Signature static void thatStubbingCanBeChainedFirstExceptionThenValue() thatStubbingCanBeChainedFirstValueThenException() Signature @isTest static void thatStubbingCanBeChainedFirstValueThenException() thatStubbingMultipleMethodsCanBeChainedFirstExceptionThenValue() Signature @isTest static void thatStubbingMultipleMethodsCanBeChainedFirstExceptionThenValue() thatStubbingMultipleMethodsCanBeChainedFirstValueThenException() Signature @isTest static void thatStubbingMultipleMethodsCanBeChainedFirstValueThenException() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiExceptions() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiValue() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithMultiValue() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleException() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleException() thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleValue() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnMultiWithSingleValue() thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiExceptions() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiValues() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnWithMultiValues() thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleException() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleException() thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleValue() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenReturnWithSingleValue() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiExceptions() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiValue() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithMultiValue() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleException() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleException() thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleValue() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowMultiWithSingleValue() thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiExceptions() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiExceptions() thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiValues() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowWithMultiValues() thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleException() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleException() thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleValue() Signature @isTest static void thatStubbingMultipleTimesOverridePreviousThenThrowWithSingleValue() thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverride() Signature @isTest static void thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverride() thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverrideWithSingleException() Signature @isTest static void thatStubbingMutipleTimesVoidMethodThrowsMultipleExceptionsOverrideWithSingleException() thatStubbingReturnsAndThrowsDifferentValuesAndExceptionsForDifferentCalls() Signature @isTest static void thatStubbingReturnsAndThrowsDifferentValuesAndExceptionsForDifferentCalls() thatStubbingReturnsDifferentValuesForDifferentCalls() Signature @isTest static void thatStubbingReturnsDifferentValuesForDifferentCalls() thatStubbingReturnsDifferentValuesForDifferentCallsAndRepeatLastValuesForFurtherCalls() Signature @isTest static void thatStubbingReturnsDifferentValuesForDifferentCallsAndRepeatLastValuesForFurtherCalls() thatStubbingThrowsAndReturnsDifferentExceptionsAndValuesForDifferentCalls() Signature @isTest static void thatStubbingThrowsAndReturnsDifferentExceptionsAndValuesForDifferentCalls() thatStubbingThrowsDifferentExceptionsForDifferentCalls() Signature @isTest static void thatStubbingThrowsDifferentExceptionsForDifferentCalls() thatStubbingThrowsDifferentExceptionsForDifferentCallsAndRepeatLastExceptionForFurtherCalls() Signature @isTest static void thatStubbingThrowsDifferentExceptionsForDifferentCallsAndRepeatLastExceptionForFurtherCalls() thatToStringReturnsSimpleStringValue() Signature @isTest static void thatToStringReturnsSimpleStringValue() thatVoidMethodThrowsMultipleExceptions() Signature @isTest static void thatVoidMethodThrowsMultipleExceptions() verifyMethodCallsWithSameNameButDifferentArgumentTypes() Signature @isTest static void verifyMethodCallsWithSameNameButDifferentArgumentTypes() verifyMethodCallWhenNoCallsBeenMadeForType() Signature @isTest static void verifyMethodCallWhenNoCallsBeenMadeForType() verifyMethodNotCalled() Signature @isTest static void verifyMethodNotCalled() verifyMultipleMethodCallsWithDifferentSingleArgument() Signature @isTest static void verifyMultipleMethodCallsWithDifferentSingleArgument() verifyMultipleMethodCallsWithSameSingleArgument() Signature @isTest static void verifyMultipleMethodCallsWithSameSingleArgument() verifySingleMethodCallWithMultipleArguments() Signature @isTest static void verifySingleMethodCallWithMultipleArguments() verifySingleMethodCallWithNoArguments() Signature @isTest static void verifySingleMethodCallWithNoArguments() verifySingleMethodCallWithSingleArgument() Signature @isTest static void verifySingleMethodCallWithSingleArgument() whenMockIsGeneratedCanStubVerify() Signature @isTest static void whenMockIsGeneratedCanStubVerify() whenMockIsGeneratedCanVerify() Signature @isTest static void whenMockIsGeneratedCanVerify() whenSetDoThrowWhenExceptionsValuesAreSet() Signature @isTest static void whenSetDoThrowWhenExceptionsValuesAreSet() whenStubCallWithNoArgumentsShouldReturnStubbedValue() Signature @isTest static void whenStubCallWithNoArgumentsShouldReturnStubbedValue() whenStubCustomMatchersCanBeUsed() Signature @isTest static void whenStubCustomMatchersCanBeUsed() whenStubExceptionSameMethodWithMatchersAndNonMatchersShouldStubInOrder() Signature @isTest static void whenStubExceptionSameMethodWithMatchersAndNonMatchersShouldStubInOrder() whenStubExceptionTheExceptionShouldBeThrown() Signature @isTest static void whenStubExceptionTheExceptionShouldBeThrown() whenStubExceptionWithMatchersShouldThrowException() Signature @isTest static void whenStubExceptionWithMatchersShouldThrowException() whenStubMultipleCallsWithMatchersShouldReturnExpectedValues() Signature @isTest static void whenStubMultipleCallsWithMatchersShouldReturnExpectedValues() whenStubMultipleCallsWithMultipleArgumentShouldReturnStubbedValues() Signature @isTest static void whenStubMultipleCallsWithMultipleArgumentShouldReturnStubbedValues() whenStubMultipleCallsWithSingleArgumentShouldReturnStubbedValues() Signature @isTest static void whenStubMultipleCallsWithSingleArgumentShouldReturnStubbedValues() whenStubMultipleVoidMethodsWithExceptionsThenExceptionsShouldBeThrown() Signature @isTest static void whenStubMultipleVoidMethodsWithExceptionsThenExceptionsShouldBeThrown() whenStubNullConcreteArgValueCorrectValueIsReturned() Signature @isTest static void whenStubNullConcreteArgValueCorrectValueIsReturned() whenStubSameCallWithDifferentArgumentValueShouldReturnLastStubbedValue() Signature @isTest static void whenStubSameCallWithDifferentArgumentValueShouldReturnLastStubbedValue() whenStubSameMethodWithMatchersAndNonMatchersShouldStubInOrder() Signature @isTest static void whenStubSameMethodWithMatchersAndNonMatchersShouldStubInOrder() whenStubSingleCallWithNullReturnValueItShouldReturnNull() Signature @isTest static void whenStubSingleCallWithNullReturnValueItShouldReturnNull() whenStubSingleCallWithSingleArgumentShouldReturnStubbedValue() Signature @isTest static void whenStubSingleCallWithSingleArgumentShouldReturnStubbedValue() whenStubVoidMethodWithExceptionAndCallMethodTwiceThenExceptionShouldBeThrownTwice() Signature @isTest static void whenStubVoidMethodWithExceptionAndCallMethodTwiceThenExceptionShouldBeThrownTwice() whenStubVoidMethodWithExceptionThenExceptionShouldBeThrown() Signature @isTest static void whenStubVoidMethodWithExceptionThenExceptionShouldBeThrown() whenStubWithMatcherAndNonMatcherArgumentsShouldThrowException() Signature @isTest static void whenStubWithMatcherAndNonMatcherArgumentsShouldThrowException() whenVerifyCustomMatchersCanBeUsed() Signature @isTest static void whenVerifyCustomMatchersCanBeUsed() whenVerifyMethodNeverCalledMatchersAreReset() Signature @isTest static void whenVerifyMethodNeverCalledMatchersAreReset() whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() Signature @isTest static void whenVerifyMultipleCallsWithMatchersShouldReturnCorrectMethodCallCounts() whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() Signature @isTest static void whenVerifyWithCombinedMatchersShouldReturnCorrectMethodCallCounts() whenVerifyWithMatcherAndNonMatcherArgumentsShouldThrowException() Signature @isTest static void whenVerifyWithMatcherAndNonMatcherArgumentsShouldThrowException() fflib_ApexMocksTest.isEven Signature private class isEven implements fflib_IMatcher fflib_ApexMocksTest.isEven Methods matches(arg) matches(arg) Signature public Boolean matches(Object arg) fflib_ApexMocksTest.isOdd Signature private class isOdd implements fflib_IMatcher fflib_ApexMocksTest.isOdd Methods matches(arg) matches(arg) Signature public Boolean matches(Object arg) fflib_ApexMocksTest.MyException Signature private class MyException extends Exception"
    },
    {
        "title": "fflib_ApexMocksUtils",
        "fileName": "fflib_ApexMocksUtils.html",
        "text": "fflib_ApexMocksUtils Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public class fflib_ApexMocksUtils fflib_ApexMocksUtils Methods deserializeParentsAndChildren(parentsType, parentDescribe, relationshipField, parents, children) Helper Methods getField(objectName, fieldName) Gets the SObjectField of an object by name makeRelationship(parentsType, parents, relationshipField, children) This is taken from https://gist.github.com/afawcett/8dbfc0e1d8c43c982881. This method works on the principle that serializing and deserialising child records is supported System.assertEquals(1,((List<Master__c>) JSON.deserialize( JSON.serialize( [select Id, Name,(select Id, Name from Children__r) from Master__c]), List<Master__c>.class)) [0].Children__r.size()); This method results internally in constructing this JSON, before deserialising it back into SObject's [ { \"attributes\": { \"type\": \"Master__c\", \"url\": \"/services/data/v32.0/sobjects/Master__c/a0YG0000005Jn5uMAC\" }, \"Name\": \"Fred\", \"Id\": \"a0YG0000005Jn5uMAC\", \"Children__r\": { \"totalSize\": 1, \"done\": true, \"records\": [ { \"attributes\": { \"type\": \"Child__c\", \"url\": \"/services/data/v32.0/sobjects/Child__c/a0ZG0000006JGPAMA4\" }, \"Name\": \"Bob\", \"Id\": \"a0ZG0000006JGPAMA4\", \"Master__c\": \"a0YG0000005Jn5uMAC\" } ] } ] makeRelationship(parentTypeName, childTypeName, parents, relationshipFieldName, children) Generic overload to makeRelationship. Enables creation of relationships in a loosely-coupled manner. nextToken(fromStream, depth, toStream) setReadOnlyFields(objInstance, deserializeType, properties) Gives the ability to set test values on formula and other read-only fields of mock SObjects setReadOnlyFields(objInstance, deserializeType, properties) Generic overload to setReadOnlyFields. Enables setting test values on read-only fields by their name streamTokens(fromStream, toStream, events) Utility function to stream tokens from a reader to a write, while providing a basic eventing model deserializeParentsAndChildren(parentsType, parentDescribe, relationshipField, parents, children) Helper Methods Signature private static Object deserializeParentsAndChildren(\t\tType parentsType,\t\tDescribeSObjectResult parentDescribe,\t\tSObjectField relationshipField,\t\tList<SObject> parents,\t\tList<List<SObject>> children\t) getField(objectName, fieldName) Gets the SObjectField of an object by name Signature private static Schema.SObjectField getField(String objectName, String fieldName) makeRelationship(parentsType, parents, relationshipField, children) This is taken from https://gist.github.com/afawcett/8dbfc0e1d8c43c982881. This method works on the principle that serializing and deserialising child records is supported System.assertEquals(1,((List<Master__c>) JSON.deserialize( JSON.serialize( [select Id, Name,(select Id, Name from Children__r) from Master__c]), List<Master__c>.class)) [0].Children__r.size()); This method results internally in constructing this JSON, before deserialising it back into SObject's [ { \"attributes\": { \"type\": \"Master__c\", \"url\": \"/services/data/v32.0/sobjects/Master__c/a0YG0000005Jn5uMAC\" }, \"Name\": \"Fred\", \"Id\": \"a0YG0000005Jn5uMAC\", \"Children__r\": { \"totalSize\": 1, \"done\": true, \"records\": [ { \"attributes\": { \"type\": \"Child__c\", \"url\": \"/services/data/v32.0/sobjects/Child__c/a0ZG0000006JGPAMA4\" }, \"Name\": \"Bob\", \"Id\": \"a0ZG0000006JGPAMA4\", \"Master__c\": \"a0YG0000005Jn5uMAC\" } ] } ] Signature public static Object makeRelationship(Type parentsType, List<SObject> parents, SObjectField relationshipField, List<List<SObject>> children) makeRelationship(parentTypeName, childTypeName, parents, relationshipFieldName, children) Generic overload to makeRelationship. Enables creation of relationships in a loosely-coupled manner. Signature public static Object makeRelationship(\t\t\tString parentTypeName,\t\t\tString childTypeName,\t\t\tList<SObject> parents,\t\t\tString relationshipFieldName,\t\t\tList<List<SObject>> children) nextToken(fromStream, depth, toStream) Signature public void nextToken(JSONParser fromStream, Integer depth, JSONGenerator toStream) setReadOnlyFields(objInstance, deserializeType, properties) Gives the ability to set test values on formula and other read-only fields of mock SObjects Signature public static Object setReadOnlyFields(SObject objInstance, Type deserializeType, Map<SObjectField, Object> properties) setReadOnlyFields(objInstance, deserializeType, properties) Generic overload to setReadOnlyFields. Enables setting test values on read-only fields by their name Signature public static Object setReadOnlyFields(SObject objInstance, Type deserializeType, Map<String, Object> properties) streamTokens(fromStream, toStream, events) Utility function to stream tokens from a reader to a write, while providing a basic eventing model Signature private static void streamTokens(JSONParser fromStream, JSONGenerator toStream, JSONParserEvents events) fflib_ApexMocksUtils.InjectChildrenEventHandler Monitors stream events for end of object for each SObject contained in the parent list then injects the respective childs record list into the stream Signature private class InjectChildrenEventHandler implements JSONParserEvents fflib_ApexMocksUtils.InjectChildrenEventHandler Properties Name Signature childListIdx private Integer childListIdx children private List<List<SObject>> children childrenParser private JSONParser childrenParser relationshipName private String relationshipName fflib_ApexMocksUtils.JSONParserEvents Basic event used during the above streaming Signature private interface JSONParserEvents fflib_ApexMocksUtils.JSONParserEvents Methods getType(typeName) Gets the SObjectType by name nextToken(fromStream, depth, toStream) getType(typeName) Gets the SObjectType by name Signature private static Schema.SObjectType getType(String typeName) nextToken(fromStream, depth, toStream) Signature void nextToken(JSONParser fromStream, Integer depth, JSONGenerator toStream)"
    },
    {
        "title": "fflib_ApexMocksUtilsTest",
        "fileName": "fflib_ApexMocksUtilsTest.html",
        "text": "fflib_ApexMocksUtilsTest Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest public class fflib_ApexMocksUtilsTest fflib_ApexMocksUtilsTest Methods findAnyFieldSet() makeRelationship_GenericOverload_ReturnsObjectsWithRelationFieldSet() makeRelationship_GenericOverload_ThrowsErrorOnInvalidChildType() makeRelationship_GenericOverload_ThrowsErrorOnInvalidFieldName() makeRelationship_GenericOverload_ThrowsErrorOnInvalidParentType() makeRelationship_returnsObjectsWithRelationFieldSet() setReadOnlyFields_CreatedByIdSetToCurrentUserId_IdFieldSetSuccessfully() setReadOnlyFields_IsDeletedSetOnAccount_BooleanFieldSetSuccessfully() setReadOnlyFields_LastReferencedDateSetOnAccount_DateTimeFieldSetSuccessfully() setReadOnlyFields_PolymorphicRelationJoin_FieldSetSuccessfully() findAnyFieldSet() Signature public static Schema.FieldSet findAnyFieldSet() makeRelationship_GenericOverload_ReturnsObjectsWithRelationFieldSet() Signature @isTest private static void makeRelationship_GenericOverload_ReturnsObjectsWithRelationFieldSet() makeRelationship_GenericOverload_ThrowsErrorOnInvalidChildType() Signature @isTest private static void makeRelationship_GenericOverload_ThrowsErrorOnInvalidChildType() makeRelationship_GenericOverload_ThrowsErrorOnInvalidFieldName() Signature @isTest private static void makeRelationship_GenericOverload_ThrowsErrorOnInvalidFieldName() makeRelationship_GenericOverload_ThrowsErrorOnInvalidParentType() Signature @isTest private static void makeRelationship_GenericOverload_ThrowsErrorOnInvalidParentType() makeRelationship_returnsObjectsWithRelationFieldSet() Signature @isTest private static void makeRelationship_returnsObjectsWithRelationFieldSet() setReadOnlyFields_CreatedByIdSetToCurrentUserId_IdFieldSetSuccessfully() Signature @isTest static void setReadOnlyFields_CreatedByIdSetToCurrentUserId_IdFieldSetSuccessfully() setReadOnlyFields_IsDeletedSetOnAccount_BooleanFieldSetSuccessfully() Signature @isTest static void setReadOnlyFields_IsDeletedSetOnAccount_BooleanFieldSetSuccessfully() setReadOnlyFields_LastReferencedDateSetOnAccount_DateTimeFieldSetSuccessfully() Signature @isTest static void setReadOnlyFields_LastReferencedDateSetOnAccount_DateTimeFieldSetSuccessfully() setReadOnlyFields_PolymorphicRelationJoin_FieldSetSuccessfully() Signature @isTest static void setReadOnlyFields_PolymorphicRelationJoin_FieldSetSuccessfully()"
    },
    {
        "title": "fflib_Application",
        "fileName": "fflib_Application.html",
        "text": "fflib_Application Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public virtual class fflib_Application fflib_Application.ApplicationException Signature public class ApplicationException extends Exception fflib_Application.DeveloperException Exception representing a developer coding error, not intended for end user eyes Signature public class DeveloperException extends Exception fflib_Application.DomainFactory Class implements a Domain class factory Signature public virtual class DomainFactory implements fflib_IDomainFactory fflib_Application.DomainFactory Properties Name Signature constructorTypeByObject protected Map<Object, Type> constructorTypeByObject m_selectorFactory protected fflib_Application.SelectorFactory m_selectorFactory mockDomainByObject protected Map<Object, fflib_IDomain> mockDomainByObject fflib_Application.DomainFactory Constructors DomainFactory() Constructs a Domain factory DomainFactory(selectorFactory, constructorTypeByObject) Constructs a Domain factory, using an instance of the Selector Factory and a map of Apex classes implementing fflib_ISObjectDomain by SObjectType Note this will not check the Apex classes provided actually implement the interfaces since this is not possible in the Apex runtime at present DomainFactory(selectorFactory, sObjectByDomainConstructorType) Constructs a Domain factory, using an instance of the Selector Factory and a map of Apex classes implementing fflib_ISObjectDomain by SObjectType Note this will not check the Apex classes provided actually implement the interfaces since this is not possible in the Apex runtime at present DomainFactory() Constructs a Domain factory Signature public DomainFactory() DomainFactory(selectorFactory, constructorTypeByObject) Constructs a Domain factory, using an instance of the Selector Factory and a map of Apex classes implementing fflib_ISObjectDomain by SObjectType Note this will not check the Apex classes provided actually implement the interfaces since this is not possible in the Apex runtime at present Signature public DomainFactory(fflib_Application.SelectorFactory selectorFactory,\t\t\tMap<Object, Type> constructorTypeByObject) Parameters selectorFactory Type: fflib_Application.SelectorFactory , e.g. Application.Selector constructorTypeByObject Type: Type> Map of Domain classes by ObjectType DomainFactory(selectorFactory, sObjectByDomainConstructorType) Constructs a Domain factory, using an instance of the Selector Factory and a map of Apex classes implementing fflib_ISObjectDomain by SObjectType Note this will not check the Apex classes provided actually implement the interfaces since this is not possible in the Apex runtime at present Signature public DomainFactory(fflib_Application.SelectorFactory selectorFactory,\t\t\tMap<SObjectType, Type> sObjectByDomainConstructorType) Parameters selectorFactory, e.g. Application.Selector sObjectByDomainConstructorType Type: Type> Map of Apex classes by SObjectType fflib_Application.DomainFactory Methods getConstructorTypeByObject(constructorTypeBySObjectType) newInstance(recordIds) Dynamically constructs an instance of a Domain class for the given record Ids Internally uses the Selector Factory to query the records before passing to a dynamically constructed instance of the application Apex Domain class newInstance(records) Dynamically constructs an instance of the Domain class for the given records Will return a Mock implementation if one has been provided via setMock newInstance(objects, objectType) newInstance(records, domainSObjectType) Dynamically constructs an instance of the Domain class for the given records and SObjectType Will return a Mock implementation if one has been provided via setMock @remark Will support List<SObject> but all records in the list will be assumed to be of the type specified in sObjectType setMock(mockDomain) setMock(mockDomain) getConstructorTypeByObject(constructorTypeBySObjectType) Signature protected virtual Map<Object, Type> getConstructorTypeByObject(Map<SObjectType, Type> constructorTypeBySObjectType) newInstance(recordIds) Dynamically constructs an instance of a Domain class for the given record Ids Internally uses the Selector Factory to query the records before passing to a dynamically constructed instance of the application Apex Domain class Signature public virtual fflib_IDomain newInstance(Set<Id> recordIds) Parameters recordIds Type: Set<Id> A list of Id's of the same type Exceptions Throws an exception via the Selector Factory if the Ids are not all of the same SObjectType newInstance(records) Dynamically constructs an instance of the Domain class for the given records Will return a Mock implementation if one has been provided via setMock Signature public virtual fflib_IDomain newInstance(List<SObject> records) Parameters records Type: List<SObject> A concrete list(e.g. List<Account> vs List<SObject>) of records Exceptions Throws an exception if the SObjectType cannot be determined from the list or the constructor for Domain class was not registered for the SObjectType newInstance(objects, objectType) Signature public virtual fflib_IDomain newInstance(List<Object> objects, Object objectType) newInstance(records, domainSObjectType) Dynamically constructs an instance of the Domain class for the given records and SObjectType Will return a Mock implementation if one has been provided via setMock @remark Will support List<SObject> but all records in the list will be assumed to be of the type specified in sObjectType Signature public virtual fflib_IDomain newInstance(List<SObject> records, SObjectType domainSObjectType) Parameters records Type: List<SObject> A list records domainSObjectType Type: SObjectType SObjectType for list of records Exceptions Throws an exception if the SObjectType is not specified or if constructor for Domain class was not registered for the SObjectType setMock(mockDomain) Signature @TestVisible protected virtual void setMock(fflib_ISObjectDomain mockDomain) setMock(mockDomain) Signature @TestVisible protected virtual void setMock(fflib_IDomain mockDomain) fflib_Application.SelectorFactory Class implements a Selector class factory Signature public virtual class SelectorFactory implements fflib_ISelectorFactory fflib_Application.SelectorFactory Properties Name Signature m_sObjectByMockSelector protected Map<SObjectType, fflib_ISObjectSelector> m_sObjectByMockSelector m_sObjectBySelectorType protected Map<SObjectType, Type> m_sObjectBySelectorType fflib_Application.SelectorFactory Constructors SelectorFactory() Constructs a simple Selector Factory SelectorFactory(sObjectBySelectorType) Consturcts a Selector Factory linking SObjectType's with Apex Classes implement the fflib_ISObjectSelector interface Note that the factory does not check the given Apex Classes implement the interface currently this is not possible in Apex. SelectorFactory() Constructs a simple Selector Factory Signature public SelectorFactory() SelectorFactory(sObjectBySelectorType) Consturcts a Selector Factory linking SObjectType's with Apex Classes implement the fflib_ISObjectSelector interface Note that the factory does not check the given Apex Classes implement the interface currently this is not possible in Apex. Signature public SelectorFactory(Map<SObjectType, Type> sObjectBySelectorType) Parameters sObjectBySelectorType Type: Map<SObjectType, Type> Map of SObjectType's to Selector Apex Classes fflib_Application.SelectorFactory Methods newInstance(sObjectType) Creates a new instance of the associated Apex Class implementing fflib_ISObjectSelector for the given SObjectType, or if provided via setMock returns the Mock implementation selectById(recordIds) Helper method to query the given SObject records Internally creates an instance of the registered Selector and calls its selectSObjectById method selectByRelationship(relatedRecords, relationshipField) Helper method to query related records to those provided, for example if passed a list of Opportunity records and the Account Id field will construct internally a list of Account Ids and call the registered Account selector to query the related Account records, e.g. List<Account> accounts =(List<Account>) Application.Selector.selectByRelationship(myOpps, Opportunity.AccountId); setMock(selectorInstance) newInstance(sObjectType) Creates a new instance of the associated Apex Class implementing fflib_ISObjectSelector for the given SObjectType, or if provided via setMock returns the Mock implementation Signature public virtual fflib_ISObjectSelector newInstance(SObjectType sObjectType) Parameters sObjectType Type: SObjectType An SObjectType token, e.g. Account.SObjectType selectById(recordIds) Helper method to query the given SObject records Internally creates an instance of the registered Selector and calls its selectSObjectById method Signature public virtual List<SObject> selectById(Set<Id> recordIds) Parameters recordIds Type: Set<Id> The SObject record Ids, must be all the same SObjectType Exceptions Is thrown if the record Ids are not all the same or the SObjectType is not registered selectByRelationship(relatedRecords, relationshipField) Helper method to query related records to those provided, for example if passed a list of Opportunity records and the Account Id field will construct internally a list of Account Ids and call the registered Account selector to query the related Account records, e.g. List<Account> accounts =(List<Account>) Application.Selector.selectByRelationship(myOpps, Opportunity.AccountId); Signature public virtual List<SObject> selectByRelationship(List<SObject> relatedRecords, SObjectField relationshipField) Parameters relatedRecords Type: List<SObject> used to extract the related record Ids, e.g. Opportunity records relationshipField Type: SObjectField field in the passed records that contains the relationship records to query, e.g. Opportunity.AccountId setMock(selectorInstance) Signature @TestVisible protected virtual void setMock(fflib_ISObjectSelector selectorInstance) fflib_Application.ServiceFactory Simple Service Factory implementation Signature public virtual class ServiceFactory implements fflib_IServiceFactory fflib_Application.ServiceFactory Properties Name Signature m_serviceInterfaceTypeByMockService protected Map<Type, Object> m_serviceInterfaceTypeByMockService m_serviceInterfaceTypeByServiceImplType protected Map<Type, Type> m_serviceInterfaceTypeByServiceImplType fflib_Application.ServiceFactory Constructors ServiceFactory() Constructs a simple Service Factory ServiceFactory(serviceInterfaceTypeByServiceImplType) Constructs a simple Service Factory, using a Map of Apex Interfaces to Apex Classes implementing the interface Note that this will not check the Apex Classes given actually implement the interfaces as this information is not presently available via the Apex runtime ServiceFactory() Constructs a simple Service Factory Signature public ServiceFactory() ServiceFactory(serviceInterfaceTypeByServiceImplType) Constructs a simple Service Factory, using a Map of Apex Interfaces to Apex Classes implementing the interface Note that this will not check the Apex Classes given actually implement the interfaces as this information is not presently available via the Apex runtime Signature public ServiceFactory(Map<Type, Type> serviceInterfaceTypeByServiceImplType) Parameters serviceInterfaceTypeByServiceImplType Type: Map<Type, Type> Map ofi interfaces to classes fflib_Application.ServiceFactory Methods newInstance(serviceInterfaceType) Returns a new instance of the Apex class associated with the given Apex interface Will return any mock implementation of the interface provided via setMock Note that this method will not check the configured Apex class actually implements the interface setMock(serviceInterfaceType, serviceImpl) newInstance(serviceInterfaceType) Returns a new instance of the Apex class associated with the given Apex interface Will return any mock implementation of the interface provided via setMock Note that this method will not check the configured Apex class actually implements the interface Signature public virtual Object newInstance(Type serviceInterfaceType) Parameters serviceInterfaceType Type: Type Apex interface type Exceptions Is thrown if there is no registered Apex class for the interface type setMock(serviceInterfaceType, serviceImpl) Signature @TestVisible protected virtual void setMock(Type serviceInterfaceType, Object serviceImpl) fflib_Application.UnitOfWorkFactory Class implements a Unit of Work factory Signature public virtual class UnitOfWorkFactory implements fflib_IUnitOfWorkFactory fflib_Application.UnitOfWorkFactory Properties Name Signature m_mockUow protected fflib_ISObjectUnitOfWork m_mockUow m_objectTypes protected List<SObjectType> m_objectTypes fflib_Application.UnitOfWorkFactory Constructors UnitOfWorkFactory() Constructs a Unit Of Work factory UnitOfWorkFactory(objectTypes) Constructs a Unit Of Work factory UnitOfWorkFactory() Constructs a Unit Of Work factory Signature public UnitOfWorkFactory() UnitOfWorkFactory(objectTypes) Constructs a Unit Of Work factory Signature public UnitOfWorkFactory(List<SObjectType> objectTypes) Parameters objectTypes Type: List<SObjectType> List of SObjectTypes in dependency order fflib_Application.UnitOfWorkFactory Methods newInstance() Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list provided in the constructor, returns a Mock implementation if set via the setMock method newInstance(dml) Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list provided in the constructor, returns a Mock implementation if set via the setMock method newInstance(objectTypes) Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list specified, returns a Mock implementation if set via the setMock method @remark If mock is set, the list of SObjectType in the mock could be different then the list of SObjectType specified in this method call newInstance(objectTypes, dml) Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list specified, returns a Mock implementation if set via the setMock method @remark If mock is set, the list of SObjectType in the mock could be different then the list of SObjectType specified in this method call setMock(mockUow) newInstance() Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list provided in the constructor, returns a Mock implementation if set via the setMock method Signature public virtual fflib_ISObjectUnitOfWork newInstance() newInstance(dml) Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list provided in the constructor, returns a Mock implementation if set via the setMock method Signature public virtual fflib_ISObjectUnitOfWork newInstance(fflib_SObjectUnitOfWork.IDML dml) newInstance(objectTypes) Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list specified, returns a Mock implementation if set via the setMock method @remark If mock is set, the list of SObjectType in the mock could be different then the list of SObjectType specified in this method call Signature public virtual fflib_ISObjectUnitOfWork newInstance(List<SObjectType> objectTypes) newInstance(objectTypes, dml) Returns a new fflib_SObjectUnitOfWork configured with the SObjectType list specified, returns a Mock implementation if set via the setMock method @remark If mock is set, the list of SObjectType in the mock could be different then the list of SObjectType specified in this method call Signature public virtual fflib_ISObjectUnitOfWork newInstance(List<SObjectType> objectTypes, fflib_SObjectUnitOfWork.IDML dml) setMock(mockUow) Signature @TestVisible protected virtual void setMock(fflib_ISObjectUnitOfWork mockUow)"
    },
    {
        "title": "fflib_ApplicationTest",
        "fileName": "fflib_ApplicationTest.html",
        "text": "fflib_ApplicationTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @IsTest private class fflib_ApplicationTest fflib_ApplicationTest Properties Name Signature Domain public static final fflib_Application.DomainFactory Domain Selector public static final fflib_Application.SelectorFactory Selector Service public static final fflib_Application.ServiceFactory Service UnitOfWork public static final fflib_Application.UnitOfWorkFactory UnitOfWork fflib_ApplicationTest Methods callingDomainFactoryShouldGiveRegisteredImplsAndMocks() callingDomainFactoryWithContructorClassThatDoesNotSupportIConstructableShouldGiveException() callingDomainFactoryWithGenericListShouldGiveException() callingDomainFactoryWithIdsShouldGiveRegisteredImpls() callingDomainFactoryWithInAccessableConstructorShouldGiveException() callingDomainFactoryWithNoSObjectTypeShouldGiveException() callingMockedUnitOfWorkWithCustomDML() callingMockedUnitOfWorkWithCustomObjectTypesAndDML() callingSelectorFactorySelectByIdWithEmptyListShouldGiveException() callingSelectorFactorySelectByIdWithMixedIdTypeListShouldGiveException() callingSelectorFactoryShouldGiveRegisteredImpls() callingSelectoryFactorySelectByIdShouldReturnResults() callingSelectoryFactorySselectByRelationshipPassRelatedIds() callingServiceFactoryShouldGiveRegisteredImplsAndMockImpls() callingUnitOfWorkFactoryShouldGivenStandardImplsAndMockImpls() callingUnitOfWorkFactoryWithCustomTypesShouldGivenStandardImplsAndMockImpls() callingUnitOfWorkWithCustomDML() callingUnitOfWorkWithCustomObjectTypesAndDML() getFirstSObject(domainObjectAcct) callingDomainFactoryShouldGiveRegisteredImplsAndMocks() Signature @IsTest private static void callingDomainFactoryShouldGiveRegisteredImplsAndMocks() callingDomainFactoryWithContructorClassThatDoesNotSupportIConstructableShouldGiveException() Signature @IsTest private static void callingDomainFactoryWithContructorClassThatDoesNotSupportIConstructableShouldGiveException() callingDomainFactoryWithGenericListShouldGiveException() Signature @IsTest private static void callingDomainFactoryWithGenericListShouldGiveException() callingDomainFactoryWithIdsShouldGiveRegisteredImpls() Signature @IsTest private static void callingDomainFactoryWithIdsShouldGiveRegisteredImpls() callingDomainFactoryWithInAccessableConstructorShouldGiveException() Signature @IsTest private static void callingDomainFactoryWithInAccessableConstructorShouldGiveException() callingDomainFactoryWithNoSObjectTypeShouldGiveException() Signature @IsTest private static void callingDomainFactoryWithNoSObjectTypeShouldGiveException() callingMockedUnitOfWorkWithCustomDML() Signature @IsTest private static void callingMockedUnitOfWorkWithCustomDML() callingMockedUnitOfWorkWithCustomObjectTypesAndDML() Signature @IsTest private static void callingMockedUnitOfWorkWithCustomObjectTypesAndDML() callingSelectorFactorySelectByIdWithEmptyListShouldGiveException() Signature @IsTest private static void callingSelectorFactorySelectByIdWithEmptyListShouldGiveException() callingSelectorFactorySelectByIdWithMixedIdTypeListShouldGiveException() Signature @IsTest private static void callingSelectorFactorySelectByIdWithMixedIdTypeListShouldGiveException() callingSelectorFactoryShouldGiveRegisteredImpls() Signature @IsTest private static void callingSelectorFactoryShouldGiveRegisteredImpls() callingSelectoryFactorySelectByIdShouldReturnResults() Signature @IsTest private static void callingSelectoryFactorySelectByIdShouldReturnResults() callingSelectoryFactorySselectByRelationshipPassRelatedIds() Signature @IsTest private static void callingSelectoryFactorySselectByRelationshipPassRelatedIds() callingServiceFactoryShouldGiveRegisteredImplsAndMockImpls() Signature @IsTest private static void callingServiceFactoryShouldGiveRegisteredImplsAndMockImpls() callingUnitOfWorkFactoryShouldGivenStandardImplsAndMockImpls() Signature @IsTest private static void callingUnitOfWorkFactoryShouldGivenStandardImplsAndMockImpls() callingUnitOfWorkFactoryWithCustomTypesShouldGivenStandardImplsAndMockImpls() Signature @IsTest private static void callingUnitOfWorkFactoryWithCustomTypesShouldGivenStandardImplsAndMockImpls() callingUnitOfWorkWithCustomDML() Signature @IsTest private static void callingUnitOfWorkWithCustomDML() callingUnitOfWorkWithCustomObjectTypesAndDML() Signature @IsTest private static void callingUnitOfWorkWithCustomObjectTypesAndDML() getFirstSObject(domainObjectAcct) Signature private static SObject getFirstSObject(fflib_IDomain domainObjectAcct) fflib_ApplicationTest.AccountsConstructor Signature public class AccountsConstructor implements fflib_SObjectDomain.IConstructable2 fflib_ApplicationTest.AccountsConstructor Methods construct(sObjectList) construct(sObjectList, sObjectType) construct(sObjectList) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList) construct(sObjectList, sObjectType) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList, SObjectType sObjectType) fflib_ApplicationTest.AccountsDomain Signature public class AccountsDomain extends fflib_SObjectDomain fflib_ApplicationTest.AccountsDomain Constructors AccountsDomain(sObjectList) AccountsDomain(sObjectList, sObjectType) AccountsDomain(sObjectList) Signature public AccountsDomain(List<Account> sObjectList) AccountsDomain(sObjectList, sObjectType) Signature public AccountsDomain(List<SObject> sObjectList, SObjectType sObjectType) fflib_ApplicationTest.AccountsSelector Signature class AccountsSelector extends fflib_SObjectSelector fflib_ApplicationTest.AccountsSelector Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() fflib_ApplicationTest.AccountsServiceImpl Signature public class AccountsServiceImpl implements IAccountService fflib_ApplicationTest.AccountsServiceMock Signature public class AccountsServiceMock implements IAccountService fflib_ApplicationTest.ContactsConstructor Signature public class ContactsConstructor fflib_ApplicationTest.ContactsDomain Signature public class ContactsDomain extends fflib_SObjectDomain fflib_ApplicationTest.ContactsDomain Constructors ContactsDomain(sObjectList) ContactsDomain(sObjectList, sObjectType) ContactsDomain(sObjectList) Signature public ContactsDomain(List<Opportunity> sObjectList) ContactsDomain(sObjectList, sObjectType) Signature public ContactsDomain(List<SObject> sObjectList, SObjectType sObjectType) fflib_ApplicationTest.CustomDML Signature public class CustomDML implements fflib_SObjectUnitOfWork.IDML fflib_ApplicationTest.CustomDML Properties Name Signature isDeleteCalled public boolean isDeleteCalled isEmptyRecycleBinCalled public Boolean isEmptyRecycleBinCalled isInsertCalled public boolean isInsertCalled isPublishCalled public boolean isPublishCalled isUpdateCalled public boolean isUpdateCalled fflib_ApplicationTest.CustomDML Methods dmlDelete(objList) dmlInsert(objList) dmlUpdate(objList) emptyRecycleBin(objList) eventPublish(objList) dmlDelete(objList) Signature public void dmlDelete(List<SObject> objList) dmlInsert(objList) Signature public void dmlInsert(List<SObject> objList) dmlUpdate(objList) Signature public void dmlUpdate(List<SObject> objList) emptyRecycleBin(objList) Signature public void emptyRecycleBin(List<SObject> objList) eventPublish(objList) Signature public void eventPublish(List<SObject> objList) fflib_ApplicationTest.IAccountService Signature public interface IAccountService fflib_ApplicationTest.IContactService Signature public interface IContactService fflib_ApplicationTest.IOpportunitiesService Signature public interface IOpportunitiesService fflib_ApplicationTest.OpportunitiesServiceImpl Signature public class OpportunitiesServiceImpl implements IOpportunitiesService fflib_ApplicationTest.OpportuntiesConstructor Signature public class OpportuntiesConstructor implements fflib_SObjectDomain.IConstructable2 fflib_ApplicationTest.OpportuntiesConstructor Methods construct(sObjectList) construct(sObjectList, sObjectType) construct(sObjectList) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList) construct(sObjectList, sObjectType) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList, SObjectType sObjectType) fflib_ApplicationTest.OpportuntiesDomain Signature public class OpportuntiesDomain extends fflib_SObjectDomain fflib_ApplicationTest.OpportuntiesDomain Constructors OpportuntiesDomain(sObjectList) OpportuntiesDomain(sObjectList, sObjectType) OpportuntiesDomain(sObjectList) Signature public OpportuntiesDomain(List<Opportunity> sObjectList) OpportuntiesDomain(sObjectList, sObjectType) Signature public OpportuntiesDomain(List<SObject> sObjectList, SObjectType sObjectType) fflib_ApplicationTest.OpportuntiesSelector Signature class OpportuntiesSelector extends fflib_SObjectSelector fflib_ApplicationTest.OpportuntiesSelector Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType()"
    },
    {
        "title": "fflib_ArgumentCaptor",
        "fileName": "fflib_ArgumentCaptor.html",
        "text": "fflib_ArgumentCaptor This class implements the capturing framework for ApexMocks According to Mockito's syntax the type is passed in the capturer construction, however Apex cannot perform the auto casting that Java can. To be consistent with Mockito, the capturer does not perform any checks on the type of the argument. Signature public with sharing class fflib_ArgumentCaptor fflib_ArgumentCaptor Properties Name Signature argumentsCaptured protected List<Object> argumentsCaptured fflib_ArgumentCaptor Constructors fflib_ArgumentCaptor() fflib_ArgumentCaptor() Signature return new fflib_ArgumentCaptor() fflib_ArgumentCaptor Methods capture() Use it to capture the argument. This method must be used inside verification. Internally, this method registers a special implementation of a Matcher. This argument matcher stores the argument value so that you can use it later to perform assertions. forClass(ignoredCaptureType) Factory method to create a new fflib_ArgumentCaptor. Takes the captured argument's Type for consistency with Mockito syntax. The Type is IGNORED because we can't determine an object instance's Type at runtime unlike in Java. Rigorous type checking may be introduced in a future release, so you should specify the expected argument type correctly. getAllValues() Returns all captured values. Use it when capturing multiple arguments or when the verified method was called multiple times. When capturing multiple arguments is called multiple times, this method returns a merged list of all values from all invocations. @return\tReturns all captured values. Use it when capturing multiple arguments on the same call or when the verified method was called multiple times. getValue() Returns the captured value of the argument. When capturing all arguments use getAllValues(). If verified method was called multiple times then this method returns the latest captured value. @return\tcaptured argument value. capture() Use it to capture the argument. This method must be used inside verification. Internally, this method registers a special implementation of a Matcher. This argument matcher stores the argument value so that you can use it later to perform assertions. Signature public Object capture() Returns a special matcher that matches any argument and remembers the value. forClass(ignoredCaptureType) Factory method to create a new fflib_ArgumentCaptor. Takes the captured argument's Type for consistency with Mockito syntax. The Type is IGNORED because we can't determine an object instance's Type at runtime unlike in Java. Rigorous type checking may be introduced in a future release, so you should specify the expected argument type correctly. Signature public static fflib_ArgumentCaptor forClass(Type ignoredCaptureType) Parameters ignoredCaptureType Type: Type Type(class) of the captured argument Returns A new fflib_ArgumentCaptor. getAllValues() Returns all captured values. Use it when capturing multiple arguments or when the verified method was called multiple times. When capturing multiple arguments is called multiple times, this method returns a merged list of all values from all invocations. @return\tReturns all captured values. Use it when capturing multiple arguments on the same call or when the verified method was called multiple times. Signature public List<Object> getAllValues() getValue() Returns the captured value of the argument. When capturing all arguments use getAllValues(). If verified method was called multiple times then this method returns the latest captured value. @return\tcaptured argument value. Signature public Object getValue() fflib_ArgumentCaptor.AnyObject Signature public class AnyObject implements fflib_IMatcher fflib_ArgumentCaptor.AnyObject Properties Name Signature captor private fflib_ArgumentCaptor captor value private Object value fflib_ArgumentCaptor.AnyObject Constructors AnyObject(captor) AnyObject(captor) Signature public AnyObject(fflib_ArgumentCaptor captor) fflib_ArgumentCaptor.AnyObject Methods matches(arg) storeArgument() matches(arg) Signature public Boolean matches(Object arg) storeArgument() Signature public void storeArgument()"
    },
    {
        "title": "fflib_ArgumentCaptorTest",
        "fileName": "fflib_ArgumentCaptorTest.html",
        "text": "fflib_ArgumentCaptorTest @nodoc Signature @isTest private class fflib_ArgumentCaptorTest fflib_ArgumentCaptorTest Methods thatArgumentValueIsCaptured() thatArgumentValueIsCapturedWithInOrderVerification() thatCanHandleMultipleCapturesInOneMethodCall() thatCanHandleMultipleCapturesInOneMethodCallWithInOrderVerification() thatCanPerformFurtherAssertionsOnCapturedArgumentValue() thatCanPerformFurtherAssertionsOnCapturedArgumentValueWithInOrderVerification() thatCaptureAllArguments() thatCaptureAllArgumentsForTheVerifiedMethods() thatCaptureAllArgumentsForTheVerifiedMethodsWithInOrderVerification() thatCaptureAllArgumentsFromMultipleMethods() thatCaptureAllArgumentsFromMultipleMethodsWithInOrderVerification() thatCaptureAllArgumentswhenMethodIsCalledWithTheSameArgument() thatCaptureAllArgumentsWithInOrderVerification() thatCaptureArgumentFromRequestedParameter() thatCaptureArgumentFromRequestedParameterWithInOrderVerification() thatCaptureArgumentOnlyFromVerifiedMethod() thatCaptureArgumentOnlyFromVerifiedMethodWithInOrderVerification() thatCaptureLastArgument() thatCaptureLastArgumentWithInOrderVerification() thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWell() thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWellWithInOrderVerification() thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcher() thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcherWithInOrderVerification() thatDoesNotCaptureIfNotVerified() thatDoesNotCaptureIfNotVerifiedWithInOrderVerification() thatArgumentValueIsCaptured() Signature @isTest static void thatArgumentValueIsCaptured() thatArgumentValueIsCapturedWithInOrderVerification() Signature @isTest static void thatArgumentValueIsCapturedWithInOrderVerification() thatCanHandleMultipleCapturesInOneMethodCall() Signature @isTest static void thatCanHandleMultipleCapturesInOneMethodCall() thatCanHandleMultipleCapturesInOneMethodCallWithInOrderVerification() Signature @isTest static void thatCanHandleMultipleCapturesInOneMethodCallWithInOrderVerification() thatCanPerformFurtherAssertionsOnCapturedArgumentValue() Signature @isTest static void thatCanPerformFurtherAssertionsOnCapturedArgumentValue() thatCanPerformFurtherAssertionsOnCapturedArgumentValueWithInOrderVerification() Signature @isTest static void thatCanPerformFurtherAssertionsOnCapturedArgumentValueWithInOrderVerification() thatCaptureAllArguments() Signature @isTest static void thatCaptureAllArguments() thatCaptureAllArgumentsForTheVerifiedMethods() Signature @isTest static void thatCaptureAllArgumentsForTheVerifiedMethods() thatCaptureAllArgumentsForTheVerifiedMethodsWithInOrderVerification() Signature @isTest static void thatCaptureAllArgumentsForTheVerifiedMethodsWithInOrderVerification() thatCaptureAllArgumentsFromMultipleMethods() Signature @isTest static void thatCaptureAllArgumentsFromMultipleMethods() thatCaptureAllArgumentsFromMultipleMethodsWithInOrderVerification() Signature @isTest static void thatCaptureAllArgumentsFromMultipleMethodsWithInOrderVerification() thatCaptureAllArgumentswhenMethodIsCalledWithTheSameArgument() Signature @isTest static void thatCaptureAllArgumentswhenMethodIsCalledWithTheSameArgument() thatCaptureAllArgumentsWithInOrderVerification() Signature @isTest static void thatCaptureAllArgumentsWithInOrderVerification() thatCaptureArgumentFromRequestedParameter() Signature @isTest static void thatCaptureArgumentFromRequestedParameter() thatCaptureArgumentFromRequestedParameterWithInOrderVerification() Signature @isTest static void thatCaptureArgumentFromRequestedParameterWithInOrderVerification() thatCaptureArgumentOnlyFromVerifiedMethod() Signature @isTest static void thatCaptureArgumentOnlyFromVerifiedMethod() thatCaptureArgumentOnlyFromVerifiedMethodWithInOrderVerification() Signature @isTest static void thatCaptureArgumentOnlyFromVerifiedMethodWithInOrderVerification() thatCaptureLastArgument() Signature @isTest static void thatCaptureLastArgument() thatCaptureLastArgumentWithInOrderVerification() Signature @isTest static void thatCaptureLastArgumentWithInOrderVerification() thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWell() Signature @isTest static void thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWell() thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWellWithInOrderVerification() Signature @isTest static void thatCaptureOnlyMethodsThatMatchesWithOtherMatcherAsWellWithInOrderVerification() thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcher() Signature @isTest static void thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcher() thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcherWithInOrderVerification() Signature @isTest static void thatDoesNotCaptureAnythingWhenCaptorIsWrappedInAMatcherWithInOrderVerification() thatDoesNotCaptureIfNotVerified() Signature @isTest static void thatDoesNotCaptureIfNotVerified() thatDoesNotCaptureIfNotVerifiedWithInOrderVerification() Signature @isTest static void thatDoesNotCaptureIfNotVerifiedWithInOrderVerification() fflib_ArgumentCaptorTest.TestInnerClass Signature private class TestInnerClass fflib_ArgumentCaptorTest.TestInnerClass Properties Name Signature i public Integer i s public String s"
    },
    {
        "title": "fflib_IDGenerator",
        "fileName": "fflib_IDGenerator.html",
        "text": "fflib_IDGenerator Copyright(c) 2014, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public with sharing class fflib_IDGenerator fflib_IDGenerator Properties Name Signature fakeIdCount private static Integer fakeIdCount ID_PATTERN private static final String ID_PATTERN fflib_IDGenerator Methods generate(sobjectType) Generate a fake Salesforce Id for the given SObjectType generate(sobjectType) Generate a fake Salesforce Id for the given SObjectType Signature public static Id generate(Schema.SObjectType sobjectType)"
    },
    {
        "title": "fflib_IDGeneratorTest",
        "fileName": "fflib_IDGeneratorTest.html",
        "text": "fflib_IDGeneratorTest Copyright(c) 2014, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest private class fflib_IDGeneratorTest fflib_IDGeneratorTest Methods itShouldGenerateValidIDs() itShouldGenerateValidIDs() Signature @isTest static void itShouldGenerateValidIDs()"
    },
    {
        "title": "fflib_IDomain",
        "fileName": "fflib_IDomain.html",
        "text": "fflib_IDomain Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_IDomain fflib_IDomain Methods getObjects() getType() getObjects() Signature List<Object> getObjects() getType() Signature Object getType()"
    },
    {
        "title": "fflib_IDomainConstructor",
        "fileName": "fflib_IDomainConstructor.html",
        "text": "fflib_IDomainConstructor Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_IDomainConstructor fflib_IDomainConstructor Methods construct(objects) construct(objects) Signature fflib_IDomain construct(List<Object> objects)"
    },
    {
        "title": "fflib_IDomainFactory",
        "fileName": "fflib_IDomainFactory.html",
        "text": "fflib_IDomainFactory Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_IDomainFactory fflib_IDomainFactory Methods newInstance(recordIds) newInstance(records) newInstance(objects, objectType) newInstance(records, domainSObjectType) newInstance(recordIds) Signature fflib_IDomain newInstance(Set<Id> recordIds) newInstance(records) Signature fflib_IDomain newInstance(List<SObject> records) newInstance(objects, objectType) Signature fflib_IDomain newInstance(List<Object> objects, Object objectType) newInstance(records, domainSObjectType) Signature fflib_IDomain newInstance(List<SObject> records, SObjectType domainSObjectType)"
    },
    {
        "title": "fflib_IMatcher",
        "fileName": "fflib_IMatcher.html",
        "text": "fflib_IMatcher Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_IMatcher fflib_IMatcher Methods matches(arg) Whether or not the supplied argument is a match. Any supplementary information(e.g. boundary conditions, objects to match to etc) should be cached by the matcher constructor. matches(arg) Whether or not the supplied argument is a match. Any supplementary information(e.g. boundary conditions, objects to match to etc) should be cached by the matcher constructor. Signature Boolean matches(Object arg) Parameters arg Type: Object The argument value supplied to the method Returns Boolean True if the argument value is a match, false otherwise."
    },
    {
        "title": "fflib_Inheritor",
        "fileName": "fflib_Inheritor.html",
        "text": "fflib_Inheritor Signature @isTest public class fflib_Inheritor implements IA, IB, IC fflib_Inheritor Methods doA() doB() doC() doA() Signature public String doA() doB() Signature public String doB() doC() Signature public String doC() fflib_Inheritor.IA Signature public interface IA fflib_Inheritor.IB Signature public interface IB fflib_Inheritor.IC Signature public interface IC"
    },
    {
        "title": "fflib_InheritorTest",
        "fileName": "fflib_InheritorTest.html",
        "text": "fflib_InheritorTest Signature @isTest public class fflib_InheritorTest fflib_InheritorTest Methods canInstantiateMultipleInterfaceInheritor() canStubMultipleInterfaceInheritor() canInstantiateMultipleInterfaceInheritor() Signature @isTest public static void canInstantiateMultipleInterfaceInheritor() canStubMultipleInterfaceInheritor() Signature @isTest public static void canStubMultipleInterfaceInheritor()"
    },
    {
        "title": "fflib_InOrder",
        "fileName": "fflib_InOrder.html",
        "text": "fflib_InOrder Signature public with sharing class fflib_InOrder extends fflib_MethodVerifier fflib_InOrder Properties Name Signature idxMethodCall private Integer idxMethodCall mocks private final fflib_ApexMocks mocks notImplementedMethods private Set<fflib_VerificationMode.ModeName> notImplementedMethods unorderedMockInstances private final List<Object> unorderedMockInstances fflib_InOrder Constructors fflib_InOrder(mocks, unorderedMockInstances) Construct the InOrder instance. fflib_InOrder(mocks, unorderedMockInstances) Construct the InOrder instance. Signature public fflib_InOrder(fflib_ApexMocks mocks, List<Object> unorderedMockInstances) Parameters mocks Type: fflib_ApexMocks The apex mock object instance. unorderedMockInstances Type: List<Object> One or more mock implementation classes(listed in any order), whose ordered method calls require verification. fflib_InOrder Methods argumentsMatch(calledMethodArg, matchers, methodArg) consumeInteractions(matchers, qualifiedMethod, methodArg) countInteractions(matchers, qualifiedMethod, methodArg) getNextMethodCall() getNextMethodCall(updateIdxMethodCall) hasNextInteraction(mockInstances, idxLastMethodCalled) isForMockInstance(invocation) validateMode(verificationMode) verify(mockInstance, verificationMode) Verify a method was called on a mock object. It performs a no strict ordered verification. The verification could be either greedy or not depending of the verificationMode passed. Check the fflib_VerificationMode methods for details. verify(mockInstance) Verify a method was called on a mock object. It performs the default times(1) verification for the InOrder. verify(mockInstance, times) Verify a method was called on a mock object. Wrapper for the new syntax call to be conformed to the old style notation It performs the equivalent of times(times) verification for the InOrder. verify(qm, expectedArguments, verificationMode) verifyMethodCalled(matchers, qm, methodArg) verifyNoInteractions() Verify that no interactions at all happened on the inOrderMock instance. @throws Exception with message. verifyNoMoreInteractions() Verify that after the last successful verified method no more interactions happened on the inOrderMock instance. @throws Exception with message to help to identify the last method called. argumentsMatch(calledMethodArg, matchers, methodArg) Signature private Boolean argumentsMatch(\t\tfflib_MethodArgValues calledMethodArg,\t\tList<fflib_IMatcher> matchers,\t\tfflib_MethodArgValues methodArg) consumeInteractions(matchers, qualifiedMethod, methodArg) Signature private void consumeInteractions(\t\tList<fflib_IMatcher> matchers,\t\tfflib_QualifiedMethod qualifiedMethod,\t\tfflib_MethodArgValues methodArg) countInteractions(matchers, qualifiedMethod, methodArg) Signature private Integer countInteractions(\t\tList<fflib_IMatcher> matchers,\t\tfflib_QualifiedMethod qualifiedMethod,\t\tfflib_MethodArgValues methodArg) getNextMethodCall() Signature private fflib_InvocationOnMock getNextMethodCall() getNextMethodCall(updateIdxMethodCall) Signature private fflib_InvocationOnMock getNextMethodCall(Boolean updateIdxMethodCall) hasNextInteraction(mockInstances, idxLastMethodCalled) Signature private Boolean hasNextInteraction(List<Object> mockInstances, Integer idxLastMethodCalled) isForMockInstance(invocation) Signature private Boolean isForMockInstance(fflib_InvocationOnMock invocation) validateMode(verificationMode) Signature protected override void validateMode(fflib_VerificationMode verificationMode) verify(mockInstance, verificationMode) Verify a method was called on a mock object. It performs a no strict ordered verification. The verification could be either greedy or not depending of the verificationMode passed. Check the fflib_VerificationMode methods for details. Signature public Object verify(Object mockInstance, fflib_VerificationMode verificationMode) Parameters mockInstance Type: Object The mock object instance. verificationMode Type: fflib_VerificationMode Defines the constraints for performing the verification(e.g. the minimum and maximum expected invocation counts). Returns The mock object instance. verify(mockInstance) Verify a method was called on a mock object. It performs the default times(1) verification for the InOrder. Signature public Object verify(Object mockInstance) Parameters mockInstance Type: Object The mock object instance. Returns The mock object instance. verify(mockInstance, times) Verify a method was called on a mock object. Wrapper for the new syntax call to be conformed to the old style notation It performs the equivalent of times(times) verification for the InOrder. Signature public Object verify(Object mockInstance, Integer times) Parameters mockInstance Type: Object The mock object instance. times Type: Integer The number of times you expect the method to have been called. Returns The mock object instance. verify(qm, expectedArguments, verificationMode) Signature protected override void verify(\t\tfflib_QualifiedMethod qm,\t\tfflib_MethodArgValues expectedArguments,\t\tfflib_VerificationMode verificationMode) verifyMethodCalled(matchers, qm, methodArg) Signature private Boolean verifyMethodCalled(\t\tList<fflib_IMatcher> matchers,\t\tfflib_QualifiedMethod qm,\t\tfflib_MethodArgValues methodArg) verifyNoInteractions() Verify that no interactions at all happened on the inOrderMock instance. @throws Exception with message. Signature public void verifyNoInteractions() verifyNoMoreInteractions() Verify that after the last successful verified method no more interactions happened on the inOrderMock instance. @throws Exception with message to help to identify the last method called. Signature public void verifyNoMoreInteractions()"
    },
    {
        "title": "fflib_InOrderTest",
        "fileName": "fflib_InOrderTest.html",
        "text": "fflib_InOrderTest Signature @isTest private class fflib_InOrderTest fflib_InOrderTest Properties Name Signature MY_MOCKS private static fflib_ApexMocks MY_MOCKS fflib_InOrderTest Methods thatMixedVerificationDoNotInterfierWithOtherImplementationChecking() thatStrictVerificationCanBeEnforced() thatStrictVerificationCanBeEnforcedWithOldNotation() thatStrictVerificationCanBeEnforcedWithOldNotationUsingDefaultTimesOne() thatStrictVerificationCanBePerformed() thatTimesOneIsTheDefaultVerification() thatVerifyAtLeastConsumeAllTheInstances() thatVerifyAtLeastConsumeAllTheInstancesForOnlyTheMethodVerified() thatVerifyAtLeastConsumesAllTheInstances2() thatVerifyAtLeastOnce() thatVerifyAtLeastOnceConsumesAllTheInstances() thatVerifyAtLeastOnceConsumesInstancesUntilLastMethodVerified() thatVerifyAtLeastOnceThrowsErrorIfCalledLessTimes() thatVerifyAtLeastPassWithMoreCallsThenAsserted() thatVerifyAtLeastPassWithSameCallsOfAssertion() thatVerifyAtLeastThrowsErrorIfCalledLessTimes() thatVerifyAtMostThrowsExceptionBecauseNotImplemented() thatVerifyBetweenThrowsExceptionBecauseNotImplemented() thatVerifyInOrderAllTheMethodsCalled() thatVerifyInOrderCallMethodWithMatches() thatVerifyInOrderCallMethodWithMatchesFailsIfVerifyACallAlreadyInTheMatcher() thatVerifyInOrderCallMethodWithMultipleMatches() thatVerifyInOrderCallMethodWithMultipleMatchesMixed() thatVerifyInOrderCallMethodWithMultipleMatchesMixedFailWhenMatcherHaveAlreadyVerifiedMethod() thatVerifyInOrderCanHandleMixedInOrderInstance() thatVerifyInOrderCanHandleMultipleMethodsCalls() thatVerifyInOrderCanHandleMultipleMethodsCallsAndNotFailsIfVerifyCountIsGreaterThenExpected() thatVerifyInOrderCanHandleMultipleMethodsCallsButFailsIfVerifyCountIsLessThenExpected() thatVerifyInOrderCanHandleMultipleMocks() thatVerifyInOrderCanSkipMethodsCalledUntilFindTheOneThatNeedsVerify() thatVerifyInOrderDifferentMethodsCalledWithSameArguments() thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsDoubleCallFail() thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsOrderFail() thatVerifyInOrderThrownExceptionIfVerifyMockInstanceNotInTheSet() thatVerifyInOrderThrownExceptionWithCustomMessage() thatVerifyNever() thatVerifyNeverFailsWhenCalled() thatVerifyNeverFailsWhenCalledWithMatchers() thatVerifyNeverWithMatchers() thatVerifyNoInteractionsFails() thatVerifyNoInteractionsPass() thatVerifyNoMoreInteractionsFails() thatVerifyNoMoreInteractionsFailsWhenNoInteracionOccurs() thatVerifyNoMoreInteractionsFailsWhenOnLyOneMethodLeft() thatVerifyNoMoreInteractionsPass() thatVerifyThrowsExceptionWhenCallsIsInvochedFromStandardMock() thatVerifyTimes() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls2() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls3() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls4() thatVerifyTimesThrowsExceptionIfCalledLessTimesThanExpected() thatVerifyTimesThrowsExceptionIfCalledMoreTimesThanExpected() thatVerifyTimesThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() thatWithOldNotation() thatWithOldNotationPassWhenAnotherMethodIsCalledBetweenMethodsCalls() thatWithOldNotationThrowsExceptionIfCalledLessTimesThanExpected() thatWithOldNotationThrowsExceptionIfCalledMoreTimesThanExpected() thatWithOldNotationThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() verifyAtLeastAndCapture() verifyCallsAndCapture() verifyTimesAndCaptor() thatMixedVerificationDoNotInterfierWithOtherImplementationChecking() Signature @isTest static void thatMixedVerificationDoNotInterfierWithOtherImplementationChecking() thatStrictVerificationCanBeEnforced() Signature @isTest static void thatStrictVerificationCanBeEnforced() thatStrictVerificationCanBeEnforcedWithOldNotation() Signature @isTest static void thatStrictVerificationCanBeEnforcedWithOldNotation() thatStrictVerificationCanBeEnforcedWithOldNotationUsingDefaultTimesOne() Signature @isTest static void thatStrictVerificationCanBeEnforcedWithOldNotationUsingDefaultTimesOne() thatStrictVerificationCanBePerformed() Signature @isTest static void thatStrictVerificationCanBePerformed() thatTimesOneIsTheDefaultVerification() Signature @isTest static void thatTimesOneIsTheDefaultVerification() thatVerifyAtLeastConsumeAllTheInstances() Signature @isTest static void thatVerifyAtLeastConsumeAllTheInstances() thatVerifyAtLeastConsumeAllTheInstancesForOnlyTheMethodVerified() Signature @isTest static void thatVerifyAtLeastConsumeAllTheInstancesForOnlyTheMethodVerified() thatVerifyAtLeastConsumesAllTheInstances2() Signature @isTest static void thatVerifyAtLeastConsumesAllTheInstances2() thatVerifyAtLeastOnce() Signature @isTest static void thatVerifyAtLeastOnce() thatVerifyAtLeastOnceConsumesAllTheInstances() Signature @isTest static void thatVerifyAtLeastOnceConsumesAllTheInstances() thatVerifyAtLeastOnceConsumesInstancesUntilLastMethodVerified() Signature @isTest static void thatVerifyAtLeastOnceConsumesInstancesUntilLastMethodVerified() thatVerifyAtLeastOnceThrowsErrorIfCalledLessTimes() Signature @isTest static void thatVerifyAtLeastOnceThrowsErrorIfCalledLessTimes() thatVerifyAtLeastPassWithMoreCallsThenAsserted() Signature @isTest static void thatVerifyAtLeastPassWithMoreCallsThenAsserted() thatVerifyAtLeastPassWithSameCallsOfAssertion() Signature @isTest static void thatVerifyAtLeastPassWithSameCallsOfAssertion() thatVerifyAtLeastThrowsErrorIfCalledLessTimes() Signature @isTest static void thatVerifyAtLeastThrowsErrorIfCalledLessTimes() thatVerifyAtMostThrowsExceptionBecauseNotImplemented() Signature @isTest static void thatVerifyAtMostThrowsExceptionBecauseNotImplemented() thatVerifyBetweenThrowsExceptionBecauseNotImplemented() Signature @isTest static void thatVerifyBetweenThrowsExceptionBecauseNotImplemented() thatVerifyInOrderAllTheMethodsCalled() Signature @isTest static void thatVerifyInOrderAllTheMethodsCalled() thatVerifyInOrderCallMethodWithMatches() Signature @isTest static void thatVerifyInOrderCallMethodWithMatches() thatVerifyInOrderCallMethodWithMatchesFailsIfVerifyACallAlreadyInTheMatcher() Signature @isTest static void thatVerifyInOrderCallMethodWithMatchesFailsIfVerifyACallAlreadyInTheMatcher() thatVerifyInOrderCallMethodWithMultipleMatches() Signature @isTest static void thatVerifyInOrderCallMethodWithMultipleMatches() thatVerifyInOrderCallMethodWithMultipleMatchesMixed() Signature @isTest static void thatVerifyInOrderCallMethodWithMultipleMatchesMixed() thatVerifyInOrderCallMethodWithMultipleMatchesMixedFailWhenMatcherHaveAlreadyVerifiedMethod() Signature @isTest static void thatVerifyInOrderCallMethodWithMultipleMatchesMixedFailWhenMatcherHaveAlreadyVerifiedMethod() thatVerifyInOrderCanHandleMixedInOrderInstance() Signature @isTest static void thatVerifyInOrderCanHandleMixedInOrderInstance() thatVerifyInOrderCanHandleMultipleMethodsCalls() Signature @isTest static void thatVerifyInOrderCanHandleMultipleMethodsCalls() thatVerifyInOrderCanHandleMultipleMethodsCallsAndNotFailsIfVerifyCountIsGreaterThenExpected() Signature @isTest static void thatVerifyInOrderCanHandleMultipleMethodsCallsAndNotFailsIfVerifyCountIsGreaterThenExpected() thatVerifyInOrderCanHandleMultipleMethodsCallsButFailsIfVerifyCountIsLessThenExpected() Signature @isTest static void thatVerifyInOrderCanHandleMultipleMethodsCallsButFailsIfVerifyCountIsLessThenExpected() thatVerifyInOrderCanHandleMultipleMocks() Signature @isTest static void thatVerifyInOrderCanHandleMultipleMocks() thatVerifyInOrderCanSkipMethodsCalledUntilFindTheOneThatNeedsVerify() Signature @isTest static void thatVerifyInOrderCanSkipMethodsCalledUntilFindTheOneThatNeedsVerify() thatVerifyInOrderDifferentMethodsCalledWithSameArguments() Signature @isTest static void thatVerifyInOrderDifferentMethodsCalledWithSameArguments() thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsDoubleCallFail() Signature @isTest static void thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsDoubleCallFail() thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsOrderFail() Signature @isTest static void thatVerifyInOrderDifferentMethodsCalledWithSameArgumentsOrderFail() thatVerifyInOrderThrownExceptionIfVerifyMockInstanceNotInTheSet() Signature @isTest static void thatVerifyInOrderThrownExceptionIfVerifyMockInstanceNotInTheSet() thatVerifyInOrderThrownExceptionWithCustomMessage() Signature @isTest static void thatVerifyInOrderThrownExceptionWithCustomMessage() thatVerifyNever() Signature @isTest static void thatVerifyNever() thatVerifyNeverFailsWhenCalled() Signature @isTest static void thatVerifyNeverFailsWhenCalled() thatVerifyNeverFailsWhenCalledWithMatchers() Signature @isTest static void thatVerifyNeverFailsWhenCalledWithMatchers() thatVerifyNeverWithMatchers() Signature @isTest static void thatVerifyNeverWithMatchers() thatVerifyNoInteractionsFails() Signature @isTest static void thatVerifyNoInteractionsFails() thatVerifyNoInteractionsPass() Signature @isTest static void thatVerifyNoInteractionsPass() thatVerifyNoMoreInteractionsFails() Signature @isTest static void thatVerifyNoMoreInteractionsFails() thatVerifyNoMoreInteractionsFailsWhenNoInteracionOccurs() Signature @isTest static void thatVerifyNoMoreInteractionsFailsWhenNoInteracionOccurs() thatVerifyNoMoreInteractionsFailsWhenOnLyOneMethodLeft() Signature @isTest static void thatVerifyNoMoreInteractionsFailsWhenOnLyOneMethodLeft() thatVerifyNoMoreInteractionsPass() Signature @isTest static void thatVerifyNoMoreInteractionsPass() thatVerifyThrowsExceptionWhenCallsIsInvochedFromStandardMock() Signature @isTest static void thatVerifyThrowsExceptionWhenCallsIsInvochedFromStandardMock() thatVerifyTimes() Signature @isTest static void thatVerifyTimes() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls() Signature @isTest static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls2() Signature @isTest static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls2() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls3() Signature @isTest static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls3() thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls4() Signature @isTest static void thatVerifyTimesPassWhenAnotherMethodIsCalledBetweenMethodsCalls4() thatVerifyTimesThrowsExceptionIfCalledLessTimesThanExpected() Signature @isTest static void thatVerifyTimesThrowsExceptionIfCalledLessTimesThanExpected() thatVerifyTimesThrowsExceptionIfCalledMoreTimesThanExpected() Signature @isTest static void thatVerifyTimesThrowsExceptionIfCalledMoreTimesThanExpected() thatVerifyTimesThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() Signature @isTest static void thatVerifyTimesThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() thatWithOldNotation() Signature @isTest static void thatWithOldNotation() thatWithOldNotationPassWhenAnotherMethodIsCalledBetweenMethodsCalls() Signature @isTest static void thatWithOldNotationPassWhenAnotherMethodIsCalledBetweenMethodsCalls() thatWithOldNotationThrowsExceptionIfCalledLessTimesThanExpected() Signature @isTest static void thatWithOldNotationThrowsExceptionIfCalledLessTimesThanExpected() thatWithOldNotationThrowsExceptionIfCalledMoreTimesThanExpected() Signature @isTest static void thatWithOldNotationThrowsExceptionIfCalledMoreTimesThanExpected() thatWithOldNotationThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() Signature @isTest static void thatWithOldNotationThrowsExceptionWhenAnotherMethodIsCalledBetweenMethodsCalls() verifyAtLeastAndCapture() Signature @isTest static void verifyAtLeastAndCapture() verifyCallsAndCapture() Signature @isTest static void verifyCallsAndCapture() verifyTimesAndCaptor() Signature @isTest static void verifyTimesAndCaptor()"
    },
    {
        "title": "fflib_InvocationOnMock",
        "fileName": "fflib_InvocationOnMock.html",
        "text": "fflib_InvocationOnMock An invocation on a mock. A place holder for mock, the method that was called and the arguments that were passed. Signature public with sharing class fflib_InvocationOnMock fflib_InvocationOnMock Properties Name Signature methodArg private fflib_MethodArgValues methodArg mockInstance private Object mockInstance qm private fflib_QualifiedMethod qm fflib_InvocationOnMock Constructors fflib_InvocationOnMock(qm, args, mockInstance) Constructor for the class. fflib_InvocationOnMock(qm, args, mockInstance) Constructor for the class. Signature public fflib_InvocationOnMock(fflib_QualifiedMethod qm, fflib_MethodArgValues args, Object mockInstance) Parameters qm Type: fflib_QualifiedMethod The fflib_QualifiedMethod instance to be stored. args Type: fflib_MethodArgValues The fflib_MethodArgValues instance to be stored. mockInstance Type: Object The mock instance to be stored. fflib_InvocationOnMock Methods getArgument(index) Returns the argument at the given index. getArguments() Returns the list of arguments passed to the method. getMethod() Returns the fflib_QualifiedMethod instance that represent the fully qualified method called within the invocation. getMethodArgValues() Returns fflib_MethodArgValues instance that represents the arguments passed to the method. getMock() Returns the mock object on which the invocation occurs. validateIndex(index) getArgument(index) Returns the argument at the given index. Signature public Object getArgument(Integer index) Parameters index Type: Integer The index of the wanted argument. @throws ApexMocksException in case the index is out of range. Returns The argument at the given index. getArguments() Returns the list of arguments passed to the method. Signature public List<Object> getArguments() Returns The list of arguments. getMethod() Returns the fflib_QualifiedMethod instance that represent the fully qualified method called within the invocation. Signature public fflib_QualifiedMethod getMethod() Returns The method stored in the invocation. getMethodArgValues() Returns fflib_MethodArgValues instance that represents the arguments passed to the method. Signature public fflib_MethodArgValues getMethodArgValues() Returns The fflib_MethodArgValues instance that represents the arguments passed to the method. getMock() Returns the mock object on which the invocation occurs. Signature public Object getMock() Returns The mock object on which the invocation occurs. validateIndex(index) Signature private void validateIndex(Integer index)"
    },
    {
        "title": "fflib_IObjects",
        "fileName": "fflib_IObjects.html",
        "text": "fflib_IObjects Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_IObjects extends fflib_IDomain fflib_IObjects Methods contains(value) containsAll(values) containsAll(values) containsNot(value) containsNot(values) containsNot(values) isEmpty() isNotEmpty() size() contains(value) Signature Boolean contains(Object value) Parameters value Type: Object Values to check if they are part of the domain Returns True if the provided value is part of the domain containsAll(values) Signature Boolean containsAll(List<Object> values) Parameters values Type: List<Object> Values to check if they are part of the domain Returns True if all the provided values are part of the domain containsAll(values) Signature Boolean containsAll(Set<Object> values) Parameters values Type: Set<Object> Values to check if they are part of the domain Returns True if all the provided values are part of the domain containsNot(value) Signature Boolean containsNot(Object value) Parameters value Type: Object Value to check if it is part of the domain Returns True if the provided value is not part of the domain containsNot(values) Signature Boolean containsNot(List<Object> values) Parameters values Type: List<Object> Values to check if they are part of the domain Returns True if all the provided values are not part of the domain containsNot(values) Signature Boolean containsNot(Set<Object> values) Parameters values Type: Set<Object> Values to check if they are part of the domain Returns True if all the provided values are not part of the domain isEmpty() Signature Boolean isEmpty() Returns Returns True is the domain is empty isNotEmpty() Signature Boolean isNotEmpty() Returns Returns True is the domain has objects size() Signature Integer size() Returns Returns the amount of records contained in the domain"
    },
    {
        "title": "fflib_ISelectorFactory",
        "fileName": "fflib_ISelectorFactory.html",
        "text": "fflib_ISelectorFactory Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_ISelectorFactory fflib_ISelectorFactory Methods newInstance(sObjectType) selectById(recordIds) selectByRelationship(relatedRecords, relationshipField) newInstance(sObjectType) Signature fflib_ISObjectSelector newInstance(SObjectType sObjectType) selectById(recordIds) Signature List<SObject> selectById(Set<Id> recordIds) selectByRelationship(relatedRecords, relationshipField) Signature List<SObject> selectByRelationship(List<SObject> relatedRecords, SObjectField relationshipField)"
    },
    {
        "title": "fflib_IServiceFactory",
        "fileName": "fflib_IServiceFactory.html",
        "text": "fflib_IServiceFactory Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_IServiceFactory fflib_IServiceFactory Methods newInstance(serviceInterfaceType) newInstance(serviceInterfaceType) Signature Object newInstance(Type serviceInterfaceType)"
    },
    {
        "title": "fflib_ISObjectDomain",
        "fileName": "fflib_ISObjectDomain.html",
        "text": "fflib_ISObjectDomain Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_ISObjectDomain extends fflib_IDomain fflib_ISObjectDomain Methods getRecords() Alternative to the Records property, provided to support mocking of Domain classes sObjectType() Returns the SObjectType this Domain class represents getRecords() Alternative to the Records property, provided to support mocking of Domain classes Signature List<SObject> getRecords() sObjectType() Returns the SObjectType this Domain class represents Signature Schema.SObjectType sObjectType()"
    },
    {
        "title": "fflib_ISObjects",
        "fileName": "fflib_ISObjects.html",
        "text": "fflib_ISObjects Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_ISObjects extends fflib_IObjects fflib_ISObjects Methods getRecordIds() getRecords() getSObjectType() getRecordIds() Signature Set<Id> getRecordIds() Returns Return the SObject records ids contained in the domain getRecords() Signature List<SObject> getRecords() Returns Return the SObject records contained in the domain getSObjectType() Signature SObjectType getSObjectType() Returns Return the SObjectType of the SObjects contained in the domain"
    },
    {
        "title": "fflib_ISObjectSelector",
        "fileName": "fflib_ISObjectSelector.html",
        "text": "fflib_ISObjectSelector Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_ISObjectSelector fflib_ISObjectSelector Methods selectSObjectsById(idSet) Selects by Id records using the fields defined by the Selector configuration sObjectType() Provides the SObjectType for the object the given Selector is providing query logic for selectSObjectsById(idSet) Selects by Id records using the fields defined by the Selector configuration Signature List<SObject> selectSObjectsById(Set<Id> idSet) sObjectType() Provides the SObjectType for the object the given Selector is providing query logic for Signature Schema.SObjectType sObjectType()"
    },
    {
        "title": "fflib_ISObjectUnitOfWork",
        "fileName": "fflib_ISObjectUnitOfWork.html",
        "text": "fflib_ISObjectUnitOfWork Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_ISObjectUnitOfWork fflib_ISObjectUnitOfWork Methods commitWork() Takes all the work that has been registered with the UnitOfWork and commits it to the database registerDeleted(record) Register an existing record to be deleted during the commitWork method registerDeleted(records) Register a list of existing records to be deleted during the commitWork method registerDirty(record) Register an existing record to be updated during the commitWork method registerDirty(records, dirtyFields) Register specific fields on records to be updated when work is committed If the records are previously registered as dirty, the dirty fields on the records in this call will overwrite the values of the previously registered dirty records registerDirty(record, dirtyFields) Register specific fields on record to be updated when work is committed If the record has previously been registered as dirty, the dirty fields on the record in this call will overwrite the values of the previously registered dirty record registerDirty(record, relatedToParentField, relatedToParentRecord) Register an existing record to be updated when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) registerDirty(records) Register a list of existing records to be updated during the commitWork method registerEmail(email) Registers the given email to be sent during the commitWork registerEmptyRecycleBin(record) Register an deleted record to be removed from the recycle bin during the commitWork method registerEmptyRecycleBin(records) Register deleted records to be removed from the recycle bin during the commitWork method registerNew(record) Register a newly created SObject instance to be inserted when commitWork is called registerNew(records) Register a list of newly created SObject instances to be inserted when commitWork is called registerNew(record, relatedToParentField, relatedToParentRecord) Register a newly created SObject instance to be inserted when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) registerPermanentlyDeleted(records) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method registerPermanentlyDeleted(record) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method registerPublishAfterFailureTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork has caused an error registerPublishAfterFailureTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork has caused an error registerPublishAfterSuccessTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork has successfully completed registerPublishAfterSuccessTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork has successfully completed registerPublishBeforeTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called registerPublishBeforeTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called registerRelationship(record, relatedToField, relatedTo) Register a relationship between two records that have yet to be inserted to the database. This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. registerRelationship(email, relatedTo) Registers a relationship between a record and a Messaging.Email where the record has yet to be inserted to the database.  This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. registerRelationship(record, relatedToField, externalIdField, externalId) Registers a relationship between a record and a lookup value using an external ID field and a provided value. This information will be used during the commitWork phase to make the lookup reference requested when inserted to the database. Usage Example: uow.registerRelationship(recordSObject, record_sobject__c.relationship_field__c, lookup_sobject__c.external_id__c, 'abc123'); Wraps putSObject, creating a new instance of the lookup sobject using the external id field and value. registerUpsert(record) Register a new or existing record to be inserted or updated during the commitWork method registerUpsert(records) Register a list of mix of new and existing records to be upserted during the commitWork method registerWork(work) Register a generic peace of work to be invoked during the commitWork phase commitWork() Takes all the work that has been registered with the UnitOfWork and commits it to the database Signature void commitWork() registerDeleted(record) Register an existing record to be deleted during the commitWork method Signature void registerDeleted(SObject record) Parameters record Type: SObject An existing record registerDeleted(records) Register a list of existing records to be deleted during the commitWork method Signature void registerDeleted(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerDirty(record) Register an existing record to be updated during the commitWork method Signature void registerDirty(SObject record) Parameters record Type: SObject An existing record registerDirty(records, dirtyFields) Register specific fields on records to be updated when work is committed If the records are previously registered as dirty, the dirty fields on the records in this call will overwrite the values of the previously registered dirty records Signature void registerDirty(List<SObject> records, List<SObjectField> dirtyFields) Parameters records Type: List<SObject> A list of existing records dirtyFields Type: List<SObjectField> The fields to update if record is already registered registerDirty(record, dirtyFields) Register specific fields on record to be updated when work is committed If the record has previously been registered as dirty, the dirty fields on the record in this call will overwrite the values of the previously registered dirty record Signature void registerDirty(SObject record, List<SObjectField> dirtyFields) Parameters record Type: SObject An existing record dirtyFields Type: List<SObjectField> The fields to update if record is already registered registerDirty(record, relatedToParentField, relatedToParentRecord) Register an existing record to be updated when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) Signature void registerDirty(SObject record, Schema.SObjectField relatedToParentField, SObject relatedToParentRecord) Parameters record Type: SObject A newly created SObject instance to be inserted during commitWork relatedToParentField Type: Schema.SObjectField A SObjectField reference to the child field that associates the child record with its parent relatedToParentRecord Type: SObject A SObject instance of the parent record(should also be registered as new separately) registerDirty(records) Register a list of existing records to be updated during the commitWork method Signature void registerDirty(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerEmail(email) Registers the given email to be sent during the commitWork Signature void registerEmail(Messaging.Email email) Parameters email Type: Messaging.Email Email to be sent registerEmptyRecycleBin(record) Register an deleted record to be removed from the recycle bin during the commitWork method Signature void registerEmptyRecycleBin(SObject record) Parameters record Type: SObject An deleted record registerEmptyRecycleBin(records) Register deleted records to be removed from the recycle bin during the commitWork method Signature void registerEmptyRecycleBin(List<SObject> records) Parameters records Type: List<SObject> Deleted records registerNew(record) Register a newly created SObject instance to be inserted when commitWork is called Signature void registerNew(SObject record) Parameters record Type: SObject A newly created SObject instance to be inserted during commitWork registerNew(records) Register a list of newly created SObject instances to be inserted when commitWork is called Signature void registerNew(List<SObject> records) Parameters records Type: List<SObject> A list of newly created SObject instances to be inserted during commitWork registerNew(record, relatedToParentField, relatedToParentRecord) Register a newly created SObject instance to be inserted when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) Signature void registerNew(SObject record, Schema.SObjectField relatedToParentField, SObject relatedToParentRecord) Parameters record Type: SObject A newly created SObject instance to be inserted during commitWork relatedToParentField Type: Schema.SObjectField A SObjectField reference to the child field that associates the child record with its parent relatedToParentRecord Type: SObject A SObject instance of the parent record(should also be registered as new separately) registerPermanentlyDeleted(records) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method Signature void registerPermanentlyDeleted(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerPermanentlyDeleted(record) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method Signature void registerPermanentlyDeleted(SObject record) Parameters record Type: SObject A list of existing records registerPublishAfterFailureTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork has caused an error Signature void registerPublishAfterFailureTransaction(SObject record) Parameters record Type: SObject A newly created SObject(Platform Event) instance to be inserted during commitWork registerPublishAfterFailureTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork has caused an error Signature void registerPublishAfterFailureTransaction(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerPublishAfterSuccessTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork has successfully completed Signature void registerPublishAfterSuccessTransaction(SObject record) Parameters record Type: SObject A newly created SObject(Platform Event) instance to be inserted during commitWork registerPublishAfterSuccessTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork has successfully completed Signature void registerPublishAfterSuccessTransaction(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerPublishBeforeTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called Signature void registerPublishBeforeTransaction(SObject record) Parameters record Type: SObject A newly created SObject(Platform Event) instance to be inserted during commitWork registerPublishBeforeTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called Signature void registerPublishBeforeTransaction(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerRelationship(record, relatedToField, relatedTo) Register a relationship between two records that have yet to be inserted to the database. This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. Signature void registerRelationship(SObject record, Schema.SObjectField relatedToField, SObject relatedTo) Parameters record Type: SObject An existing or newly created record relatedToField Type: Schema.SObjectField A SObjectField reference to the lookup field that relates the two records together relatedTo Type: SObject A SObject instance(yet to be committed to the database) registerRelationship(email, relatedTo) Registers a relationship between a record and a Messaging.Email where the record has yet to be inserted to the database.  This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. Signature void registerRelationship(Messaging.SingleEmailMessage email, SObject relatedTo) Parameters email Type: Messaging.SingleEmailMessage a single email message instance relatedTo Type: SObject A SObject instance(yet to be committed to the database) registerRelationship(record, relatedToField, externalIdField, externalId) Registers a relationship between a record and a lookup value using an external ID field and a provided value. This information will be used during the commitWork phase to make the lookup reference requested when inserted to the database. Usage Example: uow.registerRelationship(recordSObject, record_sobject__c.relationship_field__c, lookup_sobject__c.external_id__c, 'abc123'); Wraps putSObject, creating a new instance of the lookup sobject using the external id field and value. Signature void registerRelationship(SObject record, Schema.SObjectField relatedToField, Schema.SObjectField externalIdField, Object externalId) Parameters record Type: SObject An existing or newly created record relatedToField Type: Schema.SObjectField A SObjectField reference to the lookup field that relates the two records together externalIdField Type: Schema.SObjectField A SObjectField reference to a field on the target SObject that is marked as isExternalId externalId Type: Object A Object representing the targeted value of the externalIdField in said lookup registerUpsert(record) Register a new or existing record to be inserted or updated during the commitWork method Signature void registerUpsert(SObject record) Parameters record Type: SObject An new or existing record registerUpsert(records) Register a list of mix of new and existing records to be upserted during the commitWork method Signature void registerUpsert(List<SObject> records) Parameters records Type: List<SObject> A list of mix of existing and new records registerWork(work) Register a generic peace of work to be invoked during the commitWork phase Signature void registerWork(fflib_SObjectUnitOfWork.IDoWork work) Parameters work Type: fflib_SObjectUnitOfWork.IDoWork Work to be registered"
    },
    {
        "title": "fflib_IUnitOfWorkFactory",
        "fileName": "fflib_IUnitOfWorkFactory.html",
        "text": "fflib_IUnitOfWorkFactory Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public interface fflib_IUnitOfWorkFactory fflib_IUnitOfWorkFactory Methods newInstance() newInstance(dml) newInstance(objectTypes) newInstance(objectTypes, dml) newInstance() Signature fflib_ISObjectUnitOfWork newInstance() newInstance(dml) Signature fflib_ISObjectUnitOfWork newInstance(fflib_SObjectUnitOfWork.IDML dml) newInstance(objectTypes) Signature fflib_ISObjectUnitOfWork newInstance(List<SObjectType> objectTypes) newInstance(objectTypes, dml) Signature fflib_ISObjectUnitOfWork newInstance(List<SObjectType> objectTypes, fflib_SObjectUnitOfWork.IDML dml)"
    },
    {
        "title": "fflib_Match",
        "fileName": "fflib_Match.html",
        "text": "fflib_Match Copyright(c) 2014, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public class fflib_Match fflib_Match Properties Name Signature Description matchers private static List<fflib_IMatcher> matchers Matching public static Boolean Matching Matching True when comparing method arg values to matchers, false when comparing absolute arg values. fflib_Match Methods allOf(o1, o2) COMBINED MATCHER The allOf, anyOf and noneOf methods are overloaded to provide fluent matcher calls for up to 4 matcher conditions. To connect 5 or more, the List<Object> version directly. allOf(o1, o2, o3) Registers a matcher which will check if the method is called with an arg that matches allOf allOf(o1, o2, o3, o4) Registers a matcher which will check if the method is called with an arg that matches allOf allOf(o) Registers a matcher which will check if the method is called with an arg that matches allOf anyBoolean() Registers a matcher which will check if the method is called with an arg that matches anyBoolean anyDate() Registers a matcher which will check if the method is called with an arg that matches anyDate anyDatetime() Registers a matcher which will check if the method is called with an arg that matches anyDatetime anyDecimal() Registers a matcher which will check if the method is called with an arg that matches anyDecimal anyDouble() Registers a matcher which will check if the method is called with an arg that matches anyDouble anyFieldSet() Registers a matcher which will check if the method is called with an arg that matches anyFieldSet anyId() Registers a matcher which will check if the method is called with an arg that matches anyId anyInteger() Registers a matcher which will check if the method is called with an arg that matches anyInteger anyList() Registers a matcher which will check if the method is called with an arg that matches anyList anyLong() Registers a matcher which will check if the method is called with an arg that matches anyLong anyObject() Registers a matcher which will check if the method is called with an arg that matches anyObject anyOf(o1, o2) Registers a matcher which will check if the method is called with an arg that matches anyOf anyOf(o1, o2, o3) Registers a matcher which will check if the method is called with an arg that matches anyOf anyOf(o1, o2, o3, o4) Registers a matcher which will check if the method is called with an arg that matches anyOf anyOf(o) Registers a matcher which will check if the method is called with an arg that matches anyOf anySObject() Registers a matcher which will check if the method is called with an arg that matches anySObject anySObjectField() Registers a matcher which will check if the method is called with an arg that matches anySObjectField anySObjectType() Registers a matcher which will check if the method is called with an arg that matches anySObjectType anyString() Registers a matcher which will check if the method is called with an arg that matches anyString combined(connectiveExpression, o) dateAfter(fromDate) Registers a matcher which will check if the method is called with an arg that matches dateAfter(not inclusive) dateAfter(fromDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches dateAfter dateBefore(toDate) Registers a matcher which will check if the method is called with an arg that matches dateBefore(not inclusive) dateBefore(toDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches dateBefore dateBetween(fromDate, toDate) Registers a matcher which will check if the method is called with an arg that matches dateBetween(not inclusive) dateBetween(fromDate, inclusiveFrom, toDate, inclusiveTo) Registers a matcher which will check if the method is called with an arg that matches dateBetween datetimeAfter(fromDate) Registers a matcher which will check if the method is called with an arg that matches datetimeAfter(not inclusive) datetimeAfter(fromDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches datetimeAfter datetimeBefore(toDate) Registers a matcher which will check if the method is called with an arg that matches datetimeBefore(not inclusive) datetimeBefore(toDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches datetimeBefore datetimeBetween(fromDate, toDate) Registers a matcher which will check if the method is called with an arg that matches datetimeBetween(not inclusive) datetimeBetween(fromDate, inclusiveFrom, toDate, inclusiveTo) Registers a matcher which will check if the method is called with an arg that matches datetimeBetween decimalBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches decimalBetween(not inclusive) decimalBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches decimalBetween decimalLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches decimalLessThan(not inclusive) decimalLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches decimalLessThan decimalMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches decimalMoreThan(not inclusive) decimalMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches decimalMoreThan doubleBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches doubleBetween(not inclusive) doubleBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches doubleBetween doubleLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches doubleLessThan(not inclusive) doubleLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches doubleLessThan doubleMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches doubleMoreThan(not inclusive) doubleMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches doubleMoreThan eq(toMatch) ALL OTHER MATCHER METHODS eqBoolean(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqBoolean eqDate(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDate eqDatetime(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDatetime eqDecimal(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDecimal eqDouble(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDouble eqId(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqId eqInteger(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqInteger eqList(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqList eqLong(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqLong eqSObjectField(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqSObjectField eqSObjectType(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqSObjectType eqString(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqString fieldSetEquivalentTo(toMatch) Registers a matcher which will check if the method is called with an arg that matches FieldSetEquivalentTo gatherMatchers(ignoredMatcherObjects) getAndClearMatchers(expectedSize) Used internally by the mocking framework, you shouldn't need to call this method directly. Copies the registered matchers, and then switches matching mode off. integerBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches integerBetween(not inclusive) integerBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches integerBetween integerLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches integerLessThan(not inclusive) integerLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches integerLessThan integerMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches integerMoreThan(not inclusive) integerMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches integerMoreThan isNot(o1) Registers a matcher which will check if the method is called with an arg that matches isNot isNotNull() Registers a matcher which will check if the method is called with an arg that matches isNotNull isNull() Registers a matcher which will check if the method is called with an arg that matches isNull listContains(toMatch) Registers a matcher which will check if the method is called with an arg that matches listContains listIsEmpty() Registers a matcher which will check if the method is called with an arg that matches listIsEmpty longBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches longBetween(not inclusive) longBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches longBetween longLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches longLessThan(not inclusive) longLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches longLessThan longMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches longMoreThan(not inclusive) longMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches longMoreThan matches(matcher) Registers a matcher which will be stubbed/verified against. matchesAllArgs(methodArg, targetMatchers) Used internally by the mocking framework, you shouldn't need to call this method directly. Compares all supplied method arg values to the supplied target matchers. noneOf(o1, o2) Registers a matcher which will check if the method is called with an arg that matches noneOf noneOf(o1, o2, o3) Registers a matcher which will check if the method is called with an arg that matches noneOf noneOf(o1, o2, o3, o4) Registers a matcher which will check if the method is called with an arg that matches noneOf noneOf(o) Registers a matcher which will check if the method is called with an arg that matches noneOf refEq(toMatch) Registers a matcher which will check if the method is called with an arg that matches refEq sObjectOfType(objectType) Registers a matcher which will check if the method is called with an SObject of specified SObjectType sObjectsWith(toMatch) Registers a matcher which will check if the method is called with a list of SObject sObjectsWith(toMatch, matchInOrder) Registers a matcher which will check if the method is called with a list of SObject sObjectWith(toMatch) Registers a matcher which will check if the method is called with an SObject sObjectWithId(toMatch) Registers a matcher which will check if the method is called with an SObject sObjectWithName(toMatch) Registers a matcher which will check if the method is called with an SObject stringContains(toMatch) Registers a matcher which will check if the method is called with an arg that matches stringContains stringEndsWith(toMatch) Registers a matcher which will check if the method is called with an arg that matches stringEndsWith stringIsBlank() Registers a matcher which will check if the method is called with an arg that matches stringIsBlank stringIsNotBlank() Registers a matcher which will check if the method is called with an arg that matches stringIsNotBlank stringMatches(regEx) Registers a matcher which will check if the method is called with an arg that matches stringMatches stringStartsWith(toMatch) Registers a matcher which will check if the method is called with an arg that matches stringStartsWith validateArgs(methodArg, targetMatchers) allOf(o1, o2) COMBINED MATCHER The allOf, anyOf and noneOf methods are overloaded to provide fluent matcher calls for up to 4 matcher conditions. To connect 5 or more, the List<Object> version directly. Signature public static Object allOf(Object o1, Object o2) allOf(o1, o2, o3) Registers a matcher which will check if the method is called with an arg that matches allOf Signature public static Object allOf(Object o1, Object o2, Object o3) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher o3 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) allOf(o1, o2, o3, o4) Registers a matcher which will check if the method is called with an arg that matches allOf Signature public static Object allOf(Object o1, Object o2, Object o3, Object o4) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher o3 Type: Object A dummy object returned by registering another matcher o4 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) allOf(o) Registers a matcher which will check if the method is called with an arg that matches allOf Signature public static Object allOf(List<Object> o) Parameters o Type: List<Object> A list of dummy objects returned by registering other matchers Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) anyBoolean() Registers a matcher which will check if the method is called with an arg that matches anyBoolean Signature public static Boolean anyBoolean() Returns Boolean A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyDate() Registers a matcher which will check if the method is called with an arg that matches anyDate Signature public static Date anyDate() Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyDatetime() Registers a matcher which will check if the method is called with an arg that matches anyDatetime Signature public static Datetime anyDatetime() Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyDecimal() Registers a matcher which will check if the method is called with an arg that matches anyDecimal Signature public static Decimal anyDecimal() Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyDouble() Registers a matcher which will check if the method is called with an arg that matches anyDouble Signature public static Double anyDouble() Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyFieldSet() Registers a matcher which will check if the method is called with an arg that matches anyFieldSet Signature public static Schema.FieldSet anyFieldSet() Returns Schema.FieldSet A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyId() Registers a matcher which will check if the method is called with an arg that matches anyId Signature public static Id anyId() Returns Id A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyInteger() Registers a matcher which will check if the method is called with an arg that matches anyInteger Signature public static Integer anyInteger() Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyList() Registers a matcher which will check if the method is called with an arg that matches anyList Signature public static List<Object> anyList() Returns List A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyLong() Registers a matcher which will check if the method is called with an arg that matches anyLong Signature public static Long anyLong() Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyObject() Registers a matcher which will check if the method is called with an arg that matches anyObject Signature public static Object anyObject() Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) anyOf(o1, o2) Registers a matcher which will check if the method is called with an arg that matches anyOf Signature public static Object anyOf(Object o1, Object o2) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) anyOf(o1, o2, o3) Registers a matcher which will check if the method is called with an arg that matches anyOf Signature public static Object anyOf(Object o1, Object o2, Object o3) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher o3 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) anyOf(o1, o2, o3, o4) Registers a matcher which will check if the method is called with an arg that matches anyOf Signature public static Object anyOf(Object o1, Object o2, Object o3, Object o4) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher o3 Type: Object A dummy object returned by registering another matcher o4 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) anyOf(o) Registers a matcher which will check if the method is called with an arg that matches anyOf Signature public static Object anyOf(List<Object> o) Parameters o Type: List<Object> A list of dummy objects returned by registering other matchers Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) anySObject() Registers a matcher which will check if the method is called with an arg that matches anySObject Signature public static SObject anySObject() Returns SObject A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anySObjectField() Registers a matcher which will check if the method is called with an arg that matches anySObjectField Signature public static SObjectField anySObjectField() Returns SObjectField A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anySObjectType() Registers a matcher which will check if the method is called with an arg that matches anySObjectType Signature public static SObjectType anySObjectType() Returns SObjectType A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. anyString() Registers a matcher which will check if the method is called with an arg that matches anyString Signature public static String anyString() Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. combined(connectiveExpression, o) Signature private static Object combined(fflib_MatcherDefinitions.Connective connectiveExpression, List<Object> o) dateAfter(fromDate) Registers a matcher which will check if the method is called with an arg that matches dateAfter(not inclusive) Signature public static Date dateAfter(Date fromDate) Parameters fromDate Type: Date The Date to be compared Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. dateAfter(fromDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches dateAfter Signature public static Date dateAfter(Date fromDate, Boolean inclusive) Parameters fromDate Type: Date The Date to be compared inclusive Type: Boolean Whether or not a Date equal to fromDate should be considered a match Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. dateBefore(toDate) Registers a matcher which will check if the method is called with an arg that matches dateBefore(not inclusive) Signature public static Date dateBefore(Date toDate) Parameters toDate Type: Date The Date to be compared Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. dateBefore(toDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches dateBefore Signature public static Date dateBefore(Date toDate, Boolean inclusive) Parameters toDate Type: Date The Date to be compared inclusive Type: Boolean Whether or not a Date equal to toDate should be considered a match Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. dateBetween(fromDate, toDate) Registers a matcher which will check if the method is called with an arg that matches dateBetween(not inclusive) Signature public static Date dateBetween(Date fromDate, Date toDate) Parameters fromDate Type: Date The lower bound Date to be compared toDate Type: Date The upper bound Date to be compared Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. dateBetween(fromDate, inclusiveFrom, toDate, inclusiveTo) Registers a matcher which will check if the method is called with an arg that matches dateBetween Signature public static Date dateBetween(Date fromDate, Boolean inclusiveFrom, Date toDate, Boolean inclusiveTo) Parameters fromDate Type: Date The lower bound Date to be compared inclusiveFrom Type: Boolean Whether or not a Date equal to fromDate should be considered a match toDate Type: Date The upper bound Date to be compared inclusiveTo Type: Boolean Whether or not a Date equal to toDate should be considered a match Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. datetimeAfter(fromDate) Registers a matcher which will check if the method is called with an arg that matches datetimeAfter(not inclusive) Signature public static Datetime datetimeAfter(Datetime fromDate) Parameters fromDate Type: Datetime The Datetime to be compared Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. datetimeAfter(fromDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches datetimeAfter Signature public static Datetime datetimeAfter(Datetime fromDate, Boolean inclusive) Parameters fromDate Type: Datetime The Datetime to be compared inclusive Type: Boolean Whether or not a Datetime equal to fromDate should be considered a match Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. datetimeBefore(toDate) Registers a matcher which will check if the method is called with an arg that matches datetimeBefore(not inclusive) Signature public static Datetime datetimeBefore(Datetime toDate) Parameters toDate Type: Datetime The Datetime to be compared Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. datetimeBefore(toDate, inclusive) Registers a matcher which will check if the method is called with an arg that matches datetimeBefore Signature public static Datetime datetimeBefore(Datetime toDate, Boolean inclusive) Parameters toDate Type: Datetime The Datetime to be compared inclusive Type: Boolean Whether or not a Datetime equal to toDate should be considered a match Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. datetimeBetween(fromDate, toDate) Registers a matcher which will check if the method is called with an arg that matches datetimeBetween(not inclusive) Signature public static Datetime datetimeBetween(Datetime fromDate, Datetime toDate) Parameters fromDate Type: Datetime The lower bound Datetime to be compared toDate Type: Datetime The upper bound Datetime to be compared Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. datetimeBetween(fromDate, inclusiveFrom, toDate, inclusiveTo) Registers a matcher which will check if the method is called with an arg that matches datetimeBetween Signature public static Datetime datetimeBetween(Datetime fromDate, Boolean inclusiveFrom, Datetime toDate, Boolean inclusiveTo) Parameters fromDate Type: Datetime The lower bound Datetime to be compared inclusiveFrom Type: Boolean Whether or not a Datetime equal to fromDate should be considered a match toDate Type: Datetime The upper bound Datetime to be compared inclusiveTo Type: Boolean Whether or not a Datetime equal to toDate should be considered a match Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. decimalBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches decimalBetween(not inclusive) Signature public static Decimal decimalBetween(Decimal lower, Decimal upper) Parameters lower Type: Decimal The lower number to be compared upper Type: Decimal The upper number to be compared Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. decimalBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches decimalBetween Signature public static Decimal decimalBetween(Decimal lower, Boolean inclusiveLower, Decimal upper, Boolean inclusiveUpper) Parameters lower Type: Decimal The lower number to be compared inclusiveLower Type: Boolean Whether or not a number equal to the lower bound should be considered a match upper Type: Decimal The upper number to be compared inclusiveUpper Type: Boolean Whether or not a number equal to the upper bound should be considered a match Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. decimalLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches decimalLessThan(not inclusive) Signature public static Decimal decimalLessThan(Decimal toMatch) Parameters toMatch Type: Decimal The number to be compared Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. decimalLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches decimalLessThan Signature public static Decimal decimalLessThan(Decimal toMatch, Boolean inclusive) Parameters toMatch Type: Decimal The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. decimalMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches decimalMoreThan(not inclusive) Signature public static Decimal decimalMoreThan(Decimal toMatch) Parameters toMatch Type: Decimal The number to be compared Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. decimalMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches decimalMoreThan Signature public static Decimal decimalMoreThan(Decimal toMatch, Boolean inclusive) Parameters toMatch Type: Decimal The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. doubleBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches doubleBetween(not inclusive) Signature public static Double doubleBetween(Double lower, Double upper) Parameters lower Type: Double The lower number to be compared upper Type: Double The upper number to be compared Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. doubleBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches doubleBetween Signature public static Double doubleBetween(Double lower, Boolean inclusiveLower, Double upper, Boolean inclusiveUpper) Parameters lower Type: Double The lower number to be compared inclusiveLower Type: Boolean Whether or not a number equal to the lower bound should be considered a match upper Type: Double The upper number to be compared inclusiveUpper Type: Boolean Whether or not a number equal to the upper bound should be considered a match Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. doubleLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches doubleLessThan(not inclusive) Signature public static Double doubleLessThan(Double toMatch) Parameters toMatch Type: Double The number to be compared Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. doubleLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches doubleLessThan Signature public static Double doubleLessThan(Double toMatch, Boolean inclusive) Parameters toMatch Type: Double The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. doubleMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches doubleMoreThan(not inclusive) Signature public static Double doubleMoreThan(Double toMatch) Parameters toMatch Type: Double The number to be compared Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. doubleMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches doubleMoreThan Signature public static Double doubleMoreThan(Double toMatch, Boolean inclusive) Parameters toMatch Type: Double The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eq(toMatch) ALL OTHER MATCHER METHODS Signature public static Object eq(Object toMatch) eqBoolean(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqBoolean Signature public static Boolean eqBoolean(Boolean toMatch) Parameters toMatch Type: Boolean The Boolean to be compared Returns Boolean A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqDate(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDate Signature public static Date eqDate(Date toMatch) Parameters toMatch Type: Date The Date to be compared Returns Date A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqDatetime(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDatetime Signature public static Datetime eqDatetime(Datetime toMatch) Parameters toMatch Type: Datetime The Datetime to be compared Returns Datetime A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqDecimal(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDecimal Signature public static Decimal eqDecimal(Decimal toMatch) Parameters toMatch Type: Decimal The Decimal to be compared Returns Decimal A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqDouble(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqDouble Signature public static Double eqDouble(Double toMatch) Parameters toMatch Type: Double The Double to be compared Returns Double A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqId(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqId Signature public static Id eqId(Id toMatch) Parameters toMatch Type: Id The Id to be compared Returns Id A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqInteger(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqInteger Signature public static Integer eqInteger(Integer toMatch) Parameters toMatch Type: Integer The Integer to be compared Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqList(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqList Signature public static List<Object> eqList(List<Object> toMatch) Parameters toMatch Type: List<Object> The List to be compared Returns List A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqLong(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqLong Signature public static Long eqLong(Long toMatch) Parameters toMatch Type: Long The Long to be compared Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqSObjectField(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqSObjectField Signature public static SObjectField eqSObjectField(SObjectField toMatch) Parameters toMatch Type: SObjectField The SObjectField to be compared Returns SObjectField A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqSObjectType(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqSObjectType Signature public static SObjectType eqSObjectType(SObjectType toMatch) Parameters toMatch Type: SObjectType The SObjectType to be compared Returns SObjectType A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. eqString(toMatch) Registers a matcher which will check if the method is called with an arg that matches eqString Signature public static String eqString(String toMatch) Parameters toMatch Type: String The String to be compared Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. fieldSetEquivalentTo(toMatch) Registers a matcher which will check if the method is called with an arg that matches FieldSetEquivalentTo Signature public static Schema.FieldSet fieldSetEquivalentTo(Schema.FieldSet toMatch) Parameters toMatch Type: Schema.FieldSet The fieldSet to be compared Returns Schema.FieldSet A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. gatherMatchers(ignoredMatcherObjects) Signature private static List<fflib_IMatcher> gatherMatchers(Object[] ignoredMatcherObjects) getAndClearMatchers(expectedSize) Used internally by the mocking framework, you shouldn't need to call this method directly. Copies the registered matchers, and then switches matching mode off. Signature public static List<fflib_IMatcher> getAndClearMatchers(Integer expectedSize) Parameters expectedSize Type: Integer The expected number of matchers to be returned. If this does not match the actual value an expection is thrown. Returns List<fflib_IMatcher> The registered matchers, collected while in matching mode. integerBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches integerBetween(not inclusive) Signature public static Integer integerBetween(Integer lower, Integer upper) Parameters lower Type: Integer The lower number to be compared upper Type: Integer The upper number to be compared Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. integerBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches integerBetween Signature public static Integer integerBetween(Integer lower, Boolean inclusiveLower, Integer upper, Boolean inclusiveUpper) Parameters lower Type: Integer The lower number to be compared inclusiveLower Type: Boolean Whether or not a number equal to the lower bound should be considered a match upper Type: Integer The upper number to be compared inclusiveUpper Type: Boolean Whether or not a number equal to the upper bound should be considered a match Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. integerLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches integerLessThan(not inclusive) Signature public static Integer integerLessThan(Integer toMatch) Parameters toMatch Type: Integer The number to be compared Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. integerLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches integerLessThan Signature public static Integer integerLessThan(Integer toMatch, Boolean inclusive) Parameters toMatch Type: Integer The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. integerMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches integerMoreThan(not inclusive) Signature public static Integer integerMoreThan(Integer toMatch) Parameters toMatch Type: Integer The number to be compared Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. integerMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches integerMoreThan Signature public static Integer integerMoreThan(Integer toMatch, Boolean inclusive) Parameters toMatch Type: Integer The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Integer A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. isNot(o1) Registers a matcher which will check if the method is called with an arg that matches isNot Signature public static Object isNot(Object o1) Parameters o1 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) isNotNull() Registers a matcher which will check if the method is called with an arg that matches isNotNull Signature public static Object isNotNull() Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) isNull() Registers a matcher which will check if the method is called with an arg that matches isNull Signature public static Object isNull() Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) listContains(toMatch) Registers a matcher which will check if the method is called with an arg that matches listContains Signature public static Object listContains(Object toMatch) Parameters toMatch Type: Object The list to be compared Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) listIsEmpty() Registers a matcher which will check if the method is called with an arg that matches listIsEmpty Signature public static Object listIsEmpty() Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) longBetween(lower, upper) Registers a matcher which will check if the method is called with an arg that matches longBetween(not inclusive) Signature public static Long longBetween(Long lower, Long upper) Parameters lower Type: Long The lower number to be compared upper Type: Long The upper number to be compared Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. longBetween(lower, inclusiveLower, upper, inclusiveUpper) Registers a matcher which will check if the method is called with an arg that matches longBetween Signature public static Long longBetween(Long lower, Boolean inclusiveLower, Long upper, Boolean inclusiveUpper) Parameters lower Type: Long The lower number to be compared inclusiveLower Type: Boolean Whether or not a number equal to the lower bound should be considered a match upper Type: Long The upper number to be compared inclusiveUpper Type: Boolean Whether or not a number equal to the upper bound should be considered a match Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. longLessThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches longLessThan(not inclusive) Signature public static Long longLessThan(Long toMatch) Parameters toMatch Type: Long The number to be compared Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. longLessThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches longLessThan Signature public static Long longLessThan(Long toMatch, Boolean inclusive) Parameters toMatch Type: Long The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. longMoreThan(toMatch) Registers a matcher which will check if the method is called with an arg that matches longMoreThan(not inclusive) Signature public static Long longMoreThan(Long toMatch) Parameters toMatch Type: Long The number to be compared Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. longMoreThan(toMatch, inclusive) Registers a matcher which will check if the method is called with an arg that matches longMoreThan Signature public static Long longMoreThan(Long toMatch, Boolean inclusive) Parameters toMatch Type: Long The number to be compared inclusive Type: Boolean Whether or not a number equal to toMatch should be considered a match Returns Long A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. matches(matcher) Registers a matcher which will be stubbed/verified against. Signature public static Object matches(fflib_IMatcher matcher) Parameters matcher Type: fflib_IMatcher The matcher that needs to be compared Returns Object Always returns null. This can then be cast into the correct arg type so that the right method is called on the mock objects. matchesAllArgs(methodArg, targetMatchers) Used internally by the mocking framework, you shouldn't need to call this method directly. Compares all supplied method arg values to the supplied target matchers. Signature public static Boolean matchesAllArgs(fflib_MethodArgValues methodArg, List<fflib_IMatcher> targetMatchers) Parameters methodArg Type: fflib_MethodArgValues The arguments supplied when the method was called targetMatchers Type: List<fflib_IMatcher> The matchers the arguments need to be compared with @throws fflib_ApexMocks.ApexMocksException Thrown when methodArgValues is null/empty, targetMatchers is null, or their sizes don't match Returns Boolean True if all arg values satisfy all of the supplied matchers. noneOf(o1, o2) Registers a matcher which will check if the method is called with an arg that matches noneOf Signature public static Object noneOf(Object o1, Object o2) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) noneOf(o1, o2, o3) Registers a matcher which will check if the method is called with an arg that matches noneOf Signature public static Object noneOf(Object o1, Object o2, Object o3) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher o3 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) noneOf(o1, o2, o3, o4) Registers a matcher which will check if the method is called with an arg that matches noneOf Signature public static Object noneOf(Object o1, Object o2, Object o3, Object o4) Parameters o1 Type: Object A dummy object returned by registering another matcher o2 Type: Object A dummy object returned by registering another matcher o3 Type: Object A dummy object returned by registering another matcher o4 Type: Object A dummy object returned by registering another matcher Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) noneOf(o) Registers a matcher which will check if the method is called with an arg that matches noneOf Signature public static Object noneOf(List<Object> o) Parameters o Type: List<Object> A list of dummy objects returned by registering other matchers Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) refEq(toMatch) Registers a matcher which will check if the method is called with an arg that matches refEq Signature public static Object refEq(Object toMatch) Parameters toMatch Type: Object The Object to be compared Returns Object A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked.(You may need to cast down to your specific object type) sObjectOfType(objectType) Registers a matcher which will check if the method is called with an SObject of specified SObjectType Signature public static SObject sObjectOfType(Schema.SObjectType objectType) Parameters objectType Type: Schema.SObjectType The SObjectType to be compared Returns SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked sObjectsWith(toMatch) Registers a matcher which will check if the method is called with a list of SObject Signature public static SObject[] sObjectsWith(list<Map<Schema.SObjectField, Object>> toMatch) Parameters toMatch Type: list<Map<Schema.SObjectField, Object>> A list of Map of SObjectFields to required values, to be compared to concrete SObject records Returns SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked sObjectsWith(toMatch, matchInOrder) Registers a matcher which will check if the method is called with a list of SObject Signature public static SObject[] sObjectsWith(list<Map<Schema.SObjectField, Object>> toMatch, Boolean matchInOrder) Parameters toMatch Type: list<Map<Schema.SObjectField, Object>> A list of Map of SObjectFields to required values, to be compared to concrete SObject records. Comparison can be order dependent Returns SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked sObjectWith(toMatch) Registers a matcher which will check if the method is called with an SObject Signature public static SObject sObjectWith(Map<Schema.SObjectField, Object> toMatch) Parameters toMatch Type: Map<Schema.SObjectField, Object> A Map of SObjectFields to required values, to be compared to concrete SObject records Returns SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked sObjectWithId(toMatch) Registers a matcher which will check if the method is called with an SObject Signature public static SObject sObjectWithId(Id toMatch) Parameters toMatch Type: Id The Id to be compared Returns SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked sObjectWithName(toMatch) Registers a matcher which will check if the method is called with an SObject Signature public static SObject sObjectWithName(String toMatch) Parameters toMatch Type: String The name to be compared Returns SObject a dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked stringContains(toMatch) Registers a matcher which will check if the method is called with an arg that matches stringContains Signature public static String stringContains(String toMatch) Parameters toMatch Type: String The substring to be compared Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. stringEndsWith(toMatch) Registers a matcher which will check if the method is called with an arg that matches stringEndsWith Signature public static String stringEndsWith(String toMatch) Parameters toMatch Type: String The substring to be compared Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. stringIsBlank() Registers a matcher which will check if the method is called with an arg that matches stringIsBlank Signature public static String stringIsBlank() Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. stringIsNotBlank() Registers a matcher which will check if the method is called with an arg that matches stringIsNotBlank Signature public static String stringIsNotBlank() Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. stringMatches(regEx) Registers a matcher which will check if the method is called with an arg that matches stringMatches Signature public static String stringMatches(String regEx) Parameters regEx Type: String The regex String to be compared Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. stringStartsWith(toMatch) Registers a matcher which will check if the method is called with an arg that matches stringStartsWith Signature public static String stringStartsWith(String toMatch) Parameters toMatch Type: String The substring to be compared Returns String A dummy object of the correct type, so that when called inline as part of a method call, the correct method is invoked. validateArgs(methodArg, targetMatchers) Signature private static void validateArgs(fflib_MethodArgValues methodArg, List<fflib_IMatcher> targetMatchers)"
    },
    {
        "title": "fflib_MatcherDefinitions",
        "fileName": "fflib_MatcherDefinitions.html",
        "text": "fflib_MatcherDefinitions Copyright(c) 2014-2017, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public with sharing class fflib_MatcherDefinitions fflib_MatcherDefinitions Properties Name Signature Description Connective public Enum Connective Connective - Enum representing the possible operators for the Combined matcher. Possible values: ALL, AT_LEAST_ONE, NONE fflib_MatcherDefinitions Methods sObjectMatches(sobj, toMatch) helper for the sObjectWith, sObjectsWith matchers Compares to see if the field values in toMatch exist in the sobj stringify(value) validateNotNull(arg) sObjectMatches(sobj, toMatch) helper for the sObjectWith, sObjectsWith matchers Compares to see if the field values in toMatch exist in the sobj Signature private static Boolean sObjectMatches(Sobject sobj, map<Schema.SobjectField,Object> toMatch) stringify(value) Signature public static String stringify(Object value) validateNotNull(arg) Signature private static Object validateNotNull(Object arg) fflib_MatcherDefinitions.AnyBoolean AnyBoolean matcher: checks if the supplied argument is an instance of a Boolean Signature public class AnyBoolean implements fflib_IMatcher fflib_MatcherDefinitions.AnyBoolean Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyDate AnyDate matcher: checks if the supplied argument is an instance of a Date Signature public class AnyDate implements fflib_IMatcher fflib_MatcherDefinitions.AnyDate Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyDatetime AnyDatetime matcher: checks if the supplied argument is an instance of a Datetime Signature public class AnyDatetime implements fflib_IMatcher fflib_MatcherDefinitions.AnyDatetime Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyDecimal AnyDecimal matcher: checks if the supplied argument is an instance of a Decimal Signature public class AnyDecimal implements fflib_IMatcher fflib_MatcherDefinitions.AnyDecimal Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyDouble AnyDouble matcher: checks if the supplied argument is an instance of a Double Signature public class AnyDouble implements fflib_IMatcher fflib_MatcherDefinitions.AnyDouble Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyFieldSet AnyFieldSet matcher: checks if the supplied argument is an instance of a FieldSet Signature public class AnyFieldSet implements fflib_IMatcher fflib_MatcherDefinitions.AnyFieldSet Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyId AnyId matcher: checks if the supplied argument is an instance of an Id Signature public class AnyId implements fflib_IMatcher fflib_MatcherDefinitions.AnyId Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyInteger AnyInteger matcher: checks if the supplied argument is an instance of an Integer Signature public class AnyInteger implements fflib_IMatcher fflib_MatcherDefinitions.AnyInteger Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyList AnyList matcher: checks if the supplied argument is an instance of a List Signature public class AnyList implements fflib_IMatcher fflib_MatcherDefinitions.AnyList Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyLong AnyLong matcher: checks if the supplied argument is an instance of a Long Signature public class AnyLong implements fflib_IMatcher fflib_MatcherDefinitions.AnyLong Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyObject AnyObject matcher: checks if the supplied argument is an instance of an Object Signature public class AnyObject implements fflib_IMatcher fflib_MatcherDefinitions.AnyObject Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnySObject AnySObject matcher: checks if the supplied argument is an instance of an SObject Signature public class AnySObject implements fflib_IMatcher fflib_MatcherDefinitions.AnySObject Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnySObjectField AnySObjectField matcher: checks if the supplied argument is an instance of an SObjectField Signature public class AnySObjectField implements fflib_IMatcher fflib_MatcherDefinitions.AnySObjectField Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnySObjectType AnySObjectType matcher: checks if the supplied argument is an instance of an SObjectType Signature public class AnySObjectType implements fflib_IMatcher fflib_MatcherDefinitions.AnySObjectType Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.AnyString AnyString matcher: checks if the supplied argument is an instance of a String Signature public class AnyString implements fflib_IMatcher fflib_MatcherDefinitions.AnyString Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.Combined Combined matcher: compares the supplied argument matches one, all or none of the internal matchers Signature public class Combined implements fflib_IMatcher fflib_MatcherDefinitions.Combined Properties Name Signature connectiveExpression private Connective connectiveExpression internalMatchers private List<fflib_IMatcher> internalMatchers fflib_MatcherDefinitions.Combined Constructors Combined(connectiveExpression, internalMatchers) Combined constructor Combined(connectiveExpression, internalMatchers) Combined constructor Signature public Combined(Connective connectiveExpression, List<fflib_IMatcher> internalMatchers) Parameters connectiveExpression Type: Connective Controls the combination mode, i.e. if we need to match all, any or none of the inner matchers internalMatchers Type: List<fflib_IMatcher> An ordered list of the internal matchers to be combined Returns fflib_MatcherDefinitions.Combined A new Combined instance fflib_MatcherDefinitions.Combined Methods matches(arg) toString() validate(connectiveExpression) validate(innerMatchers) matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() validate(connectiveExpression) Signature private Connective validate(Connective connectiveExpression) validate(innerMatchers) Signature private List<fflib_IMatcher>  validate(List<fflib_IMatcher> innerMatchers) fflib_MatcherDefinitions.DatetimeAfter DatetimeAfter matcher: checks if the supplied argument is after a specified datetime Signature public class DatetimeAfter implements fflib_IMatcher fflib_MatcherDefinitions.DatetimeAfter Properties Name Signature fromDatetime private Datetime fromDatetime inclusive private Boolean inclusive fflib_MatcherDefinitions.DatetimeAfter Constructors DatetimeAfter(fromDatetime, inclusive) DatetimeAfter constructor DatetimeAfter(fromDatetime, inclusive) DatetimeAfter constructor Signature public DatetimeAfter(Datetime fromDatetime, Boolean inclusive) Parameters fromDatetime Type: Datetime The datetime to be compared inclusive Type: Boolean Whether or not dates equal to the fromDatetime should be considered a match Returns fflib_MatcherDefinitions.DatetimeAfter A new DatetimeAfter instance fflib_MatcherDefinitions.DatetimeAfter Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.DatetimeBefore DatetimeBefore matcher: checks if the supplied argument is before a specified datetime Signature public class DatetimeBefore implements fflib_IMatcher fflib_MatcherDefinitions.DatetimeBefore Properties Name Signature inclusive private Boolean inclusive toDatetime private Datetime toDatetime fflib_MatcherDefinitions.DatetimeBefore Constructors DatetimeBefore(toDatetime, inclusive) DatetimeBefore constructor DatetimeBefore(toDatetime, inclusive) DatetimeBefore constructor Signature public DatetimeBefore(Datetime toDatetime, Boolean inclusive) Parameters toDatetime Type: Datetime The datetime to be compared inclusive Type: Boolean Whether or not dates equal to the toDatetime should be considered a match Returns fflib_MatcherDefinitions.DatetimeBefore A new DatetimeBefore instance fflib_MatcherDefinitions.DatetimeBefore Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.DatetimeBetween DatetimeBetween matcher: checks if the supplied argument is between two specified datetimes Signature public class DatetimeBetween implements fflib_IMatcher fflib_MatcherDefinitions.DatetimeBetween Properties Name Signature fromDatetime private Datetime fromDatetime inclusiveFrom private Boolean inclusiveFrom inclusiveTo private Boolean inclusiveTo toDatetime private Datetime toDatetime fflib_MatcherDefinitions.DatetimeBetween Constructors DatetimeBetween(fromDatetime, inclusiveFrom, toDatetime, inclusiveTo) DatetimeBetween constructor DatetimeBetween(fromDatetime, inclusiveFrom, toDatetime, inclusiveTo) DatetimeBetween constructor Signature public DatetimeBetween(Datetime fromDatetime, Boolean inclusiveFrom, Datetime toDatetime, Boolean inclusiveTo) Parameters fromDatetime Type: Datetime The lower bound datetime to be compared inclusiveFrom Type: Boolean Whether or not dates equal to the fromDatetime should be considered a match toDatetime Type: Datetime The upper bound dateetime to be compared inclusiveTo Type: Boolean Whether or not dates equal to the toDatetime should be considered a match Returns fflib_MatcherDefinitions.DatetimeBetween A new DatetimeBetween instance fflib_MatcherDefinitions.DatetimeBetween Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.DecimalBetween DecimalBetween matcher: checks if the supplied argument is between two specified decimals Signature public class DecimalBetween implements fflib_IMatcher fflib_MatcherDefinitions.DecimalBetween Properties Name Signature inclusiveLower private Boolean inclusiveLower inclusiveUpper private Boolean inclusiveUpper lower private Decimal lower upper private Decimal upper fflib_MatcherDefinitions.DecimalBetween Constructors DecimalBetween(lower, inclusiveLower, upper, inclusiveUpper) DecimalBetween constructor DecimalBetween(lower, inclusiveLower, upper, inclusiveUpper) DecimalBetween constructor Signature public DecimalBetween(Decimal lower, Boolean inclusiveLower, Decimal upper, Boolean inclusiveUpper) Parameters lower Type: Decimal The lower bound number to be compared inclusiveLower Type: Boolean Whether or not numbers equal to lower should be considered a match upper Type: Decimal The upper bound number to be compared inclusiveUpper Type: Boolean Whether or not numbers equal to upper should be considered a match Returns fflib_MatcherDefinitions.DecimalBetween A new DecimalBetween instance fflib_MatcherDefinitions.DecimalBetween Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.DecimalLessThan DecimalLessThan matcher: checks if the supplied argument is less than a specified decimal Signature public class DecimalLessThan implements fflib_IMatcher fflib_MatcherDefinitions.DecimalLessThan Properties Name Signature inclusive private Boolean inclusive toMatch private Decimal toMatch fflib_MatcherDefinitions.DecimalLessThan Constructors DecimalLessThan(toMatch, inclusive) DecimalLessThan constructor DecimalLessThan(toMatch, inclusive) DecimalLessThan constructor Signature public DecimalLessThan(Decimal toMatch, Boolean inclusive) Parameters toMatch Type: Decimal The number to be compared against inclusive Type: Boolean Whether or not numbers equal to toMatch should be considered a match Returns fflib_MatcherDefinitions.DecimalLessThan A new DecimalLessThan instance fflib_MatcherDefinitions.DecimalLessThan Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.DecimalMoreThan DecimalMoreThan matcher: checks if the supplied argument is greater than a specified decimal Signature public class DecimalMoreThan implements fflib_IMatcher fflib_MatcherDefinitions.DecimalMoreThan Properties Name Signature inclusive private Boolean inclusive toMatch private Decimal toMatch fflib_MatcherDefinitions.DecimalMoreThan Constructors DecimalMoreThan(toMatch, inclusive) DecimalMoreThan constructor DecimalMoreThan(toMatch, inclusive) DecimalMoreThan constructor Signature public DecimalMoreThan(Decimal toMatch, Boolean inclusive) Parameters toMatch Type: Decimal The number to be compared against inclusive Type: Boolean Whether or not numbers equal to toMatch should be considered a match Returns fflib_MatcherDefinitions.DecimalMoreThan A new DecimalMoreThan instance fflib_MatcherDefinitions.DecimalMoreThan Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.Eq Eq matcher: checks if the supplied argument is equal(==) to a specified object Signature public class Eq implements fflib_IMatcher fflib_MatcherDefinitions.Eq Properties Name Signature toMatch private Object toMatch fflib_MatcherDefinitions.Eq Constructors Eq(toMatch) Eq constructor Eq(toMatch) Eq constructor Signature public Eq(Object toMatch) Parameters toMatch Type: Object The object to be compared Returns fflib_MatcherDefinitions.Eq A new Eq instance fflib_MatcherDefinitions.Eq Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.FieldSetEquivalentTo FIELDSET MATCHERS Signature public class FieldSetEquivalentTo implements fflib_IMatcher fflib_MatcherDefinitions.FieldSetEquivalentTo Properties Name Signature toMatch private final Set<Schema.FieldSetMember> toMatch fflib_MatcherDefinitions.FieldSetEquivalentTo Constructors FieldSetEquivalentTo() FieldSetEquivalentTo(toMatch) FieldSetEquivalentTo() Signature @TestVisible public FieldSetEquivalentTo() FieldSetEquivalentTo(toMatch) Signature public FieldSetEquivalentTo(Schema.FieldSet toMatch) fflib_MatcherDefinitions.FieldSetEquivalentTo Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.IsNotNull IsNotNull matcher: checks the supplied argument is not null Signature public class IsNotNull implements fflib_IMatcher fflib_MatcherDefinitions.IsNotNull Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.IsNull IsNull matcher: checks the supplied argument is null Signature public class IsNull implements fflib_IMatcher fflib_MatcherDefinitions.IsNull Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.ListContains ListContains matcher: checks if the supplied argument is equal(==) to any of the elements in a specified list Signature public class ListContains implements fflib_IMatcher fflib_MatcherDefinitions.ListContains Properties Name Signature toMatch private Object toMatch fflib_MatcherDefinitions.ListContains Constructors ListContains(toMatch) ListContains constructor ListContains(toMatch) ListContains constructor Signature public ListContains(Object toMatch) Parameters toMatch Type: Object The list of objects to be compared Returns fflib_MatcherDefinitions.ListContains A new ListContains instance fflib_MatcherDefinitions.ListContains Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.ListIsEmpty ListIsEmpty matcher: checks if the supplied argument is an empty list Signature public class ListIsEmpty implements fflib_IMatcher fflib_MatcherDefinitions.ListIsEmpty Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.RefEq RefEq matcher: checks if the supplied argument is a reference to the same object(===) as a specified object Signature public class RefEq implements fflib_IMatcher fflib_MatcherDefinitions.RefEq Properties Name Signature toMatch private Object toMatch fflib_MatcherDefinitions.RefEq Constructors RefEq(toMatch) RefEq constructor RefEq(toMatch) RefEq constructor Signature public RefEq(Object toMatch) Parameters toMatch Type: Object The object to be compared Returns fflib_MatcherDefinitions.RefEq A new RefEq instance fflib_MatcherDefinitions.RefEq Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.SObjectOfType SObjectOfType matcher: checks if the supplied argument has the specified SObjectType Signature public class SObjectOfType implements fflib_IMatcher fflib_MatcherDefinitions.SObjectOfType Properties Name Signature objectType private Schema.SObjectType objectType fflib_MatcherDefinitions.SObjectOfType Constructors SObjectOfType(objectType) SObjectOfType constructor SObjectOfType(objectType) SObjectOfType constructor Signature public SObjectOfType(Schema.SObjectType objectType) Parameters objectType Type: Schema.SObjectType The SObjectType to be compared Returns fflib_MatcherDefinitions.SObjectOfType A new SObjectOfType instance fflib_MatcherDefinitions.SObjectOfType Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.SObjectsWith SObjectsWith matcher: compares the supplied list<Sobject> argument against a list<Map<Schema.SObjectField, Object>>, representing fields and their expected values. Each list element represents one Sobject in a list supplied to a mocked method that accepts list<SObject>. Each list element that is a map<Schema.SobjectField,Object> is compared against the equivalent argument list element position Example: You use uow.registerNew(someListofAccounts). You mock uow in the testmethod. toMatch is new list<Schema.SObjectField,Object> { new map<Schema.SobjectField,Object> {Account.Name => 'foo'}, new map<Schema.SobjectField,Object> {Account.Name => 'bar'} } By default, matchers compare against argument elements in order, viz: The matcher will compare the first Account in the list passed to uow.registerNew to the first map of field values(i.e. Account[0].Name must be 'foo') The matcher then compares the second Account in the list passed to uow.registerNew to the second map of field values(i.e. Account[1].Name must be 'bar') Optional second argument matchInOrderr if false means that each argument element is compared against all matcher elements if everuy argument is matched exactly once and no matcher matches more than once, then the match is true If the arity of the list passed in the mocked method doesn't agree with the arity of the map of expected field values, false is returned Note. this method silently catches exceptions getting values for the supplied fields from the arguments supplied in method calls. If your matcher is mysteriously failing for your SObject record, it may be getting silent 'SObject row was retrieved via SOQL without querying the requested field' exceptions, because you haven't queried all of the fields used in this matcher. Signature public class SObjectsWith implements fflib_IMatcher fflib_MatcherDefinitions.SObjectsWith Properties Name Signature matchInOrder private Boolean matchInOrder toMatch private list<Map<Schema.SObjectField, Object>> toMatch fflib_MatcherDefinitions.SObjectsWith Constructors SObjectsWith(toMatch, matchInOrder) SObjectsWith constructor SObjectsWith(toMatch) SObjectsWith(toMatch, matchInOrder) SObjectsWith constructor Signature public SObjectsWith(list<Map<Schema.SObjectField, Object>> toMatch, Boolean matchInOrder) Parameters toMatch Type: list<Map<Schema.SObjectField, Object>> A list of maps of fields to their values to be compared. We compare each of these fields against the supplied list of sobject's field values. Returns fflib_MatcherDefinitions.SObjectWith A new SObjectWith instance SObjectsWith(toMatch) Signature public SObjectsWith(list<Map<Schema.SObjectField, Object>> toMatch) fflib_MatcherDefinitions.SObjectsWith Methods matches(arg) toString() validate(arg) matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() validate(arg) Signature private list<Map<Schema.SObjectField, Object>> validate(list<Map<Schema.SObjectField, Object>> arg) fflib_MatcherDefinitions.SObjectWith SObjectWith matcher: compares the supplied argument against a Map<Schema.SObjectField, Object>, representing fields and their expected values. Note. this method silently catches exceptions getting values for the supplied fields from the arguments supplied in method calls. If your matcher is mysteriously failing for your SObject record, it may be getting silent 'SObject row was retrieved via SOQL without querying the requested field' exceptions, because you haven't queried all of the fields used in this matcher. Signature public class SObjectWith implements fflib_IMatcher fflib_MatcherDefinitions.SObjectWith Properties Name Signature toMatch private Map<Schema.SObjectField, Object> toMatch fflib_MatcherDefinitions.SObjectWith Constructors SObjectWith(toMatch) SObjectWith constructor SObjectWith(toMatch) SObjectWith constructor Signature public SObjectWith(Map<Schema.SObjectField, Object> toMatch) Parameters toMatch Type: Map<Schema.SObjectField, Object> A map of fields to their values to be compared. We compare each of these fields against the supplied sobject's field values. Returns fflib_MatcherDefinitions.SObjectWith A new SObjectWith instance fflib_MatcherDefinitions.SObjectWith Methods matches(arg) toString() validate(arg) matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() validate(arg) Signature private Map<Schema.SObjectField, Object> validate(Map<Schema.SObjectField, Object> arg) fflib_MatcherDefinitions.SObjectWithId SObjectWithId matcher: checks if the supplied argument has the specified Id Signature public class SObjectWithId implements fflib_IMatcher fflib_MatcherDefinitions.SObjectWithId Properties Name Signature toMatch private Id toMatch fflib_MatcherDefinitions.SObjectWithId Constructors SObjectWithId(toMatch) SObjectWithId constructor SObjectWithId(toMatch) SObjectWithId constructor Signature public SObjectWithId(Id toMatch) Parameters toMatch Type: Id The Id to be compared Returns fflib_MatcherDefinitions.SObjectWithId A new SObjectWithId instance fflib_MatcherDefinitions.SObjectWithId Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.SObjectWithName SObjectWithName matcher: checks if the supplied argument has the specified Name Signature public class SObjectWithName implements fflib_IMatcher fflib_MatcherDefinitions.SObjectWithName Properties Name Signature toMatch private String toMatch fflib_MatcherDefinitions.SObjectWithName Constructors SObjectWithName(toMatch) SObjectWithName constructor SObjectWithName(toMatch) SObjectWithName constructor Signature public SObjectWithName(String toMatch) Parameters toMatch Type: String The name to be compared Returns fflib_MatcherDefinitions.SObjectWithName A new SObjectWithName instance fflib_MatcherDefinitions.SObjectWithName Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.StringContains StringContains matcher: checks if the supplied argument contains the specified substring Signature public class StringContains implements fflib_IMatcher fflib_MatcherDefinitions.StringContains Properties Name Signature toMatch private String toMatch fflib_MatcherDefinitions.StringContains Constructors StringContains(toMatch) StringContains constructor StringContains(toMatch) StringContains constructor Signature public StringContains(String toMatch) Parameters toMatch Type: String The substring to be compared Returns fflib_MatcherDefinitions.StringContains A new StringContains instance fflib_MatcherDefinitions.StringContains Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.StringEndsWith StringEndsWith matcher: checks if the supplied argument ends with the specified substring Signature public class StringEndsWith implements fflib_IMatcher fflib_MatcherDefinitions.StringEndsWith Properties Name Signature toMatch private String toMatch fflib_MatcherDefinitions.StringEndsWith Constructors StringEndsWith(toMatch) StringEndsWith constructor StringEndsWith(toMatch) StringEndsWith constructor Signature public StringEndsWith(String toMatch) Parameters toMatch Type: String The substring to be compared Returns fflib_MatcherDefinitions.StringEndsWith A new StringEndsWith instance fflib_MatcherDefinitions.StringEndsWith Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.StringIsBlank StringIsBlank matcher: checks if the supplied argument is a blank String Signature public class StringIsBlank implements fflib_IMatcher fflib_MatcherDefinitions.StringIsBlank Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.StringIsNotBlank StringIsNotBlank matcher: checks if the supplied argument is a non-blank string Signature public class StringIsNotBlank implements fflib_IMatcher fflib_MatcherDefinitions.StringIsNotBlank Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.StringMatches StringMatches matcher: checks if the supplied argument matches the specified regex expression Signature public class StringMatches implements fflib_IMatcher fflib_MatcherDefinitions.StringMatches Properties Name Signature pat private Pattern pat regEx private final String regEx fflib_MatcherDefinitions.StringMatches Constructors StringMatches(regEx) StringMatches constructor StringMatches(regEx) StringMatches constructor Signature public StringMatches(String regEx) Parameters toMatch The substring to be compared Returns fflib_MatcherDefinitions.StringMatches A new StringMatches instance fflib_MatcherDefinitions.StringMatches Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString() fflib_MatcherDefinitions.StringStartsWith StringStartsWith matcher: checks if the supplied argument starts with the specified substring Signature public class StringStartsWith implements fflib_IMatcher fflib_MatcherDefinitions.StringStartsWith Properties Name Signature toMatch private String toMatch fflib_MatcherDefinitions.StringStartsWith Constructors StringStartsWith(toMatch) StringStartsWith constructor StringStartsWith(toMatch) StringStartsWith constructor Signature public StringStartsWith(String toMatch) Parameters toMatch Type: String The substring to be compared Returns fflib_MatcherDefinitions.StringStartsWith A new StringStartsWith instance fflib_MatcherDefinitions.StringStartsWith Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString()"
    },
    {
        "title": "fflib_MatcherDefinitionsTest",
        "fileName": "fflib_MatcherDefinitionsTest.html",
        "text": "fflib_MatcherDefinitionsTest Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest public class fflib_MatcherDefinitionsTest fflib_MatcherDefinitionsTest Properties Name Signature ACCOUNT_OBJECT_TYPE private static final Schema.SObjectType ACCOUNT_OBJECT_TYPE ACCOUNT_RECORD private static final SObject ACCOUNT_RECORD GROUP_OBJECT_TYPE private static final Schema.SobjectType GROUP_OBJECT_TYPE GROUP_RECORDS private static final Sobject[] GROUP_RECORDS INTERNAL_MATCHERS private static final List<fflib_IMatcher> INTERNAL_MATCHERS NOW private static final Datetime NOW OPPORTUNITY_OBJECT_TYPE private static final Schema.SObjectType OPPORTUNITY_OBJECT_TYPE TODAY private static final Date TODAY fflib_MatcherDefinitionsTest Methods constructDatetimeAfter_WithNullFromDatetime_ThrowsException() constructDatetimeAfter_WithNullInclusive_ThrowsException() constructDatetimeBefore_WithNullInclusive_ThrowsException() constructDatetimeBefore_WithNullToDatetime_ThrowsException() constructDatetimeBetween_WithNullFromDatetime_ThrowsException() constructDatetimeBetween_WithNullInclusiveFrom_ThrowsException() constructDatetimeBetween_WithNullInclusiveTo_ThrowsException() constructDatetimeBetween_WithNullToDatetime_ThrowsException() constructDecimalBetween_WithNullInclusiveLower_ThrowsException() constructDecimalBetween_WithNullInclusiveUpper_ThrowsException() constructDecimalBetween_WithNullLower_ThrowsException() constructDecimalBetween_WithNullUpper_ThrowsException() constructDecimalLessThan_WithNullInclusive_ThrowsException() constructDecimalLessThan_WithNullToMatch_ThrowsException() constructDecimalMoreThan_WithNullInclusive_ThrowsException() constructDecimalMoreThan_WithNullToMatch_ThrowsException() constructEq_WithNullArg_ThrowsException() constructFieldSetEquivalentTo_WithNullFieldSet_ThrowsException() constructRefEq_WithNullArg_ThrowsException() constructSObjectOfType_WithNullArg_ThrowsException() constructSObjectsWith_WithNullArg_ThrowsException() constructSObjectWith_WithEmptyArg_ThrowsException() constructSObjectWith_WithNullArg_ThrowsException() constructSObjectWithId_WithNullArg_ThrowsException() constructSObjectWithName_WithNullArg_ThrowsException() constructStringContains_WithNullArg_ThrowsException() constructStringEndsWith_WithNullArg_ThrowsException() constructStringMatches_WithNullArg_ThrowsException() constructStringStartsWith_WithNullArg_ThrowsException() whenAnyBooleanMatchesShouldReturnCorrectResults() whenAnyBooleanToStringReturnsExpectedString() whenAnyDateMatchesShouldReturnCorrectResults() whenAnyDatetimeMatchesShouldReturnCorrectResults() whenAnyDatetimeToStringReturnsExpectedString() whenAnyDateToStringReturnsExpectedString() whenAnyDecimalMatchesShouldReturnCorrectResults() whenAnyDecimalToStringReturnsExpectedString() whenAnyDoubleMatchesShouldReturnCorrectResults() whenAnyDoubleToStringReturnsExpectedString() whenAnyFieldSetMatchesShouldReturnCorrectResults() whenAnyFieldSetToStringReturnsExpectedString() whenAnyIdMatchesShouldReturnCorrectResults() whenAnyIdToStringReturnsExpectedString() whenAnyIntegerMatchesShouldReturnCorrectResults() whenAnyIntegerToStringReturnsExpectedString() whenAnyListMatchesShouldReturnCorrectResults() whenAnyListToStringReturnsExpectedString() whenAnyLongMatchesShouldReturnCorrectResults() whenAnyLongToStringReturnsExpectedString() whenAnyObjectMatchesShouldReturnCorrectResults() whenAnyObjectToStringReturnsExpectedString() whenAnySObjectFieldMatchesShouldReturnCorrectResults() whenAnySObjectFieldToStringReturnsExpectedString() whenAnySObjectMatchesShouldReturnCorrectResults() whenAnySObjectToStringReturnsExpectedString() whenAnySObjectTypeMatchesShouldReturnCorrectResults() whenAnySObjectTypeToStringReturnsExpectedString() whenAnyStringMatchesShouldReturnCorrectResults() whenAnyStringToStringReturnsExpectedString() whenCombinedMatcherToStringReturnsExpectedString() whenCombinedMatchesWithAllExpressionShouldReturnCorrectResults() whenCombinedMatchesWithAtLeastOneExpressionShouldReturnCorrectResults() whenCombinedMatchesWithNoneExpressionShouldReturnCorrectResults() whenConstructingCombinedWithEmptyInternalMatchersShouldThrowException() whenConstructingCombinedWithNullConnectiveExpressionShouldThrowException() whenConstructingCombinedWithNullInternalMatchersShouldThrowException() whenDatetimeAfterMatchesWithInclusiveShouldReturnCorrectResults() whenDatetimeAfterMatchesWithoutInclusiveShouldReturnCorrectResults() whenDatetimeAfterWithInclusiveToStringReturnsExpectedString() whenDatetimeAfterWithNotInclusiveToStringReturnsExpectedString() whenDatetimeBeforeMatchesWithInclusiveShouldReturnCorrectResults() whenDatetimeBeforeMatchesWithoutInclusiveShouldReturnCorrectResults() whenDatetimeBeforeWithInclusiveToStringReturnsExpectedString() whenDatetimeBeforeWithNotInclusiveToStringReturnsExpectedString() whenDatetimeBetweenMatchesWithInclusiveFromWithoutInclusiveToShouldReturnCorrectResults() whenDatetimeBetweenMatchesWithInclusiveToWithoutInclusiveFromShouldReturnCorrectResults() whenDatetimeBetweenWithInclusiveToStringReturnsExpectedString() whenDatetimeBetweenWithNotInclusiveToStringReturnsExpectedString() whenDecimalBetweenMatchesShouldReturnCorrectResults() whenDecimalBetweenToStringReturnsExpectedString() whenDecimalLessThanMatchesShouldReturnCorrectResults() whenDecimalLessThanToStringReturnsExpectedString() whenDecimalMoreThanMatchesShouldReturnCorrectResults() whenDecimalMoreThanToStringReturnsExpectedString() whenEqMatchesShouldReturnCorrectResults() whenEqToStringShouldReturnExpectedString() whenFieldSetEquivalentToMatchesShouldReturnCorrectResults() whenFieldSetEquivalentToToStringReturnsExpectedString() whenFieldSetEquivalentToWithoutFieldSetShouldNeverMatch() whenIsBlankWithMatchesShouldReturnCorrectResults() whenIsNotBlankWithMatchesShouldReturnCorrectResults() whenIsNotNullMatchesShouldReturnCorrectResults() whenIsNotNullToStringReturnsExpectedString() whenIsNullMatchesShouldReturnCorrectResults() whenIsNullToStringReturnsExpectedString() whenJSONExceptionOccursStringifyShouldReturnsObjectToString() whenListContainsMatchesShouldReturnCorrectResults() whenListContainsToStringReturnsExpectedString() whenListIsEmptyMatchesShouldReturnCorrectResults() whenListIsEmptyToStringReturnsExpectedString() whenRefEqMatchesShouldReturnCorrectResults() whenRefEqToStringReturnsExpectedString() whenSObjectOfTypeMatchesShouldReturnCorrectResults() whenSObjectOfTypeToStringReturnsExpectedString() whenSObjectsInAnyOrderWithMatchesShouldReturnCorrectResults() whenSObjectsWithDifferentArityMatchesShouldReturnFalse() whenSObjectsWithInOrderMatchesShouldReturnCorrectResults() whenSObjectsWithToStringReturnsExpectedString() whenSObjectWithIdMatchesShouldReturnCorrectResults() whenSObjectWithIdToStringReturnsExpectedString() whenSObjectWithMatchesShouldReturnCorrectResults() whenSObjectWithNameMatchesShouldReturnCorrectResults() whenSObjectWithNameToStringReturnsExpectedString() whenSObjectWithToStringReturnsExpectedString() whenStringContainsMatchesShouldReturnCorrectResults() whenStringContainsToStringReturnsExpectedStrings() whenStringEndsWithMatchesShouldReturnCorrectResults() whenStringEndsWithToStringReturnsExpectedStrings() whenStringIsBlankToStringReturnsExpectedStrings() whenStringIsNotBlankToStringReturnsExpectedStrings() whenStringMatchesMatchesShouldReturnCorrectResults() whenStringMatchesToStringReturnsExpectedStrings() whenStringStartsWithMatchesShouldReturnCorrectResults() whenStringStartsWithToStringReturnsExpectedStrings() constructDatetimeAfter_WithNullFromDatetime_ThrowsException() Signature @isTest private static void constructDatetimeAfter_WithNullFromDatetime_ThrowsException() constructDatetimeAfter_WithNullInclusive_ThrowsException() Signature @isTest private static void constructDatetimeAfter_WithNullInclusive_ThrowsException() constructDatetimeBefore_WithNullInclusive_ThrowsException() Signature @isTest private static void constructDatetimeBefore_WithNullInclusive_ThrowsException() constructDatetimeBefore_WithNullToDatetime_ThrowsException() Signature @isTest private static void constructDatetimeBefore_WithNullToDatetime_ThrowsException() constructDatetimeBetween_WithNullFromDatetime_ThrowsException() Signature @isTest private static void constructDatetimeBetween_WithNullFromDatetime_ThrowsException() constructDatetimeBetween_WithNullInclusiveFrom_ThrowsException() Signature @isTest private static void constructDatetimeBetween_WithNullInclusiveFrom_ThrowsException() constructDatetimeBetween_WithNullInclusiveTo_ThrowsException() Signature @isTest private static void constructDatetimeBetween_WithNullInclusiveTo_ThrowsException() constructDatetimeBetween_WithNullToDatetime_ThrowsException() Signature @isTest private static void constructDatetimeBetween_WithNullToDatetime_ThrowsException() constructDecimalBetween_WithNullInclusiveLower_ThrowsException() Signature @isTest private static void constructDecimalBetween_WithNullInclusiveLower_ThrowsException() constructDecimalBetween_WithNullInclusiveUpper_ThrowsException() Signature @isTest private static void constructDecimalBetween_WithNullInclusiveUpper_ThrowsException() constructDecimalBetween_WithNullLower_ThrowsException() Signature @isTest private static void constructDecimalBetween_WithNullLower_ThrowsException() constructDecimalBetween_WithNullUpper_ThrowsException() Signature @isTest private static void constructDecimalBetween_WithNullUpper_ThrowsException() constructDecimalLessThan_WithNullInclusive_ThrowsException() Signature @isTest private static void constructDecimalLessThan_WithNullInclusive_ThrowsException() constructDecimalLessThan_WithNullToMatch_ThrowsException() Signature @isTest private static void constructDecimalLessThan_WithNullToMatch_ThrowsException() constructDecimalMoreThan_WithNullInclusive_ThrowsException() Signature @isTest private static void constructDecimalMoreThan_WithNullInclusive_ThrowsException() constructDecimalMoreThan_WithNullToMatch_ThrowsException() Signature @isTest private static void constructDecimalMoreThan_WithNullToMatch_ThrowsException() constructEq_WithNullArg_ThrowsException() Signature @isTest private static void constructEq_WithNullArg_ThrowsException() constructFieldSetEquivalentTo_WithNullFieldSet_ThrowsException() Signature @isTest private static void constructFieldSetEquivalentTo_WithNullFieldSet_ThrowsException() constructRefEq_WithNullArg_ThrowsException() Signature @isTest private static void constructRefEq_WithNullArg_ThrowsException() constructSObjectOfType_WithNullArg_ThrowsException() Signature @isTest private static void constructSObjectOfType_WithNullArg_ThrowsException() constructSObjectsWith_WithNullArg_ThrowsException() Signature @isTest private static void constructSObjectsWith_WithNullArg_ThrowsException() constructSObjectWith_WithEmptyArg_ThrowsException() Signature @isTest private static void constructSObjectWith_WithEmptyArg_ThrowsException() constructSObjectWith_WithNullArg_ThrowsException() Signature @isTest private static void constructSObjectWith_WithNullArg_ThrowsException() constructSObjectWithId_WithNullArg_ThrowsException() Signature @isTest private static void constructSObjectWithId_WithNullArg_ThrowsException() constructSObjectWithName_WithNullArg_ThrowsException() Signature @isTest private static void constructSObjectWithName_WithNullArg_ThrowsException() constructStringContains_WithNullArg_ThrowsException() Signature @isTest private static void constructStringContains_WithNullArg_ThrowsException() constructStringEndsWith_WithNullArg_ThrowsException() Signature @isTest private static void constructStringEndsWith_WithNullArg_ThrowsException() constructStringMatches_WithNullArg_ThrowsException() Signature @isTest private static void constructStringMatches_WithNullArg_ThrowsException() constructStringStartsWith_WithNullArg_ThrowsException() Signature @isTest private static void constructStringStartsWith_WithNullArg_ThrowsException() whenAnyBooleanMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyBooleanMatchesShouldReturnCorrectResults() whenAnyBooleanToStringReturnsExpectedString() Signature @isTest private static void whenAnyBooleanToStringReturnsExpectedString() whenAnyDateMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyDateMatchesShouldReturnCorrectResults() whenAnyDatetimeMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyDatetimeMatchesShouldReturnCorrectResults() whenAnyDatetimeToStringReturnsExpectedString() Signature @isTest private static void whenAnyDatetimeToStringReturnsExpectedString() whenAnyDateToStringReturnsExpectedString() Signature @isTest private static void whenAnyDateToStringReturnsExpectedString() whenAnyDecimalMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyDecimalMatchesShouldReturnCorrectResults() whenAnyDecimalToStringReturnsExpectedString() Signature @isTest private static void whenAnyDecimalToStringReturnsExpectedString() whenAnyDoubleMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyDoubleMatchesShouldReturnCorrectResults() whenAnyDoubleToStringReturnsExpectedString() Signature @isTest private static void whenAnyDoubleToStringReturnsExpectedString() whenAnyFieldSetMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyFieldSetMatchesShouldReturnCorrectResults() whenAnyFieldSetToStringReturnsExpectedString() Signature @isTest private static void whenAnyFieldSetToStringReturnsExpectedString() whenAnyIdMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyIdMatchesShouldReturnCorrectResults() whenAnyIdToStringReturnsExpectedString() Signature @isTest private static void whenAnyIdToStringReturnsExpectedString() whenAnyIntegerMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyIntegerMatchesShouldReturnCorrectResults() whenAnyIntegerToStringReturnsExpectedString() Signature @isTest private static void whenAnyIntegerToStringReturnsExpectedString() whenAnyListMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyListMatchesShouldReturnCorrectResults() whenAnyListToStringReturnsExpectedString() Signature @isTest private static void whenAnyListToStringReturnsExpectedString() whenAnyLongMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyLongMatchesShouldReturnCorrectResults() whenAnyLongToStringReturnsExpectedString() Signature @isTest private static void whenAnyLongToStringReturnsExpectedString() whenAnyObjectMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyObjectMatchesShouldReturnCorrectResults() whenAnyObjectToStringReturnsExpectedString() Signature @isTest private static void whenAnyObjectToStringReturnsExpectedString() whenAnySObjectFieldMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnySObjectFieldMatchesShouldReturnCorrectResults() whenAnySObjectFieldToStringReturnsExpectedString() Signature @isTest private static void whenAnySObjectFieldToStringReturnsExpectedString() whenAnySObjectMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnySObjectMatchesShouldReturnCorrectResults() whenAnySObjectToStringReturnsExpectedString() Signature @isTest private static void whenAnySObjectToStringReturnsExpectedString() whenAnySObjectTypeMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnySObjectTypeMatchesShouldReturnCorrectResults() whenAnySObjectTypeToStringReturnsExpectedString() Signature @isTest private static void whenAnySObjectTypeToStringReturnsExpectedString() whenAnyStringMatchesShouldReturnCorrectResults() Signature @isTest private static void whenAnyStringMatchesShouldReturnCorrectResults() whenAnyStringToStringReturnsExpectedString() Signature @isTest private static void whenAnyStringToStringReturnsExpectedString() whenCombinedMatcherToStringReturnsExpectedString() Signature @isTest private static void whenCombinedMatcherToStringReturnsExpectedString() whenCombinedMatchesWithAllExpressionShouldReturnCorrectResults() Signature @isTest private static void whenCombinedMatchesWithAllExpressionShouldReturnCorrectResults() whenCombinedMatchesWithAtLeastOneExpressionShouldReturnCorrectResults() Signature @isTest private static void whenCombinedMatchesWithAtLeastOneExpressionShouldReturnCorrectResults() whenCombinedMatchesWithNoneExpressionShouldReturnCorrectResults() Signature @isTest private static void whenCombinedMatchesWithNoneExpressionShouldReturnCorrectResults() whenConstructingCombinedWithEmptyInternalMatchersShouldThrowException() Signature @isTest private static void whenConstructingCombinedWithEmptyInternalMatchersShouldThrowException() whenConstructingCombinedWithNullConnectiveExpressionShouldThrowException() Signature @isTest private static void whenConstructingCombinedWithNullConnectiveExpressionShouldThrowException() whenConstructingCombinedWithNullInternalMatchersShouldThrowException() Signature @isTest private static void whenConstructingCombinedWithNullInternalMatchersShouldThrowException() whenDatetimeAfterMatchesWithInclusiveShouldReturnCorrectResults() Signature @isTest private static void whenDatetimeAfterMatchesWithInclusiveShouldReturnCorrectResults() whenDatetimeAfterMatchesWithoutInclusiveShouldReturnCorrectResults() Signature @isTest private static void whenDatetimeAfterMatchesWithoutInclusiveShouldReturnCorrectResults() whenDatetimeAfterWithInclusiveToStringReturnsExpectedString() Signature @isTest private static void whenDatetimeAfterWithInclusiveToStringReturnsExpectedString() whenDatetimeAfterWithNotInclusiveToStringReturnsExpectedString() Signature @isTest private static void whenDatetimeAfterWithNotInclusiveToStringReturnsExpectedString() whenDatetimeBeforeMatchesWithInclusiveShouldReturnCorrectResults() Signature @isTest private static void whenDatetimeBeforeMatchesWithInclusiveShouldReturnCorrectResults() whenDatetimeBeforeMatchesWithoutInclusiveShouldReturnCorrectResults() Signature @isTest private static void whenDatetimeBeforeMatchesWithoutInclusiveShouldReturnCorrectResults() whenDatetimeBeforeWithInclusiveToStringReturnsExpectedString() Signature @isTest private static void whenDatetimeBeforeWithInclusiveToStringReturnsExpectedString() whenDatetimeBeforeWithNotInclusiveToStringReturnsExpectedString() Signature @isTest private static void whenDatetimeBeforeWithNotInclusiveToStringReturnsExpectedString() whenDatetimeBetweenMatchesWithInclusiveFromWithoutInclusiveToShouldReturnCorrectResults() Signature @isTest private static void whenDatetimeBetweenMatchesWithInclusiveFromWithoutInclusiveToShouldReturnCorrectResults() whenDatetimeBetweenMatchesWithInclusiveToWithoutInclusiveFromShouldReturnCorrectResults() Signature @isTest private static void whenDatetimeBetweenMatchesWithInclusiveToWithoutInclusiveFromShouldReturnCorrectResults() whenDatetimeBetweenWithInclusiveToStringReturnsExpectedString() Signature @isTest private static void whenDatetimeBetweenWithInclusiveToStringReturnsExpectedString() whenDatetimeBetweenWithNotInclusiveToStringReturnsExpectedString() Signature @isTest private static void whenDatetimeBetweenWithNotInclusiveToStringReturnsExpectedString() whenDecimalBetweenMatchesShouldReturnCorrectResults() Signature @isTest private static void whenDecimalBetweenMatchesShouldReturnCorrectResults() whenDecimalBetweenToStringReturnsExpectedString() Signature @isTest private static void whenDecimalBetweenToStringReturnsExpectedString() whenDecimalLessThanMatchesShouldReturnCorrectResults() Signature @isTest private static void whenDecimalLessThanMatchesShouldReturnCorrectResults() whenDecimalLessThanToStringReturnsExpectedString() Signature @isTest private static void whenDecimalLessThanToStringReturnsExpectedString() whenDecimalMoreThanMatchesShouldReturnCorrectResults() Signature @isTest private static void whenDecimalMoreThanMatchesShouldReturnCorrectResults() whenDecimalMoreThanToStringReturnsExpectedString() Signature @isTest private static void whenDecimalMoreThanToStringReturnsExpectedString() whenEqMatchesShouldReturnCorrectResults() Signature @isTest private static void whenEqMatchesShouldReturnCorrectResults() whenEqToStringShouldReturnExpectedString() Signature @isTest private static void whenEqToStringShouldReturnExpectedString() whenFieldSetEquivalentToMatchesShouldReturnCorrectResults() Signature @isTest private static void whenFieldSetEquivalentToMatchesShouldReturnCorrectResults() whenFieldSetEquivalentToToStringReturnsExpectedString() Signature @isTest private static void whenFieldSetEquivalentToToStringReturnsExpectedString() whenFieldSetEquivalentToWithoutFieldSetShouldNeverMatch() Signature @isTest private static void whenFieldSetEquivalentToWithoutFieldSetShouldNeverMatch() whenIsBlankWithMatchesShouldReturnCorrectResults() Signature @isTest private static void whenIsBlankWithMatchesShouldReturnCorrectResults() whenIsNotBlankWithMatchesShouldReturnCorrectResults() Signature @isTest private static void whenIsNotBlankWithMatchesShouldReturnCorrectResults() whenIsNotNullMatchesShouldReturnCorrectResults() Signature @isTest private static void whenIsNotNullMatchesShouldReturnCorrectResults() whenIsNotNullToStringReturnsExpectedString() Signature @isTest private static void whenIsNotNullToStringReturnsExpectedString() whenIsNullMatchesShouldReturnCorrectResults() Signature @isTest private static void whenIsNullMatchesShouldReturnCorrectResults() whenIsNullToStringReturnsExpectedString() Signature @isTest private static void whenIsNullToStringReturnsExpectedString() whenJSONExceptionOccursStringifyShouldReturnsObjectToString() Signature @isTest private static void whenJSONExceptionOccursStringifyShouldReturnsObjectToString() whenListContainsMatchesShouldReturnCorrectResults() Signature @isTest private static void whenListContainsMatchesShouldReturnCorrectResults() whenListContainsToStringReturnsExpectedString() Signature @isTest private static void whenListContainsToStringReturnsExpectedString() whenListIsEmptyMatchesShouldReturnCorrectResults() Signature @isTest private static void whenListIsEmptyMatchesShouldReturnCorrectResults() whenListIsEmptyToStringReturnsExpectedString() Signature @isTest private static void whenListIsEmptyToStringReturnsExpectedString() whenRefEqMatchesShouldReturnCorrectResults() Signature @isTest private static void whenRefEqMatchesShouldReturnCorrectResults() whenRefEqToStringReturnsExpectedString() Signature @isTest private static void whenRefEqToStringReturnsExpectedString() whenSObjectOfTypeMatchesShouldReturnCorrectResults() Signature @isTest private static void whenSObjectOfTypeMatchesShouldReturnCorrectResults() whenSObjectOfTypeToStringReturnsExpectedString() Signature @isTest private static void whenSObjectOfTypeToStringReturnsExpectedString() whenSObjectsInAnyOrderWithMatchesShouldReturnCorrectResults() Signature @isTest private static void whenSObjectsInAnyOrderWithMatchesShouldReturnCorrectResults() whenSObjectsWithDifferentArityMatchesShouldReturnFalse() Signature @isTest private static void whenSObjectsWithDifferentArityMatchesShouldReturnFalse() whenSObjectsWithInOrderMatchesShouldReturnCorrectResults() Signature @isTest private static void whenSObjectsWithInOrderMatchesShouldReturnCorrectResults() whenSObjectsWithToStringReturnsExpectedString() Signature @isTest private static void whenSObjectsWithToStringReturnsExpectedString() whenSObjectWithIdMatchesShouldReturnCorrectResults() Signature @isTest private static void whenSObjectWithIdMatchesShouldReturnCorrectResults() whenSObjectWithIdToStringReturnsExpectedString() Signature @isTest private static void whenSObjectWithIdToStringReturnsExpectedString() whenSObjectWithMatchesShouldReturnCorrectResults() Signature @isTest private static void whenSObjectWithMatchesShouldReturnCorrectResults() whenSObjectWithNameMatchesShouldReturnCorrectResults() Signature @isTest private static void whenSObjectWithNameMatchesShouldReturnCorrectResults() whenSObjectWithNameToStringReturnsExpectedString() Signature @isTest private static void whenSObjectWithNameToStringReturnsExpectedString() whenSObjectWithToStringReturnsExpectedString() Signature @isTest private static void whenSObjectWithToStringReturnsExpectedString() whenStringContainsMatchesShouldReturnCorrectResults() Signature @isTest private static void whenStringContainsMatchesShouldReturnCorrectResults() whenStringContainsToStringReturnsExpectedStrings() Signature @isTest private static void whenStringContainsToStringReturnsExpectedStrings() whenStringEndsWithMatchesShouldReturnCorrectResults() Signature @isTest private static void whenStringEndsWithMatchesShouldReturnCorrectResults() whenStringEndsWithToStringReturnsExpectedStrings() Signature @isTest private static void whenStringEndsWithToStringReturnsExpectedStrings() whenStringIsBlankToStringReturnsExpectedStrings() Signature @isTest private static void whenStringIsBlankToStringReturnsExpectedStrings() whenStringIsNotBlankToStringReturnsExpectedStrings() Signature @isTest private static void whenStringIsNotBlankToStringReturnsExpectedStrings() whenStringMatchesMatchesShouldReturnCorrectResults() Signature @isTest private static void whenStringMatchesMatchesShouldReturnCorrectResults() whenStringMatchesToStringReturnsExpectedStrings() Signature @isTest private static void whenStringMatchesToStringReturnsExpectedStrings() whenStringStartsWithMatchesShouldReturnCorrectResults() Signature @isTest private static void whenStringStartsWithMatchesShouldReturnCorrectResults() whenStringStartsWithToStringReturnsExpectedStrings() Signature @isTest private static void whenStringStartsWithToStringReturnsExpectedStrings() fflib_MatcherDefinitionsTest.StringMatcher Signature private class StringMatcher implements fflib_IMatcher fflib_MatcherDefinitionsTest.StringMatcher Properties Name Signature value private final String value fflib_MatcherDefinitionsTest.StringMatcher Constructors StringMatcher(value) StringMatcher(value) Signature public StringMatcher(String value) fflib_MatcherDefinitionsTest.StringMatcher Methods matches(arg) toString() matches(arg) Signature public Boolean matches(Object arg) toString() Signature public override String toString()"
    },
    {
        "title": "fflib_MatchersReturnValue",
        "fileName": "fflib_MatchersReturnValue.html",
        "text": "fflib_MatchersReturnValue Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public with sharing class fflib_MatchersReturnValue fflib_MatchersReturnValue Properties Name Signature matchers public List<fflib_IMatcher> matchers returnValue public fflib_MethodReturnValue returnValue fflib_MatchersReturnValue Constructors fflib_MatchersReturnValue(matchers, returnValue) fflib_MatchersReturnValue(matchers, returnValue) Signature public fflib_MatchersReturnValue(List<fflib_IMatcher> matchers, fflib_MethodReturnValue returnValue)"
    },
    {
        "title": "fflib_MatchTest",
        "fileName": "fflib_MatchTest.html",
        "text": "fflib_MatchTest Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest public with sharing class fflib_MatchTest fflib_MatchTest Methods allOfWith2ArgsRegistersCorrectMatcherType() allOfWith3ArgsRegistersCorrectMatcherType() allOfWith4ArgsRegistersCorrectMatcherType() allOfWithEmptyArgsThrowsException() allOfWithListArgsRegistersCorrectMatcherType() allOfWithNoArgsThrowsException() allOfWithoutRegisteringInnerMatchersThrowsException() anyBooleanRegistersCorrectMatcherType() anyDateRegistersCorrectMatcherType() anyDatetimeRegistersCorrectMatcherType() anyDecimalRegistersCorrectMatcherType() anyDoubleRegistersCorrectMatcherType() anyFieldSetRegistersCorrectMatcherType() anyIdRegistersCorrectMatcherType() anyIntegerRegistersCorrectMatcherType() anyListRegistersCorrectMatcherType() anyLongRegistersCorrectMatcherType() anyObjectRegistersCorrectMatcherType() anyOfWith2ArgsRegistersCorrectMatcherType() anyOfWith3ArgsRegistersCorrectMatcherType() anyOfWith4ArgsRegistersCorrectMatcherType() anyOfWithListArgsRegistersCorrectMatcherType() anySObjectFieldRegistersCorrectMatcherType() anySObjectRegistersCorrectMatcherType() anySObjectTypeRegistersCorrectMatcherType() anyStringRegistersCorrectMatcherType() dateAfterRegistersCorrectMatcherType() dateBeforeRegistersCorrectMatcherType() dateBetweenRegistersCorrectMatcherType() datetimeAfterRegistersCorrectMatcherType() datetimeBeforeRegistersCorrectMatcherType() datetimeBetweenRegistersCorrectMatcherType() decimalBetweenRegistersCorrectMatcherType() decimalLessThanRegistersCorrectMatcherType() decimalMoreThanRegistersCorrectMatcherType() doubleBetweenRegistersCorrectMatcherType() doubleLessThanRegistersCorrectMatcherType() doubleMoreThanRegistersCorrectMatcherType() eqBooleanRegistersCorrectMatcherType() eqDateRegistersCorrectMatcherType() eqDatetimeRegistersCorrectMatcherType() eqDecimalRegistersCorrectMatcherType() eqDoubleRegistersCorrectMatcherType() eqIdRegistersCorrectMatcherType() eqIntegerRegistersCorrectMatcherType() eqListRegistersCorrectMatcherType() eqLongRegistersCorrectMatcherType() eqRegistersCorrectMatcherType() eqSObjectFieldRegistersCorrectMatcherType() eqSObjectTypeRegistersCorrectMatcherType() eqStringRegistersCorrectMatcherType() fieldSetEquivalentToRegistersCorrectMatcherType() fieldSetEquivalentWithNullFieldSetThrowsException() integerBetweenRegistersCorrectMatcherType() integerLessThanRegistersCorrectMatcherType() integerMoreThanRegistersCorrectMatcherType() isNotNullRegistersCorrectMatcherType() isNotRegistersCorrectMatcherType() isNullRegistersCorrectMatcherType() listContainsRegistersCorrectMatcherType() listIsEmptyRegistersCorrectMatcherType() longBetweenRegistersCorrectMatcherType() longLessThanRegistersCorrectMatcherType() longMoreThanRegistersCorrectMatcherType() noneOfWith2ArgsRegistersCorrectMatcherType() noneOfWith3ArgsRegistersCorrectMatcherType() noneOfWith4ArgsRegistersCorrectMatcherType() noneOfWithListArgsRegistersCorrectMatcherType() refEqRegistersCorrectMatcherType() sObjectOfTypeRegistersCorrectMatcherType() sObjectsWithMatchInOrderRegistersCorrectMatcherType() sObjectsWithRegistersCorrectMatcherType() sObjectWithIdRegistersCorrectMatcherType() sObjectWithNameRegistersCorrectMatcherType() sObjectWithRegistersCorrectMatcherType() stringContainsRegistersCorrectMatcherType() stringEndsWithRegistersCorrectMatcherType() stringIsBlankRegistersCorrectMatcherType() stringIsNotBlankRegistersCorrectMatcherType() stringMatchesRegistersCorrectMatcherType() stringStartsWithRegistersCorrectMatcherType() whenMatchesAllArgsWithDifferentSizeArgValuesAndMatchersThrowsException() whenMatchesAllArgsWithManyMatchesReturnsTrue() whenMatchesAllArgsWithManyMismatchesReturnsFalse() whenMatchesAllArgsWithMatchesAndMismatchesReturnsFalse() whenMatchesAllArgsWithNullMatchersThrowsException() whenMatchesAllArgsWithNullMethodArgsArgValuesThrowsException() whenMatchesAllArgsWithNullMethodArgsThrowsException() whenMatchesAllArgsWithOneMatchReturnsTrue() whenMatchesAllArgsWithOneMismatchReturnsFalse() whenMatchesWithOneMatcherRegistersMatcher() whenMatchesWithOneMatcherReturnsNull() whenMatchesWithOneMatcherSetsMatchingToTrue() allOfWith2ArgsRegistersCorrectMatcherType() Signature @isTest private static void allOfWith2ArgsRegistersCorrectMatcherType() allOfWith3ArgsRegistersCorrectMatcherType() Signature @isTest private static void allOfWith3ArgsRegistersCorrectMatcherType() allOfWith4ArgsRegistersCorrectMatcherType() Signature @isTest private static void allOfWith4ArgsRegistersCorrectMatcherType() allOfWithEmptyArgsThrowsException() Signature @isTest private static void allOfWithEmptyArgsThrowsException() allOfWithListArgsRegistersCorrectMatcherType() Signature @isTest private static void allOfWithListArgsRegistersCorrectMatcherType() allOfWithNoArgsThrowsException() Signature @isTest private static void allOfWithNoArgsThrowsException() allOfWithoutRegisteringInnerMatchersThrowsException() Signature @isTest private static void allOfWithoutRegisteringInnerMatchersThrowsException() anyBooleanRegistersCorrectMatcherType() Signature @isTest private static void anyBooleanRegistersCorrectMatcherType() anyDateRegistersCorrectMatcherType() Signature @isTest private static void anyDateRegistersCorrectMatcherType() anyDatetimeRegistersCorrectMatcherType() Signature @isTest private static void anyDatetimeRegistersCorrectMatcherType() anyDecimalRegistersCorrectMatcherType() Signature @isTest private static void anyDecimalRegistersCorrectMatcherType() anyDoubleRegistersCorrectMatcherType() Signature @isTest private static void anyDoubleRegistersCorrectMatcherType() anyFieldSetRegistersCorrectMatcherType() Signature @isTest private static void anyFieldSetRegistersCorrectMatcherType() anyIdRegistersCorrectMatcherType() Signature @isTest private static void anyIdRegistersCorrectMatcherType() anyIntegerRegistersCorrectMatcherType() Signature @isTest private static void anyIntegerRegistersCorrectMatcherType() anyListRegistersCorrectMatcherType() Signature @isTest private static void anyListRegistersCorrectMatcherType() anyLongRegistersCorrectMatcherType() Signature @isTest private static void anyLongRegistersCorrectMatcherType() anyObjectRegistersCorrectMatcherType() Signature @isTest private static void anyObjectRegistersCorrectMatcherType() anyOfWith2ArgsRegistersCorrectMatcherType() Signature @isTest private static void anyOfWith2ArgsRegistersCorrectMatcherType() anyOfWith3ArgsRegistersCorrectMatcherType() Signature @isTest private static void anyOfWith3ArgsRegistersCorrectMatcherType() anyOfWith4ArgsRegistersCorrectMatcherType() Signature @isTest private static void anyOfWith4ArgsRegistersCorrectMatcherType() anyOfWithListArgsRegistersCorrectMatcherType() Signature @isTest private static void anyOfWithListArgsRegistersCorrectMatcherType() anySObjectFieldRegistersCorrectMatcherType() Signature @isTest private static void anySObjectFieldRegistersCorrectMatcherType() anySObjectRegistersCorrectMatcherType() Signature @isTest private static void anySObjectRegistersCorrectMatcherType() anySObjectTypeRegistersCorrectMatcherType() Signature @isTest private static void anySObjectTypeRegistersCorrectMatcherType() anyStringRegistersCorrectMatcherType() Signature @isTest private static void anyStringRegistersCorrectMatcherType() dateAfterRegistersCorrectMatcherType() Signature @isTest private static void dateAfterRegistersCorrectMatcherType() dateBeforeRegistersCorrectMatcherType() Signature @isTest private static void dateBeforeRegistersCorrectMatcherType() dateBetweenRegistersCorrectMatcherType() Signature @isTest private static void dateBetweenRegistersCorrectMatcherType() datetimeAfterRegistersCorrectMatcherType() Signature @isTest private static void datetimeAfterRegistersCorrectMatcherType() datetimeBeforeRegistersCorrectMatcherType() Signature @isTest private static void datetimeBeforeRegistersCorrectMatcherType() datetimeBetweenRegistersCorrectMatcherType() Signature @isTest private static void datetimeBetweenRegistersCorrectMatcherType() decimalBetweenRegistersCorrectMatcherType() Signature @isTest private static void decimalBetweenRegistersCorrectMatcherType() decimalLessThanRegistersCorrectMatcherType() Signature @isTest private static void decimalLessThanRegistersCorrectMatcherType() decimalMoreThanRegistersCorrectMatcherType() Signature @isTest private static void decimalMoreThanRegistersCorrectMatcherType() doubleBetweenRegistersCorrectMatcherType() Signature @isTest private static void doubleBetweenRegistersCorrectMatcherType() doubleLessThanRegistersCorrectMatcherType() Signature @isTest private static void doubleLessThanRegistersCorrectMatcherType() doubleMoreThanRegistersCorrectMatcherType() Signature @isTest private static void doubleMoreThanRegistersCorrectMatcherType() eqBooleanRegistersCorrectMatcherType() Signature @isTest public static void eqBooleanRegistersCorrectMatcherType() eqDateRegistersCorrectMatcherType() Signature @isTest public static void eqDateRegistersCorrectMatcherType() eqDatetimeRegistersCorrectMatcherType() Signature @isTest public static void eqDatetimeRegistersCorrectMatcherType() eqDecimalRegistersCorrectMatcherType() Signature @isTest public static void eqDecimalRegistersCorrectMatcherType() eqDoubleRegistersCorrectMatcherType() Signature @isTest public static void eqDoubleRegistersCorrectMatcherType() eqIdRegistersCorrectMatcherType() Signature @isTest public static void eqIdRegistersCorrectMatcherType() eqIntegerRegistersCorrectMatcherType() Signature @isTest public static void eqIntegerRegistersCorrectMatcherType() eqListRegistersCorrectMatcherType() Signature @isTest public static void eqListRegistersCorrectMatcherType() eqLongRegistersCorrectMatcherType() Signature @isTest public static void eqLongRegistersCorrectMatcherType() eqRegistersCorrectMatcherType() Signature @isTest private static void eqRegistersCorrectMatcherType() eqSObjectFieldRegistersCorrectMatcherType() Signature @isTest public static void eqSObjectFieldRegistersCorrectMatcherType() eqSObjectTypeRegistersCorrectMatcherType() Signature @isTest public static void eqSObjectTypeRegistersCorrectMatcherType() eqStringRegistersCorrectMatcherType() Signature @isTest public static void eqStringRegistersCorrectMatcherType() fieldSetEquivalentToRegistersCorrectMatcherType() Signature @isTest private static void fieldSetEquivalentToRegistersCorrectMatcherType() fieldSetEquivalentWithNullFieldSetThrowsException() Signature @isTest private static void fieldSetEquivalentWithNullFieldSetThrowsException() integerBetweenRegistersCorrectMatcherType() Signature @isTest private static void integerBetweenRegistersCorrectMatcherType() integerLessThanRegistersCorrectMatcherType() Signature @isTest private static void integerLessThanRegistersCorrectMatcherType() integerMoreThanRegistersCorrectMatcherType() Signature @isTest private static void integerMoreThanRegistersCorrectMatcherType() isNotNullRegistersCorrectMatcherType() Signature @isTest private static void isNotNullRegistersCorrectMatcherType() isNotRegistersCorrectMatcherType() Signature @isTest private static void isNotRegistersCorrectMatcherType() isNullRegistersCorrectMatcherType() Signature @isTest private static void isNullRegistersCorrectMatcherType() listContainsRegistersCorrectMatcherType() Signature @isTest private static void listContainsRegistersCorrectMatcherType() listIsEmptyRegistersCorrectMatcherType() Signature @isTest private static void listIsEmptyRegistersCorrectMatcherType() longBetweenRegistersCorrectMatcherType() Signature @isTest private static void longBetweenRegistersCorrectMatcherType() longLessThanRegistersCorrectMatcherType() Signature @isTest private static void longLessThanRegistersCorrectMatcherType() longMoreThanRegistersCorrectMatcherType() Signature @isTest private static void longMoreThanRegistersCorrectMatcherType() noneOfWith2ArgsRegistersCorrectMatcherType() Signature @isTest private static void noneOfWith2ArgsRegistersCorrectMatcherType() noneOfWith3ArgsRegistersCorrectMatcherType() Signature @isTest private static void noneOfWith3ArgsRegistersCorrectMatcherType() noneOfWith4ArgsRegistersCorrectMatcherType() Signature @isTest private static void noneOfWith4ArgsRegistersCorrectMatcherType() noneOfWithListArgsRegistersCorrectMatcherType() Signature @isTest private static void noneOfWithListArgsRegistersCorrectMatcherType() refEqRegistersCorrectMatcherType() Signature @isTest private static void refEqRegistersCorrectMatcherType() sObjectOfTypeRegistersCorrectMatcherType() Signature @isTest private static void sObjectOfTypeRegistersCorrectMatcherType() sObjectsWithMatchInOrderRegistersCorrectMatcherType() Signature @isTest private static void sObjectsWithMatchInOrderRegistersCorrectMatcherType() sObjectsWithRegistersCorrectMatcherType() Signature @isTest private static void sObjectsWithRegistersCorrectMatcherType() sObjectWithIdRegistersCorrectMatcherType() Signature @isTest private static void sObjectWithIdRegistersCorrectMatcherType() sObjectWithNameRegistersCorrectMatcherType() Signature @isTest private static void sObjectWithNameRegistersCorrectMatcherType() sObjectWithRegistersCorrectMatcherType() Signature @isTest private static void sObjectWithRegistersCorrectMatcherType() stringContainsRegistersCorrectMatcherType() Signature @isTest private static void stringContainsRegistersCorrectMatcherType() stringEndsWithRegistersCorrectMatcherType() Signature @isTest private static void stringEndsWithRegistersCorrectMatcherType() stringIsBlankRegistersCorrectMatcherType() Signature @isTest private static void stringIsBlankRegistersCorrectMatcherType() stringIsNotBlankRegistersCorrectMatcherType() Signature @isTest private static void stringIsNotBlankRegistersCorrectMatcherType() stringMatchesRegistersCorrectMatcherType() Signature @isTest private static void stringMatchesRegistersCorrectMatcherType() stringStartsWithRegistersCorrectMatcherType() Signature @isTest private static void stringStartsWithRegistersCorrectMatcherType() whenMatchesAllArgsWithDifferentSizeArgValuesAndMatchersThrowsException() Signature @isTest private static void whenMatchesAllArgsWithDifferentSizeArgValuesAndMatchersThrowsException() whenMatchesAllArgsWithManyMatchesReturnsTrue() Signature @isTest private static void whenMatchesAllArgsWithManyMatchesReturnsTrue() whenMatchesAllArgsWithManyMismatchesReturnsFalse() Signature @isTest private static void whenMatchesAllArgsWithManyMismatchesReturnsFalse() whenMatchesAllArgsWithMatchesAndMismatchesReturnsFalse() Signature @isTest private static void whenMatchesAllArgsWithMatchesAndMismatchesReturnsFalse() whenMatchesAllArgsWithNullMatchersThrowsException() Signature @isTest private static void whenMatchesAllArgsWithNullMatchersThrowsException() whenMatchesAllArgsWithNullMethodArgsArgValuesThrowsException() Signature @isTest private static void whenMatchesAllArgsWithNullMethodArgsArgValuesThrowsException() whenMatchesAllArgsWithNullMethodArgsThrowsException() Signature @isTest private static void whenMatchesAllArgsWithNullMethodArgsThrowsException() whenMatchesAllArgsWithOneMatchReturnsTrue() Signature @isTest private static void whenMatchesAllArgsWithOneMatchReturnsTrue() whenMatchesAllArgsWithOneMismatchReturnsFalse() Signature @isTest private static void whenMatchesAllArgsWithOneMismatchReturnsFalse() whenMatchesWithOneMatcherRegistersMatcher() Signature @isTest private static void whenMatchesWithOneMatcherRegistersMatcher() whenMatchesWithOneMatcherReturnsNull() Signature @isTest private static void whenMatchesWithOneMatcherReturnsNull() whenMatchesWithOneMatcherSetsMatchingToTrue() Signature @isTest private static void whenMatchesWithOneMatcherSetsMatchingToTrue() fflib_MatchTest.AlwaysMatch Signature private class AlwaysMatch implements fflib_IMatcher fflib_MatchTest.AlwaysMatch Methods matches(arg) matches(arg) Signature public Boolean matches(Object arg) fflib_MatchTest.NeverMatch Signature private class NeverMatch implements fflib_IMatcher fflib_MatchTest.NeverMatch Methods matches(arg) matches(arg) Signature public Boolean matches(Object arg)"
    },
    {
        "title": "fflib_MethodArgValues",
        "fileName": "fflib_MethodArgValues.html",
        "text": "fflib_MethodArgValues Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public with sharing class fflib_MethodArgValues fflib_MethodArgValues Properties Name Signature argValues public List<Object> argValues fflib_MethodArgValues Constructors fflib_MethodArgValues(argValues) Wrapper object which encapsulates the argument values supplied during a given method call. fflib_MethodArgValues(argValues) Wrapper object which encapsulates the argument values supplied during a given method call. Signature public fflib_MethodArgValues(List<Object> argValues) Parameters argValues Type: List<Object> The Returns fflib_MethodArgValues The method argument wrapper object fflib_MethodArgValues Methods equals(other) Standard equals override. hashCode() Standard hashCode override. equals(other) Standard equals override. Signature public Boolean equals(Object other) Parameters other Type: Object The object whose equality we are verifying Returns Boolean True if meaningfully equivalent, false otherwise. hashCode() Standard hashCode override. Signature public Integer hashCode() Returns Integer The generated hashCode"
    },
    {
        "title": "fflib_MethodArgValuesTest",
        "fileName": "fflib_MethodArgValuesTest.html",
        "text": "fflib_MethodArgValuesTest Copyright(c) 2014-2016, FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest public with sharing class fflib_MethodArgValuesTest fflib_MethodArgValuesTest Methods equalsReturnsExpectedResults() hashCodeReturnsExpectedResults() equalsReturnsExpectedResults() Signature @isTest private static void equalsReturnsExpectedResults() hashCodeReturnsExpectedResults() Signature @isTest private static void hashCodeReturnsExpectedResults()"
    },
    {
        "title": "fflib_MethodCountRecorder",
        "fileName": "fflib_MethodCountRecorder.html",
        "text": "fflib_MethodCountRecorder Signature public with sharing class fflib_MethodCountRecorder fflib_MethodCountRecorder Properties Name Signature methodArgumentsByTypeName private static Map<fflib_QualifiedMethod, List<fflib_MethodArgValues>> methodArgumentsByTypeName orderedMethodCalls private static List<fflib_InvocationOnMock> orderedMethodCalls fflib_MethodCountRecorder Methods getMethodArgumentsByTypeName() Getter for the map of the method's calls with the related arguments. getOrderedMethodCalls() Getter for the list of the methods ordered calls. recordMethod(invocation) Record a method was called on a mock object. getMethodArgumentsByTypeName() Getter for the map of the method's calls with the related arguments. Signature public static Map<fflib_QualifiedMethod, List<fflib_MethodArgValues>> getMethodArgumentsByTypeName() Returns The map of methods called with the arguments. getOrderedMethodCalls() Getter for the list of the methods ordered calls. Signature public static List<fflib_InvocationOnMock> getOrderedMethodCalls() Returns The list of methods called in order. recordMethod(invocation) Record a method was called on a mock object. Signature public void recordMethod(fflib_InvocationOnMock invocation) Parameters invocation Type: fflib_InvocationOnMock The object holding all the data of the invocation, like the method and arguments and the mock instance."
    },
    {
        "title": "fflib_MethodReturnValue",
        "fileName": "fflib_MethodReturnValue.html",
        "text": "fflib_MethodReturnValue Class defining a method return value. Signature @isTest public with sharing class fflib_MethodReturnValue fflib_MethodReturnValue Properties Name Signature Description Answer public fflib_Answer Answer Instance of the implementation of the Answer interface that implements the answer, if an answer isn't explicitly set the standard answer will be used, which just returns the stubbed return value. basicAnswer private StandardAnswer basicAnswer fflib_MethodReturnValue Methods thenAnswer(answer) Setup a stubbed answer. thenReturn(value) Setup a stubbed return value. thenReturnMulti(values) Setup a list of stubbed return values. thenThrow(e) Setup a stubbed exception. thenThrowMulti(es) Setup a list stubbed exceptions. thenAnswer(answer) Setup a stubbed answer. Signature public void thenAnswer(fflib_Answer answer) Parameters answer Type: fflib_Answer The answer to run from the stubbed method call. thenReturn(value) Setup a stubbed return value. Signature public fflib_MethodReturnValue thenReturn(Object value) Parameters value Type: Object The value to return from the stubbed method call. Returns The fflib_MethodReturnValue instance to allow you to chain the methods. thenReturnMulti(values) Setup a list of stubbed return values. Signature public fflib_MethodReturnValue thenReturnMulti(List<Object> values) Parameters values Type: List<Object> The values to return from the stubbed method call in consecutive calls. Returns The fflib_MethodReturnValue instance to allow you to chain the methods. thenThrow(e) Setup a stubbed exception. Signature public fflib_MethodReturnValue thenThrow(Exception e) Parameters e Type: Exception The exception to throw from the stubbed method call. Returns The fflib_MethodReturnValue instance to allow you to chain the methods. thenThrowMulti(es) Setup a list stubbed exceptions. Signature public fflib_MethodReturnValue thenThrowMulti(List<Exception> es) Parameters es Type: List<Exception> The exceptions to throw from the stubbed method call in consecutive calls. Returns The fflib_MethodReturnValue instance to allow you to chain the methods. fflib_MethodReturnValue.StandardAnswer Signature public class StandardAnswer implements fflib_Answer fflib_MethodReturnValue.StandardAnswer Properties Name Signature ReturnValues private List<Object> ReturnValues whichStubReturnIndex private Integer whichStubReturnIndex fflib_MethodReturnValue.StandardAnswer Methods answer(invocation) Standard basic implementation for the fflib_Answer answer method, to be used as default answering. setValue(value) Setter of a single return value. setValues(values) Setter of the list of return values. answer(invocation) Standard basic implementation for the fflib_Answer answer method, to be used as default answering. Signature public Object answer(fflib_InvocationOnMock invocation) Parameters invocation Type: fflib_InvocationOnMock The invocation to answer for. Returns The ReturnValue for the method stubbed. setValue(value) Setter of a single return value. Signature public StandardAnswer setValue(Object value) Parameters value Type: Object The value to be set as return value for the StandardAnswer object. Returns The StandardAnswer instance. setValues(values) Setter of the list of return values. Signature public StandardAnswer setValues(List<Object> values) Parameters value The value to be set as return value for the StandardAnswer object. Returns the StandardAnswer instance."
    },
    {
        "title": "fflib_MethodReturnValueRecorder",
        "fileName": "fflib_MethodReturnValueRecorder.html",
        "text": "fflib_MethodReturnValueRecorder Signature public with sharing class fflib_MethodReturnValueRecorder fflib_MethodReturnValueRecorder Properties Name Signature Description DoThrowWhenExceptions public List<Exception> DoThrowWhenExceptions matcherReturnValuesByMethod private Map<fflib_QualifiedMethod, List<fflib_MatchersReturnValue>> matcherReturnValuesByMethod Map of matchers by method. Key: qualifiedMethod Object: map of method return values by method. MethodReturnValue public fflib_MethodReturnValue MethodReturnValue Stubbing public Boolean Stubbing fflib_MethodReturnValueRecorder Constructors fflib_MethodReturnValueRecorder() fflib_MethodReturnValueRecorder() Signature public fflib_MethodReturnValueRecorder() fflib_MethodReturnValueRecorder Methods getMethodReturnValue(invocation) Get the method return value for the given method call. prepareDoThrowWhenExceptions(exps) Prepare a stubbed exceptions for a void method. prepareMethodReturnValue(invocation) Prepare a stubbed method return value. getMethodReturnValue(invocation) Get the method return value for the given method call. Signature public fflib_MethodReturnValue getMethodReturnValue(fflib_InvocationOnMock invocation) Parameters invocation Type: fflib_InvocationOnMock The object holding all the data of the invocation, like the method and arguments and the mock instance. Returns The MethodReturnValue instance. prepareDoThrowWhenExceptions(exps) Prepare a stubbed exceptions for a void method. Signature public void prepareDoThrowWhenExceptions(List<Exception> exps) Parameters exps Type: List<Exception> The list of exception to throw. prepareMethodReturnValue(invocation) Prepare a stubbed method return value. Signature public fflib_MethodReturnValue prepareMethodReturnValue(fflib_InvocationOnMock invocation) Parameters invocation Type: fflib_InvocationOnMock The object holding all the data of the invocation, like the method and arguments and the mock instance. Returns The MethodReturnValue instance."
    },
    {
        "title": "fflib_MethodVerifier",
        "fileName": "fflib_MethodVerifier.html",
        "text": "fflib_MethodVerifier This class implements the actual verification. Signature public abstract class fflib_MethodVerifier fflib_MethodVerifier Methods capture(matchers) describe(matchers) describe(valuesFromAllInvocations) describe(values) throwException(qm, inOrder, expectedCount, qualifier, methodCount, customAssertMessage, expectedArguments, expectedMatchers, actualArguments) validateMode(verificationMode) verify(qm, methodArg, verificationMode) verifyMethodCall(mockInvocation, verificationMode) Verify a method was called on a mock object. capture(matchers) Signature protected void capture(List<fflib_IMatcher> matchers) describe(matchers) Signature private static String describe(List<fflib_IMatcher> matchers) describe(valuesFromAllInvocations) Signature private static String describe(List<fflib_MethodArgValues> valuesFromAllInvocations) describe(values) Signature private static String describe(fflib_MethodArgValues values) throwException(qm, inOrder, expectedCount, qualifier, methodCount, customAssertMessage, expectedArguments, expectedMatchers, actualArguments) Signature protected void throwException(\t\tfflib_QualifiedMethod qm,\t\tString inOrder,\t\tInteger expectedCount,\t\tString qualifier,\t\tInteger methodCount,\t\tString customAssertMessage,\t\tfflib_MethodArgValues expectedArguments,\t\tList<fflib_IMatcher> expectedMatchers,\t\tList<fflib_MethodArgValues> actualArguments) validateMode(verificationMode) Signature protected abstract void validateMode(fflib_VerificationMode verificationMode) verify(qm, methodArg, verificationMode) Signature protected abstract void verify(\t\tfflib_QualifiedMethod qm,\t\tfflib_MethodArgValues methodArg,\t\tfflib_VerificationMode verificationMode) verifyMethodCall(mockInvocation, verificationMode) Verify a method was called on a mock object. Signature public void verifyMethodCall(fflib_InvocationOnMock mockInvocation, fflib_VerificationMode verificationMode) Parameters mockInvocation Type: fflib_InvocationOnMock The object holding all the data of the invocation, like the method and arguments and the mock instance. verificationMode Type: fflib_VerificationMode The verification mode that holds the setting about how the verification should be performed."
    },
    {
        "title": "fflib_Mocks",
        "fileName": "fflib_Mocks.html",
        "text": "fflib_Mocks Signature @isTest public class fflib_Mocks fflib_Mocks.Mockfflib_MyList Signature public class Mockfflib_MyList implements fflib_MyList.IList fflib_Mocks.Mockfflib_MyList Properties Name Signature mocks private fflib_ApexMocks mocks fflib_Mocks.Mockfflib_MyList Constructors Mockfflib_MyList(mocks) Mockfflib_MyList(mocks) Signature public Mockfflib_MyList(fflib_ApexMocks mocks) fflib_Mocks.Mockfflib_MyList Methods add(value) add(value1, value2, value3, value4) add(value) addMore(value) clear() get(index) get2(index, value) isEmpty() set(index, value) add(value) Signature public void add(String value) add(value1, value2, value3, value4) Signature public void add(String value1, String value2, String value3, String value4) add(value) Signature public void add(String[] value) addMore(value) Signature public void addMore(String value) clear() Signature public void clear() get(index) Signature public String get(Integer index) get2(index, value) Signature public String get2(Integer index, String value) isEmpty() Signature public Boolean isEmpty() set(index, value) Signature public void set(Integer index, Object value)"
    },
    {
        "title": "fflib_MyList",
        "fileName": "fflib_MyList.html",
        "text": "fflib_MyList @nodoc Signature @isTest public with sharing class fflib_MyList implements IList fflib_MyList Methods add(value) add(value) add(value1, value2, value3, value4) addMore(value) clear() get(index) get2(index, value) getStubClassName() isEmpty() set(index, value) add(value) Signature public void add(String[] value) add(value) Signature public void add(String value) add(value1, value2, value3, value4) Signature public void add(String value1, String value2, String value3, String value4) addMore(value) Signature public void addMore(String value) clear() Signature public void clear() get(index) Signature public String get(Integer index) get2(index, value) Signature public String get2(Integer index, String value) getStubClassName() Signature public static String getStubClassName() isEmpty() Signature public Boolean isEmpty() set(index, value) Signature public void set(Integer index, Object value) fflib_MyList.IList Signature public interface IList fflib_MyList.IList Methods add(value) add(value1, value2, value3, value4) add(value) addMore(value) clear() get(index) get2(index, value) isEmpty() set(index, value) add(value) Signature void add(String value) add(value1, value2, value3, value4) Signature void add(String value1, String value2, String value3, String value4) add(value) Signature void add(String[] value) addMore(value) Signature void addMore(String value) clear() Signature void clear() get(index) Signature String get(Integer index) get2(index, value) Signature String get2(Integer index, String value) isEmpty() Signature Boolean isEmpty() set(index, value) Signature void set(Integer index, Object value)"
    },
    {
        "title": "fflib_Objects",
        "fileName": "fflib_Objects.html",
        "text": "fflib_Objects Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public virtual class fflib_Objects implements fflib_IObjects fflib_Objects Properties Name Signature objects protected List<Object> objects fflib_Objects Constructors fflib_Objects(objects) Class constructor fflib_Objects(objects) Class constructor Signature public fflib_Objects(List<Object> objects) fflib_Objects Methods contains(value) containsAll(values) containsAll(values) containsNot(value) containsNot(values) containsNot(values) getObjects() getType() isEmpty() isNotEmpty() setObjects(objects) size() contains(value) Signature public Boolean contains(Object value) containsAll(values) Signature public Boolean containsAll(List<Object> values) containsAll(values) Signature public Boolean containsAll(Set<Object> values) containsNot(value) Signature public Boolean containsNot(Object value) containsNot(values) Signature public Boolean containsNot(List<Object> values) containsNot(values) Signature public Boolean containsNot(Set<Object> values) getObjects() Signature public List<Object> getObjects() getType() Signature public virtual Object getType() isEmpty() Signature public Boolean isEmpty() isNotEmpty() Signature public Boolean isNotEmpty() setObjects(objects) Signature protected void setObjects(List<Object> objects) size() Signature public Integer size()"
    },
    {
        "title": "fflib_ObjectsTest",
        "fileName": "fflib_ObjectsTest.html",
        "text": "fflib_ObjectsTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @IsTest private class fflib_ObjectsTest fflib_ObjectsTest Properties Name Signature TRANSFER_OBJECT_A private static final fflib_ObjectsTest.DataTransferObject TRANSFER_OBJECT_A TRANSFER_OBJECT_B private static final fflib_ObjectsTest.DataTransferObject TRANSFER_OBJECT_B TRANSFER_OBJECT_C private static final fflib_ObjectsTest.DataTransferObject TRANSFER_OBJECT_C TRANSFER_OBJECT_D private static final fflib_ObjectsTest.DataTransferObject TRANSFER_OBJECT_D fflib_ObjectsTest Methods generateDataTransferObjects() generateDomain() itShouldContainAllTheObjects() itShouldContainTheObject() itShouldGetTheObjectType() itShouldHaveAnEmptyDomain() itShouldNotBeAnEmptyDomain() itShouldNotContainTheObject() itShouldNotContainTheObjects() itShouldReturnTheCorrectType() generateDataTransferObjects() Signature private static List<DataTransferObject> generateDataTransferObjects() generateDomain() Signature private static Domain generateDomain() itShouldContainAllTheObjects() Signature @IsTest static void itShouldContainAllTheObjects() itShouldContainTheObject() Signature @IsTest static void itShouldContainTheObject() itShouldGetTheObjectType() Signature @IsTest static void itShouldGetTheObjectType() itShouldHaveAnEmptyDomain() Signature @IsTest static void itShouldHaveAnEmptyDomain() itShouldNotBeAnEmptyDomain() Signature @IsTest static void itShouldNotBeAnEmptyDomain() itShouldNotContainTheObject() Signature @IsTest static void itShouldNotContainTheObject() itShouldNotContainTheObjects() Signature @IsTest static void itShouldNotContainTheObjects() itShouldReturnTheCorrectType() Signature @IsTest static void itShouldReturnTheCorrectType() fflib_ObjectsTest.DataTransferObject Signature private class DataTransferObject fflib_ObjectsTest.DataTransferObject Properties Name Signature MyProperty public String MyProperty fflib_ObjectsTest.DataTransferObject Constructors DataTransferObject(property) DataTransferObject(property) Signature public DataTransferObject(String property) fflib_ObjectsTest.Domain Signature private class Domain extends fflib_Objects fflib_ObjectsTest.Domain Constructors Domain(objects) Domain(objects) Signature public Domain(List<Object> objects) fflib_ObjectsTest.Domain Methods getType() getType() Signature public override Object getType()"
    },
    {
        "title": "fflib_QualifiedMethod",
        "fileName": "fflib_QualifiedMethod.html",
        "text": "fflib_QualifiedMethod Signature public with sharing class fflib_QualifiedMethod fflib_QualifiedMethod Properties Name Signature methodArgTypes public final List<Type> methodArgTypes methodName public final String methodName mockInstance public final Object mockInstance typeName public final String typeName fflib_QualifiedMethod Constructors fflib_QualifiedMethod(typeName, methodName, methodArgTypes) fflib_QualifiedMethod(typeName, methodName, methodArgTypes, mockInstance) fflib_QualifiedMethod(typeName, methodName, methodArgTypes) Signature public fflib_QualifiedMethod(String typeName, String methodName, List<Type> methodArgTypes) fflib_QualifiedMethod(typeName, methodName, methodArgTypes, mockInstance) Signature public fflib_QualifiedMethod(String typeName, String methodName, List<Type> methodArgTypes, Object mockInstance) fflib_QualifiedMethod Methods equals(other) Standard equals override. hasArguments() Predicate describing whether the qualified method accepts arguments or not. hashCode() Standard hashCode override. toString() Standard toString override. equals(other) Standard equals override. Signature public Boolean equals(Object other) Parameters other Type: Object The object whose equality we are verifying Returns Boolean True if meaningfully equivalent, false otherwise. hasArguments() Predicate describing whether the qualified method accepts arguments or not. Signature public Boolean hasArguments() Returns True if the method accepts arguments. hashCode() Standard hashCode override. Signature public Integer hashCode() Returns Integer The generated hashCode toString() Standard toString override. Signature public override String toString() Returns String The human friendly description of the method."
    },
    {
        "title": "fflib_QualifiedMethodAndArgValues",
        "fileName": "fflib_QualifiedMethodAndArgValues.html",
        "text": "fflib_QualifiedMethodAndArgValues Signature public with sharing class fflib_QualifiedMethodAndArgValues fflib_QualifiedMethodAndArgValues Properties Name Signature args private final fflib_MethodArgValues args mockInstance private final Object mockInstance qm private final fflib_QualifiedMethod qm fflib_QualifiedMethodAndArgValues Constructors fflib_QualifiedMethodAndArgValues(qm, args, mockInstance) fflib_QualifiedMethodAndArgValues(qm, args, mockInstance) Signature public fflib_QualifiedMethodAndArgValues(fflib_QualifiedMethod qm, fflib_MethodArgValues args, Object mockInstance) fflib_QualifiedMethodAndArgValues Methods getMethodArgValues() getMockInstance() getQualifiedMethod() toString() getMethodArgValues() Signature public fflib_MethodArgValues getMethodArgValues() getMockInstance() Signature public Object getMockInstance() getQualifiedMethod() Signature public fflib_QualifiedMethod getQualifiedMethod() toString() Signature public override String toString()"
    },
    {
        "title": "fflib_QualifiedMethodAndArgValuesTest",
        "fileName": "fflib_QualifiedMethodAndArgValuesTest.html",
        "text": "fflib_QualifiedMethodAndArgValuesTest Signature @isTest public class fflib_QualifiedMethodAndArgValuesTest fflib_QualifiedMethodAndArgValuesTest Methods equalsReturnsExpectedResults() equalsReturnsExpectedResults() Signature @isTest private static void equalsReturnsExpectedResults()"
    },
    {
        "title": "fflib_QualifiedMethodTest",
        "fileName": "fflib_QualifiedMethodTest.html",
        "text": "fflib_QualifiedMethodTest Signature @isTest public with sharing class fflib_QualifiedMethodTest fflib_QualifiedMethodTest Methods equalsReturnsExpectedResults() equalsReturnsExpectedResultsForHasDependentMocks() hashCodeReturnsExpectedResults() hashCodeReturnsExpectedResultsForHasDependentMocks() toStringReturnsExpectedResult() equalsReturnsExpectedResults() Signature @isTest private static void equalsReturnsExpectedResults() equalsReturnsExpectedResultsForHasDependentMocks() Signature @isTest private static void equalsReturnsExpectedResultsForHasDependentMocks() hashCodeReturnsExpectedResults() Signature @isTest private static void hashCodeReturnsExpectedResults() hashCodeReturnsExpectedResultsForHasDependentMocks() Signature @isTest private static void hashCodeReturnsExpectedResultsForHasDependentMocks() toStringReturnsExpectedResult() Signature @isTest public static void toStringReturnsExpectedResult()"
    },
    {
        "title": "fflib_QueryFactory",
        "fileName": "fflib_QueryFactory.html",
        "text": "fflib_QueryFactory Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public class fflib_QueryFactory fflib_QueryFactory Properties Name Signature Annotations Description allRows private Boolean allRows conditionExpression private String conditionExpression fields private Set<String> fields @TestVisible limitCount private Integer limitCount mFlsEnforcement private FLSEnforcement mFlsEnforcement Integrate checking for READ Field Level Security within the selectField(s) methods This can optionally be enforced(or not) by calling the setEnforceFLS method prior to calling one of the selectField or selectFieldset methods. offsetCount private Integer offsetCount order private List<Ordering> order relationship private Schema.ChildRelationship relationship The relationship and  subselectQueryMap variables are used to support subselect queries.  Subselects can be added to a query, as long as it isn't a subselect query itself.  You may have many subselects inside a query, but they may only be 1 level deep(no subselect inside a subselect) to add a subselect, call the subselectQuery method, passing in the ChildRelationship. sortSelectFields private Boolean sortSelectFields subselectQueryMap private Map<Schema.ChildRelationship, fflib_QueryFactory> subselectQueryMap table public Schema.SObjectType table This property is read-only and may not be set after instantiation. The Schema.SObjectType  token of the SObject that will be used in the FROM clause of the resultant query. Enums Name Signature Values FLSEnforcement public enum FLSEnforcement NONE, LEGACY, USER_MODE, SYSTEM_MODE SortOrder public enum SortOrder ASCENDING, DESCENDING fflib_QueryFactory Constructors fflib_QueryFactory(table) Construct a new fflib_QueryFactory instance with no options other than the FROM clause. You *must* call selectField(s) before #toSOQL  will return a valid, runnable query. fflib_QueryFactory(relationship) Construct a new fflib_QueryFactory instance with no options other than the FROM clause and the relationship. This should be used when constructing a subquery query for addition to a parent query. Objects created with this constructor cannot be added to another object using the subselectQuery method. You *must* call selectField(s) before #toSOQL  will return a valid, runnable query. fflib_QueryFactory(table) Construct a new fflib_QueryFactory instance with no options other than the FROM clause. You *must* call selectField(s) before #toSOQL  will return a valid, runnable query. Signature public fflib_QueryFactory(Schema.SObjectType table) Parameters table Type: Schema.SObjectType the SObject to be used in the FROM clause of the resultant query. This sets the value of {@link #table}. fflib_QueryFactory(relationship) Construct a new fflib_QueryFactory instance with no options other than the FROM clause and the relationship. This should be used when constructing a subquery query for addition to a parent query. Objects created with this constructor cannot be added to another object using the subselectQuery method. You *must* call selectField(s) before #toSOQL  will return a valid, runnable query. Signature private fflib_QueryFactory(Schema.ChildRelationship relationship) Parameters relationship Type: Schema.ChildRelationship the ChildRelationship to be used in the FROM Clause of the resultant Query(when set overrides value of table). This sets the value of {@link #relationship} and {@link #table}. fflib_QueryFactory Methods addField(fieldPath) addOrdering(o) addOrdering(fieldName, direction, nullsLast) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. addOrdering(field, direction, nullsLast) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. addOrdering(fieldName, direction) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. The \"NULLS FIRST\" keywords will be included by default.  If \"NULLS LAST\" is required, use one of the overloaded addOrdering methods which include this parameter. addOrdering(field, direction) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. The \"NULLS FIRST\" keywords will be included by default.  If \"NULLS LAST\" is required, use one of the overloaded addOrdering methods which include this parameter. assertIsAccessible() This method checks to see if the User has Read Access on #table . Asserts true if User has access. deepClone() Create a \"deep\" clone of this object that can be safely mutated without affecting the cloned instance equals(obj) fflib_QueryFactory instances will be considered equal if they produce the same SOQL query. A faster comparison will first be attempted to check if they apply to the same table, and contain the same number of fields selected. This method will never return true if the provided object is not an instance of fflib_QueryFactory. getChildRelationship(objType) Get the ChildRelationship from the Table for the object type passed in. getChildRelationship(relationshipName) Get the ChildRelationship from the Table for the relationship name passed in. getCondition() getFieldPath(fieldName, relatedSObjectType) getFieldPath(fieldName) getFieldTokenPath(field) getLimit() getOffset() getOrderings() getSelectedFields() getSubselectQueries() selectField(fieldName) Selects a single field from the SObject specified in #table . Selecting fields is idempotent, if this field is already selected calling this method will have no additional impact. selectField(fieldName, relatedObjectType) Selects a single field from the SObject specified in #table . Selecting fields is idempotent, if this field is already selected calling this method will have no additional impact. selectField(field) Selects a field, avoiding the possible ambiguity of String API names. selectFields(fieldNames) Selects multiple fields. This acts the same as calling #selectField(String)  multiple times. selectFields(fieldNames) Selects multiple fields. This acts the same as calling #selectField(String)  multiple times. selectFields(fields) Selects multiple fields. This acts the same as calling #selectField(Schema.SObjectField)  multiple times. selectFields(fields) Selects multiple fields. This acts the same as calling #selectField(Schema.SObjectField)  multiple times. selectFieldSet(fieldSet) selectFieldSet(fieldSet, allowCrossObject) This is equivalent to iterating the fields in the field set and calling #selectField(String)  on each. selectSObjectFields(iter) selectStringField(iter) setAllRows() whether an ALL ROWS clause will be added to the resulting query setCondition(conditionExpression) With the introduction of SYSTEM_MODE and USER_MODE, it no longer became necessary to use DescribeFieldResult methods to resolve a selected field back to its canonical case-preserving field definition. The consequence is that duplicate fields could be introduced into the SELECT clause if, for instance, the Apex code called \"selectField('annualrevenue')\" but that same AnnualRevenue field were included via a Field Set and the FieldSetMember.getFieldPath() returns \"AnnualRevenue\" So, in the cases where we're using USER_MODE or SYSTEM_MODE, we need to downcase all of the fields in the Set setEnforceFLS(enforce) This method sets a flag to indicate that this query should have FLS Read permission enforced.  If this method is not called, the default behavior is that FLS read permission will not be checked. setEnforceFLS(enforcement) setLimit(limitCount) setOffset(offsetCount) setOrdering(o) setOrdering(fieldName, direction, nullsLast) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. setOrdering(field, direction, nullsLast) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. setOrdering(fieldName, direction) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. setOrdering(field, direction) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. setSortSelectFields(doSort) Sets a flag to indicate that this query should have ordered query fields in the select statement(this at a small cost to performance). If you are processing large query sets, you should switch this off. setSubselectQuery(relationship, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. subselectQuery(related) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. subselectQuery(related, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. subselectQuery(relationshipName) Add a subquery query to this query.  If a subquery for this relationshipName already exists, it will be returned. If not, a new one will be created and returned. subselectQuery(relationshipName, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. subselectQuery(relationship) Add a subquery query to this query.  If a subquery for this relationshipName already exists, it will be returned. If not, a new one will be created and returned. subselectQuery(relationship, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. toSOQL() Convert the values provided to this instance into a full SOQL string for use with Database.query Check to see if subqueries queries need to be added after the field list. addField(fieldPath) Signature private void addField(String fieldPath) addOrdering(o) Signature public fflib_QueryFactory addOrdering(Ordering o) Parameters o Type: Ordering an instance of {@link fflib_QueryFactory.Ordering} to be added to the query's ORDER BY clause. addOrdering(fieldName, direction, nullsLast) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. Signature public fflib_QueryFactory addOrdering(String fieldName, SortOrder direction, Boolean nullsLast) Parameters fieldName Type: String The string value of the field to be sorted on direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) nullsLast Type: Boolean whether to sort null values last(NULLS LAST keyword included). addOrdering(field, direction, nullsLast) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. Signature public fflib_QueryFactory addOrdering(SObjectField field, SortOrder direction, Boolean nullsLast) Parameters field Type: SObjectField The SObjectField to sort.  This can only be a direct reference. direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) nullsLast Type: Boolean whether to sort null values last(NULLS LAST keyword included). addOrdering(fieldName, direction) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. The \"NULLS FIRST\" keywords will be included by default.  If \"NULLS LAST\" is required, use one of the overloaded addOrdering methods which include this parameter. Signature public fflib_QueryFactory addOrdering(String fieldName, SortOrder direction) Parameters fieldName Type: String The string value of the field to be sorted on direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) addOrdering(field, direction) Add a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. The \"NULLS FIRST\" keywords will be included by default.  If \"NULLS LAST\" is required, use one of the overloaded addOrdering methods which include this parameter. Signature public fflib_QueryFactory addOrdering(SObjectField field, SortOrder direction) Parameters field Type: SObjectField The SObjectField to sort.  This can only be a direct reference. direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) assertIsAccessible() This method checks to see if the User has Read Access on #table . Asserts true if User has access. Signature public fflib_QueryFactory assertIsAccessible() deepClone() Create a \"deep\" clone of this object that can be safely mutated without affecting the cloned instance Signature public fflib_QueryFactory deepClone() Returns a deep clone of this fflib_QueryFactory equals(obj) fflib_QueryFactory instances will be considered equal if they produce the same SOQL query. A faster comparison will first be attempted to check if they apply to the same table, and contain the same number of fields selected. This method will never return true if the provided object is not an instance of fflib_QueryFactory. Signature public Boolean equals(Object obj) Parameters obj Type: Object the object to check equality of. getChildRelationship(objType) Get the ChildRelationship from the Table for the object type passed in. Signature private Schema.ChildRelationship getChildRelationship(SObjectType objType) Parameters objType Type: SObjectType The object type of the child relationship to get getChildRelationship(relationshipName) Get the ChildRelationship from the Table for the relationship name passed in. Signature private Schema.ChildRelationship getChildRelationship(String relationshipName) Parameters relationshipName Type: String The name of the object's ChildRelationship on get getCondition() Signature public String getCondition() Returns the current value of the WHERE clause, if any, as set by #setCondition getFieldPath(fieldName, relatedSObjectType) Signature private String getFieldPath(String fieldName, Schema.sObjectType relatedSObjectType) getFieldPath(fieldName) Signature private String getFieldPath(String fieldName) getFieldTokenPath(field) Signature @TestVisible private static String getFieldTokenPath(Schema.SObjectField field) getLimit() Signature public Integer getLimit() Returns the current value of the LIMIT clause, if any. getOffset() Signature public Integer getOffset() Returns the current value of the OFFSET clause, if any. getOrderings() Signature public List<Ordering> getOrderings() Returns the list of orderings that will be used as the query's ORDER BY clause. You may remove elements from the returned list, or otherwise mutate it, to remove previously added orderings. getSelectedFields() Signature public Set<String> getSelectedFields() Returns the selected fields getSubselectQueries() Signature public List<fflib_QueryFactory> getSubselectQueries() Returns the list of subquery instances of fflib_QueryFactory which will be added to the SOQL as relationship/child/sub-queries. selectField(fieldName) Selects a single field from the SObject specified in #table . Selecting fields is idempotent, if this field is already selected calling this method will have no additional impact. Signature public fflib_QueryFactory selectField(String fieldName) Parameters fieldName Type: String the API name of the field to add to the query's SELECT clause. selectField(fieldName, relatedObjectType) Selects a single field from the SObject specified in #table . Selecting fields is idempotent, if this field is already selected calling this method will have no additional impact. Signature public fflib_QueryFactory selectField(String fieldName, Schema.sObjectType relatedObjectType) Parameters fieldName Type: String the API name of the field to add to the query's SELECT clause. relatedSObjectType the related sObjectType to resolve polymorphic object fields. selectField(field) Selects a field, avoiding the possible ambiguity of String API names. Signature public fflib_QueryFactory selectField(Schema.SObjectField field) Parameters field Type: Schema.SObjectField the {@link Schema.SObjectField} to select with this query. Exceptions InvalidFieldException If the field is null {@code field}. See #selectField(String) selectFields(fieldNames) Selects multiple fields. This acts the same as calling #selectField(String)  multiple times. Signature public fflib_QueryFactory selectFields(Set<String> fieldNames) Parameters fieldNames Type: Set<String> the Set of field API names to select. selectFields(fieldNames) Selects multiple fields. This acts the same as calling #selectField(String)  multiple times. Signature public fflib_QueryFactory selectFields(List<String> fieldNames) Parameters fieldNames Type: List<String> the List of field API names to select. selectFields(fields) Selects multiple fields. This acts the same as calling #selectField(Schema.SObjectField)  multiple times. Signature public fflib_QueryFactory selectFields(Set<Schema.SObjectField> fields) Parameters fields Type: Set<Schema.SObjectField> the Set of {@link Schema.SObjectField}s to select. Exceptions InvalidFieldException if the fields are null {@code fields}. selectFields(fields) Selects multiple fields. This acts the same as calling #selectField(Schema.SObjectField)  multiple times. Signature public fflib_QueryFactory selectFields(List<Schema.SObjectField> fields) Parameters fields Type: List<Schema.SObjectField> the List of {@link Schema.SObjectField}s to select. Exceptions InvalidFieldException if the fields are null {@code fields}. selectFieldSet(fieldSet) Signature public fflib_QueryFactory selectFieldSet(Schema.FieldSet fieldSet) See #selectFieldSet(Schema.FieldSet,Boolean) selectFieldSet(fieldSet, allowCrossObject) This is equivalent to iterating the fields in the field set and calling #selectField(String)  on each. Signature public fflib_QueryFactory selectFieldSet(Schema.FieldSet fieldSet, Boolean allowCrossObject) Parameters fieldSet Type: Schema.FieldSet Select all fields included in the field set. allowCrossObject Type: Boolean if false this method will throw an exception if any fields in the field set reference fields on a related record. Exceptions InvalidFieldSetException if the fieldset is invalid for table {@code fields}. selectSObjectFields(iter) Signature private fflib_QueryFactory selectSObjectFields(Iterator<Schema.SObjectField> iter) selectStringField(iter) Signature private fflib_QueryFactory selectStringField(Iterator<String> iter) setAllRows() whether an ALL ROWS clause will be added to the resulting query Signature public fflib_QueryFactory setAllRows() setCondition(conditionExpression) With the introduction of SYSTEM_MODE and USER_MODE, it no longer became necessary to use DescribeFieldResult methods to resolve a selected field back to its canonical case-preserving field definition. The consequence is that duplicate fields could be introduced into the SELECT clause if, for instance, the Apex code called \"selectField('annualrevenue')\" but that same AnnualRevenue field were included via a Field Set and the FieldSetMember.getFieldPath() returns \"AnnualRevenue\" So, in the cases where we're using USER_MODE or SYSTEM_MODE, we need to downcase all of the fields in the Set Signature public fflib_QueryFactory setCondition(String conditionExpression) setEnforceFLS(enforce) This method sets a flag to indicate that this query should have FLS Read permission enforced.  If this method is not called, the default behavior is that FLS read permission will not be checked. Signature public fflib_QueryFactory setEnforceFLS(Boolean enforce) Deprecated - use the setEnforceFLS overload that specifies Legacy or Native FLS enforcement Parameters enforce Type: Boolean whether to enforce field level security(read) setEnforceFLS(enforcement) Signature public fflib_QueryFactory setEnforceFLS(FLSEnforcement enforcement) setLimit(limitCount) Signature public fflib_QueryFactory setLimit(Integer limitCount) Parameters limitCount Type: Integer if not null causes a LIMIT clause to be added to the resulting query. setOffset(offsetCount) Signature public fflib_QueryFactory setOffset(Integer offsetCount) Parameters offsetCount Type: Integer if not null causes a OFFSET clause to be added to the resulting query. setOrdering(o) Signature public fflib_QueryFactory setOrdering(Ordering o) Parameters o Type: Ordering an instance of {@link fflib_QueryFactory.Ordering} to remove all existing(for instance defaults) and be added to the query's ORDER BY clause. setOrdering(fieldName, direction, nullsLast) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. Signature public fflib_QueryFactory setOrdering(String fieldName, SortOrder direction, Boolean nullsLast) Parameters fieldName Type: String The string value of the field to be sorted on direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) nullsLast Type: Boolean whether to sort null values last(NULLS LAST keyword included). setOrdering(field, direction, nullsLast) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. Signature public fflib_QueryFactory setOrdering(SObjectField field, SortOrder direction, Boolean nullsLast) Parameters field Type: SObjectField The SObjectField to sort.  This can only be a direct reference. direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) nullsLast Type: Boolean whether to sort null values last(NULLS LAST keyword included). setOrdering(fieldName, direction) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. Signature public fflib_QueryFactory setOrdering(String fieldName, SortOrder direction) Parameters fieldName Type: String The string value of the field to be sorted on direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) setOrdering(field, direction) Remove existing ordering and set a field to be sorted on.  This may be a direct field or a field related through an object lookup or master-detail relationship. Use the set to store unique field names, since we only want to sort by the same field one time.  The sort expressions are stored in a list so that they are applied to the SOQL in the same order that they were added in. Signature public fflib_QueryFactory setOrdering(SObjectField field, SortOrder direction) Parameters field Type: SObjectField The SObjectField to sort.  This can only be a direct reference. direction Type: SortOrder the direction to be sorted on(ASCENDING or DESCENDING) setSortSelectFields(doSort) Sets a flag to indicate that this query should have ordered query fields in the select statement(this at a small cost to performance). If you are processing large query sets, you should switch this off. Signature public fflib_QueryFactory setSortSelectFields(Boolean doSort) Parameters doSort Type: Boolean whether or not select fields should be sorted in the soql statement. setSubselectQuery(relationship, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. Signature private fflib_QueryFactory setSubselectQuery(Schema.ChildRelationship relationship, Boolean assertIsAccessible) Parameters relationship Type: Schema.ChildRelationship The ChildRelationship to be added as a subquery Exceptions InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship subselectQuery(related) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. Signature public fflib_QueryFactory subselectQuery(SObjectType related) Deprecated Replaced by #subselectQuery(String relationshipName)  and #subselectQuery(ChildRelationship relationship) Parameters related Type: SObjectType The related object type Exceptions InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship subselectQuery(related, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. Signature public fflib_QueryFactory subselectQuery(SObjectType related, Boolean assertIsAccessible) Deprecated Replaced by #subselectQuery(String relationshipName, Boolean assertIsAccessible)  and #subselectQuery(ChildRelationship relationship, Boolean assertIsAccessible) Parameters related Type: SObjectType The related object type assertIsAccessible Type: Boolean indicates whether to check if the user has access to the subquery object Exceptions InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship subselectQuery(relationshipName) Add a subquery query to this query.  If a subquery for this relationshipName already exists, it will be returned. If not, a new one will be created and returned. Signature public fflib_QueryFactory subselectQuery(String relationshipName) Parameters relationshipName Type: String The relationshipName to be added as a subquery Exceptions InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship subselectQuery(relationshipName, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. Signature public fflib_QueryFactory subselectQuery(String relationshipName, Boolean assertIsAccessible) Parameters relationshipName Type: String The relationshipName to be added as a subquery assertIsAccessible Type: Boolean indicates whether to check if the user has access to the subquery object Exceptions InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship subselectQuery(relationship) Add a subquery query to this query.  If a subquery for this relationshipName already exists, it will be returned. If not, a new one will be created and returned. Signature public fflib_QueryFactory subselectQuery(Schema.ChildRelationship relationship) Parameters relationship Type: Schema.ChildRelationship The ChildRelationship to be added as a subquery Exceptions InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship subselectQuery(relationship, assertIsAccessible) Add a subquery query to this query.  If a subquery for this relationship already exists, it will be returned. If not, a new one will be created and returned. Signature public fflib_QueryFactory subselectQuery(Schema.ChildRelationship relationship, Boolean assertIsAccessible) Parameters relationship Type: Schema.ChildRelationship The ChildRelationship to be added as a subquery assertIsAccessible Type: Boolean indicates whether to check if the user has access to the subquery object Exceptions InvalidSubqueryRelationshipException If this method is called on a subselectQuery or with an invalid relationship toSOQL() Convert the values provided to this instance into a full SOQL string for use with Database.query Check to see if subqueries queries need to be added after the field list. Signature public String toSOQL() fflib_QueryFactory.InvalidFieldException Signature public class InvalidFieldException extends Exception fflib_QueryFactory.InvalidFieldException Properties Name Signature fieldName private String fieldName objectType private Schema.SObjectType objectType fflib_QueryFactory.InvalidFieldException Constructors InvalidFieldException(fieldName, objectType) InvalidFieldException(fieldName, objectType) Signature public InvalidFieldException(String fieldName, Schema.SObjectType objectType) fflib_QueryFactory.InvalidFieldSetException Signature public class InvalidFieldSetException extends Exception fflib_QueryFactory.InvalidSubqueryRelationshipException Signature public class InvalidSubqueryRelationshipException extends Exception fflib_QueryFactory.NonReferenceFieldException Signature public class NonReferenceFieldException extends Exception fflib_QueryFactory.Ordering Signature public class Ordering fflib_QueryFactory.Ordering Properties Name Signature direction private SortOrder direction field private String field nullsLast private boolean nullsLast fflib_QueryFactory.Ordering Constructors Ordering(sobjType, fieldName, direction) Ordering(field, direction) Construct a new ordering instance for use with fflib_QueryFactory#addOrdering  Once constructed it's properties may not be modified. Ordering(field, direction, nullsLast) Ordering(field, direction) Ordering(field, direction, nullsLast) Ordering(sobjType, fieldName, direction) Signature public Ordering(String sobjType, String fieldName, SortOrder direction) Ordering(field, direction) Construct a new ordering instance for use with fflib_QueryFactory#addOrdering  Once constructed it's properties may not be modified. Signature public Ordering(Schema.SObjectField field, SortOrder direction) Ordering(field, direction, nullsLast) Signature public Ordering(Schema.SObjectField field, SortOrder direction, Boolean nullsLast) Ordering(field, direction) Signature @TestVisible private Ordering(String field, SortOrder direction) Ordering(field, direction, nullsLast) Signature @TestVisible private Ordering(String field, SortOrder direction, Boolean nullsLast) fflib_QueryFactory.Ordering Methods getDirection() getField() toSOQL() getDirection() Signature public SortOrder getDirection() getField() Signature public String getField() toSOQL() Signature public String toSOQL()"
    },
    {
        "title": "fflib_QueryFactoryTest",
        "fileName": "fflib_QueryFactoryTest.html",
        "text": "fflib_QueryFactoryTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest( isParallel = true ) private class fflib_QueryFactoryTest fflib_QueryFactoryTest Methods addChildQueries_invalidChildRelationship() addChildQueries_invalidChildRelationshipTooDeep() addChildQueries_success() addChildQueriesWithChildRelationship_success() addChildQueriesWithChildRelationshipNoAccessibleCheck_fail() addChildQueriesWithChildRelationshipNoAccessibleCheck_success() addChildQueriesWithChildRelationshipObj_success() addChildQueriesWithChildRelationshipObjCheckIsAccessible_success() addChildQuerySameRelationshipAgain_success() checkFieldObjectReadSort_success() checkFieldRead_fail() checkObjectRead_fail() createTestUser_noAccess() deepCloneBasic() deepCloneBasicNoChanges() deepCloneSubquery() deepCloneSubqueryNoChanges() deterministic_toSOQL() duplicateFieldSelection() equalityCheck() fieldSelections() invalidCrossObjectField() invalidField_nullToken() invalidField_string() invalidFields_noQueryField() invalidFields_nullToken() invalidFields_string() invalidFieldTests() nonReferenceField() ordering() queryFieldsNotEquals() queryWith_noFields() setOrdering_ReplacesPreviousOrderingsWithExpectedOrdering() simpleFieldCondition() simpleFieldSelection() testSoql_allRows() testSoql_unsortedSelectFields() addChildQueries_invalidChildRelationship() Signature @isTest static void addChildQueries_invalidChildRelationship() addChildQueries_invalidChildRelationshipTooDeep() Signature @isTest static void addChildQueries_invalidChildRelationshipTooDeep() addChildQueries_success() Signature @isTest static void addChildQueries_success() addChildQueriesWithChildRelationship_success() Signature @isTest static void addChildQueriesWithChildRelationship_success() addChildQueriesWithChildRelationshipNoAccessibleCheck_fail() Signature @isTest static void addChildQueriesWithChildRelationshipNoAccessibleCheck_fail() addChildQueriesWithChildRelationshipNoAccessibleCheck_success() Signature @isTest static void addChildQueriesWithChildRelationshipNoAccessibleCheck_success() addChildQueriesWithChildRelationshipObj_success() Signature @isTest static void addChildQueriesWithChildRelationshipObj_success() addChildQueriesWithChildRelationshipObjCheckIsAccessible_success() Signature @isTest static void addChildQueriesWithChildRelationshipObjCheckIsAccessible_success() addChildQuerySameRelationshipAgain_success() Signature @isTest static void addChildQuerySameRelationshipAgain_success() checkFieldObjectReadSort_success() Signature @isTest static void checkFieldObjectReadSort_success() checkFieldRead_fail() Signature @isTest static void checkFieldRead_fail() checkObjectRead_fail() Signature @isTest static void checkObjectRead_fail() createTestUser_noAccess() Signature public static User createTestUser_noAccess() deepCloneBasic() Signature @isTest static void deepCloneBasic() deepCloneBasicNoChanges() Signature @isTest static void deepCloneBasicNoChanges() deepCloneSubquery() Signature @isTest static void deepCloneSubquery() deepCloneSubqueryNoChanges() Signature @isTest static void deepCloneSubqueryNoChanges() deterministic_toSOQL() Signature @isTest static void deterministic_toSOQL() duplicateFieldSelection() Signature @isTest static void duplicateFieldSelection() equalityCheck() Signature @isTest static void equalityCheck() fieldSelections() Signature @isTest static void fieldSelections() invalidCrossObjectField() Signature @isTest static void invalidCrossObjectField() invalidField_nullToken() Signature @isTest static void invalidField_nullToken() invalidField_string() Signature @isTest static void invalidField_string() invalidFields_noQueryField() Signature @isTest static void invalidFields_noQueryField() invalidFields_nullToken() Signature @isTest static void invalidFields_nullToken() invalidFields_string() Signature @isTest static void invalidFields_string() invalidFieldTests() Signature @isTest static void invalidFieldTests() nonReferenceField() Signature @isTest static void nonReferenceField() ordering() Signature @isTest static void ordering() queryFieldsNotEquals() Signature @isTest static void queryFieldsNotEquals() queryWith_noFields() Signature @isTest static void queryWith_noFields() setOrdering_ReplacesPreviousOrderingsWithExpectedOrdering() Signature @isTest static void setOrdering_ReplacesPreviousOrderingsWithExpectedOrdering() simpleFieldCondition() Signature @isTest static void simpleFieldCondition() simpleFieldSelection() Signature @isTest static void simpleFieldSelection() testSoql_allRows() Signature @isTest static void testSoql_allRows() testSoql_unsortedSelectFields() Signature @isTest static void testSoql_unsortedSelectFields()"
    },
    {
        "title": "fflib_SecurityUtils",
        "fileName": "fflib_SecurityUtils.html",
        "text": "fflib_SecurityUtils Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public class fflib_SecurityUtils fflib_SecurityUtils Properties Name Signature Description BYPASS_INTERNAL_FLS_AND_CRUD public static Boolean BYPASS_INTERNAL_FLS_AND_CRUD If set to true all check methods will always return void, and never throw exceptions. This should really only be set to true if an app-wide setting to disable in-apex FLS and CRUD checks exists and is enabled. Per security best practices setting BYPASS should be an a opt-in, and not the default behavior. Enums Name Signature Values OperationType private enum OperationType CREATE, READ, MODIFY, DEL fflib_SecurityUtils Methods checkFieldIsInsertable(objType, fieldName) CheckFieldIs* method check only FLS checkFieldIsInsertable(objType, fieldToken) Identical to #checkFieldIsInsertable(SObjectType,String) , except with SObjectField instead of String field reference. checkFieldIsInsertable(objType, fieldDescribe) Identical to #checkFieldIsInsertable(SObjectType,String) , except with DescribeFieldResult instead of String field reference. checkFieldIsReadable(objType, fieldName) Checks read field level security only(no CRUD) for the specified fields on {@code objType} checkFieldIsReadable(objType, fieldToken) Identical to #checkFieldIsReadable(SObjectType,String) , except with SObjectField instead of String field reference. checkFieldIsReadable(objType, fieldDescribe) Identical to #checkFieldIsReadable(SObjectType,String) , except with DescribeFieldResult instead of String field reference. checkFieldIsUpdateable(objType, fieldName) Checks update field level security only(no CRUD) for the specified fields on {@code objType} checkFieldIsUpdateable(objType, fieldToken) Identical to #checkFieldIsUpdateable(SObjectType,String) , except with SObjectField instead of String field reference. checkFieldIsUpdateable(objType, fieldDescribe) Identical to #checkFieldIsUpdateable(SObjectType,String) , except with DescribeFieldResult instead of String field reference. checkInsert(objType, fieldNames) Check{Insert,Read,Update} methods check both FLS and CRUD checkInsert(objType, fieldTokens) Identical to #checkInsert(SObjectType,List<String>) , except with SObjectField instead of String field references. checkObjectIsDeletable(objType) Checks delete CRUD for the specified object type. checkObjectIsInsertable(objType) CheckObjectIs* methods check only CRUD checkObjectIsReadable(objType) Checks read CRUD for the specified object type. checkObjectIsUpdateable(objType) Checks update CRUD for the specified object type. checkRead(objType, fieldNames) Checks both read FLS and CRUD for the specified object type and fields. checkRead(objType, fieldTokens) Identical to #checkRead(SObjectType,List<String>) , except with SObjectField instead of String field references. checkUpdate(objType, fieldNames) Checks both update FLS and CRUD for the specified object type and fields. checkUpdate(objType, fieldTokens) Identical to #checkUpdate(SObjectType,List<String>) , except with SObjectField instead of String field references. checkFieldIsInsertable(objType, fieldName) CheckFieldIs* method check only FLS Signature public static void checkFieldIsInsertable(SObjectType objType, String fieldName) checkFieldIsInsertable(objType, fieldToken) Identical to #checkFieldIsInsertable(SObjectType,String) , except with SObjectField instead of String field reference. Signature public static void checkFieldIsInsertable(SObjectType objType, SObjectField fieldToken) Exceptions FlsException if the running user does not have insert rights to the {@code fieldName} field. checkFieldIsInsertable(objType, fieldDescribe) Identical to #checkFieldIsInsertable(SObjectType,String) , except with DescribeFieldResult instead of String field reference. Signature public static void checkFieldIsInsertable(SObjectType objType, DescribeFieldResult fieldDescribe) Exceptions FlsException if the running user does not have insert rights to the {@code fieldName} field. checkFieldIsReadable(objType, fieldName) Checks read field level security only(no CRUD) for the specified fields on {@code objType} Signature public static void checkFieldIsReadable(SObjectType objType, String fieldName) Exceptions FlsException if the running user does not have read rights to the {@code fieldName} field. checkFieldIsReadable(objType, fieldToken) Identical to #checkFieldIsReadable(SObjectType,String) , except with SObjectField instead of String field reference. Signature public static void checkFieldIsReadable(SObjectType objType, SObjectField fieldToken) Exceptions FlsException if the running user does not have read rights to the {@code fieldName} field. checkFieldIsReadable(objType, fieldDescribe) Identical to #checkFieldIsReadable(SObjectType,String) , except with DescribeFieldResult instead of String field reference. Signature public static void checkFieldIsReadable(SObjectType objType, DescribeFieldResult fieldDescribe) Exceptions FlsException if the running user does not have read rights to the {@code fieldName} field. checkFieldIsUpdateable(objType, fieldName) Checks update field level security only(no CRUD) for the specified fields on {@code objType} Signature public static void checkFieldIsUpdateable(SObjectType objType, String fieldName) Exceptions FlsException if the running user does not have update rights to the {@code fieldName} field. checkFieldIsUpdateable(objType, fieldToken) Identical to #checkFieldIsUpdateable(SObjectType,String) , except with SObjectField instead of String field reference. Signature public static void checkFieldIsUpdateable(SObjectType objType, SObjectField fieldToken) Exceptions FlsException if the running user does not have update rights to the {@code fieldName} field. checkFieldIsUpdateable(objType, fieldDescribe) Identical to #checkFieldIsUpdateable(SObjectType,String) , except with DescribeFieldResult instead of String field reference. Signature public static void checkFieldIsUpdateable(SObjectType objType, DescribeFieldResult fieldDescribe) Exceptions FlsException if the running user does not have update rights to the {@code fieldName} field. checkInsert(objType, fieldNames) Check{Insert,Read,Update} methods check both FLS and CRUD Signature public static void checkInsert(SObjectType objType, List<String> fieldNames) checkInsert(objType, fieldTokens) Identical to #checkInsert(SObjectType,List<String>) , except with SObjectField instead of String field references. Signature public static void checkInsert(SObjectType objType, List<SObjectField> fieldTokens) Exceptions FlsException if the running user does not have insert rights to any fields in {@code fieldTokens}. CrudException if the running user does not have insert rights to {@code objType} checkObjectIsDeletable(objType) Checks delete CRUD for the specified object type. Signature public static void checkObjectIsDeletable(SObjectType objType) Exceptions CrudException if the running user does not have delete rights to the {@code objType} SObject. checkObjectIsInsertable(objType) CheckObjectIs* methods check only CRUD Signature public static void checkObjectIsInsertable(SObjectType objType) checkObjectIsReadable(objType) Checks read CRUD for the specified object type. Signature public static void checkObjectIsReadable(SObjectType objType) Exceptions CrudException if the running user does not have read rights to the {@code objType} SObject. checkObjectIsUpdateable(objType) Checks update CRUD for the specified object type. Signature public static void checkObjectIsUpdateable(SObjectType objType) Exceptions CrudException if the running user does not have update rights to the {@code objType} SObject. checkRead(objType, fieldNames) Checks both read FLS and CRUD for the specified object type and fields. Signature public static void checkRead(SObjectType objType, List<String> fieldNames) Exceptions FlsException if the running user does not have read rights to any fields in {@code fieldNames}. CrudException if the running user does not have read rights to {@code objType} checkRead(objType, fieldTokens) Identical to #checkRead(SObjectType,List<String>) , except with SObjectField instead of String field references. Signature public static void checkRead(SObjectType objType, List<SObjectField> fieldTokens) Exceptions FlsException if the running user does not have read rights to any fields in {@code fieldTokens}. CrudException if the running user does not have read rights to {@code objType} checkUpdate(objType, fieldNames) Checks both update FLS and CRUD for the specified object type and fields. Signature public static void checkUpdate(SObjectType objType, List<String> fieldNames) Exceptions FlsException if the running user does not have update rights to any fields in {@code fieldNames}. CrudException if the running user does not have update rights to {@code objType} checkUpdate(objType, fieldTokens) Identical to #checkUpdate(SObjectType,List<String>) , except with SObjectField instead of String field references. Signature public static void checkUpdate(SObjectType objType, List<SObjectField> fieldTokens) Exceptions FlsException if the running user does not have update rights to any fields in {@code fieldTokens}. CrudException if the running user does not have update rights to {@code objType} fflib_SecurityUtils.CrudException CrudException represents a running user's lack of read/create/update/delete access at a profile(or permission set) level. Sharing and field level security issues will never cause this. Signature public class CrudException extends SecurityException fflib_SecurityUtils.CrudException Constructors CrudException(operation, objectType) CrudException(operation, objectType) Signature private CrudException(OperationType operation, Schema.SObjectType objectType) fflib_SecurityUtils.FlsException FlsException represents a running user's lack of field level security to a specific field at a profile(or permission set) level Sharing and CRUD security issues will never cause this to be thrown. Signature public class FlsException extends SecurityException fflib_SecurityUtils.FlsException Properties Name Signature m_fieldToken private Schema.SObjectField m_fieldToken fflib_SecurityUtils.FlsException Constructors FlsException(operation, objectType, fieldToken) FlsException(operation, objectType, fieldToken) Signature private FlsException(OperationType operation, Schema.SObjectType objectType, Schema.SObjectField fieldToken) fflib_SecurityUtils.SecurityException SecurityException is never be thrown directly by fflib_SecurityUtils, instead all forms of CRUD and FLD violations throw subclasses of it. It is provided as a convenience in the event you wish to handle CRUD and FLS violations the same way(e.g. die and display an error) Signature public virtual class SecurityException extends Exception fflib_SecurityUtils.SecurityException Properties Name Signature m_objectType protected Schema.SObjectType m_objectType m_operation protected OperationType m_operation"
    },
    {
        "title": "fflib_SecurityUtilsTest",
        "fileName": "fflib_SecurityUtilsTest.html",
        "text": "fflib_SecurityUtilsTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest @TestVisible private class fflib_SecurityUtilsTest fflib_SecurityUtilsTest Methods createFieldPermissions(permSetId, objectType, fieldName, canRead, canEdit) createObjectPermissions(permSetId, objectType, canCreate, canRead, canUpdate, canDelete) getProfile(profileName) readonly_field_access() readonly_object_access() readonly_objectAndField_access() setupTestUser(limitedAccess) sysadmin_objectAndField_access() testSetup() createFieldPermissions(permSetId, objectType, fieldName, canRead, canEdit) Signature static FieldPermissions createFieldPermissions(\t\tId permSetId, String objectType, String fieldName, Boolean canRead, Boolean canEdit\t) createObjectPermissions(permSetId, objectType, canCreate, canRead, canUpdate, canDelete) Signature static ObjectPermissions createObjectPermissions(\t\tId permSetId, String objectType, Boolean canCreate, Boolean canRead,  Boolean canUpdate, Boolean canDelete\t) getProfile(profileName) Signature static Profile getProfile(String profileName) readonly_field_access() Signature @isTest static void readonly_field_access() readonly_object_access() Signature @isTest static void readonly_object_access() readonly_objectAndField_access() Signature @isTest static void readonly_objectAndField_access() setupTestUser(limitedAccess) Signature @TestVisible static User setupTestUser(Boolean limitedAccess) sysadmin_objectAndField_access() Signature @isTest static void sysadmin_objectAndField_access() testSetup() Signature @TestSetup @TestVisible static void testSetup()"
    },
    {
        "title": "fflib_SObjectDescribe",
        "fileName": "fflib_SObjectDescribe.html",
        "text": "fflib_SObjectDescribe Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public class fflib_SObjectDescribe fflib_SObjectDescribe Properties Name Signature Description describe private Schema.DescribeSObjectResult describe fields private Map<String,Schema.SObjectField> fields fieldSets private Map<String,Schema.FieldSet> fieldSets instanceCache private static Map<String,fflib_SObjectDescribe> instanceCache This is used to cache fflib_SObjectDescribe instances as they're constructed to prevent repeatedly re-constructing the same type. These instances are not guaranteed to be, but typically will be, unique per sObject type due to the presence of flushCache. nameField private Schema.SObjectField nameField rawGlobalDescribe private static Map<String,Schema.SObjectType> rawGlobalDescribe token private Schema.SObjectType token wrappedFields private FieldsMap wrappedFields wrappedGlobalDescribe private static GlobalDescribeMap wrappedGlobalDescribe fflib_SObjectDescribe Constructors fflib_SObjectDescribe(token) fflib_SObjectDescribe(token) Signature private fflib_SObjectDescribe(Schema.SObjectType token) fflib_SObjectDescribe Methods flushCache() getDescribe() Returns the raw Schema.DescribeSObjectResult an fflib_SObjectDescribe instance wraps. getDescribe(sObjectName) getDescribe(token) getDescribe(nativeDescribe) getDescribe(instance) getField(name) This method is a convenient shorthand for calling getField(name, true) getField(fieldName, implyNamespace) This method provides a simplified shorthand for calling #getFields and getting the provided field. Additionally it handles finding the correct SObjectField for relationship notation, e.g. getting the Account field on Contact would fail without being referenced as AccountId - both work here. getFields() getFieldSetsMap() getFieldsMap() This method returns the raw data and provides no namespace handling. Due to this, __use of this method is discouraged__ in favor of getFields(). getGlobalDescribe() getNameField() Returns the field where isNameField() is true(if any); otherwise returns null getRawGlobalDescribe() getSObjectType() Returns the Schema.SObjectType this fflib_SObjectDescribe instance is based on. flushCache() Signature public static void flushCache() getDescribe() Returns the raw Schema.DescribeSObjectResult an fflib_SObjectDescribe instance wraps. Signature public Schema.DescribeSObjectResult getDescribe() getDescribe(sObjectName) Signature public static fflib_SObjectDescribe getDescribe(String sObjectName) getDescribe(token) Signature public static fflib_SObjectDescribe getDescribe(Schema.SObjectType token) getDescribe(nativeDescribe) Signature public static fflib_SObjectDescribe getDescribe(Schema.DescribeSObjectResult nativeDescribe) getDescribe(instance) Signature public static fflib_SObjectDescribe getDescribe(SObject instance) getField(name) This method is a convenient shorthand for calling getField(name, true) Signature public Schema.SObjectField getField(String name) getField(fieldName, implyNamespace) This method provides a simplified shorthand for calling #getFields and getting the provided field. Additionally it handles finding the correct SObjectField for relationship notation, e.g. getting the Account field on Contact would fail without being referenced as AccountId - both work here. Signature public Schema.SObjectField getField(String fieldName, Boolean implyNamespace) getFields() Signature public FieldsMap getFields() getFieldSetsMap() Signature public Map<String,Schema.FieldSet> getFieldSetsMap() getFieldsMap() This method returns the raw data and provides no namespace handling. Due to this, __use of this method is discouraged__ in favor of getFields(). Signature public Map<String,Schema.SObjectField> getFieldsMap() getGlobalDescribe() Signature public static GlobalDescribeMap getGlobalDescribe() getNameField() Returns the field where isNameField() is true(if any); otherwise returns null Signature public Schema.SObjectField getNameField() getRawGlobalDescribe() Signature public static Map<String,SObjectType> getRawGlobalDescribe() getSObjectType() Returns the Schema.SObjectType this fflib_SObjectDescribe instance is based on. Signature public Schema.SObjectType getSObjectType() fflib_SObjectDescribe.DescribeException Signature public abstract class DescribeException extends Exception fflib_SObjectDescribe.DuplicateDescribeException Signature public class DuplicateDescribeException extends DescribeException fflib_SObjectDescribe.FieldsMap A subclass of NamespacedAttributeMap for handling the data returned by #Schema.DescribeSObjectResult.fields.getMap Signature public class FieldsMap extends NamespacedAttributeMap fflib_SObjectDescribe.FieldsMap Constructors FieldsMap(values) FieldsMap(values) Signature @TestVisible private FieldsMap(Map<String,Schema.SObjectField> values) fflib_SObjectDescribe.FieldsMap Methods get(name) get(name, implyNamespace) values() get(name) Signature public Schema.SObjectField get(String name) get(name, implyNamespace) Signature public Schema.SObjectField get(String name, Boolean implyNamespace) values() Signature public List<Schema.SObjectField> values() fflib_SObjectDescribe.GlobalDescribeMap A subclass of NamespacedAttributeMap for handling the data returned by #Schema.getGlobalDescribe Signature public class GlobalDescribeMap extends NamespacedAttributeMap fflib_SObjectDescribe.GlobalDescribeMap Constructors GlobalDescribeMap(values) GlobalDescribeMap(values) Signature @TestVisible private GlobalDescribeMap(Map<String,Schema.SObjectType> values) fflib_SObjectDescribe.GlobalDescribeMap Methods get(name) get(name, implyNamespace) values() get(name) Signature public Schema.SObjectType get(String name) get(name, implyNamespace) Signature public Schema.SObjectType get(String name, Boolean implyNamespace) values() Signature public List<Schema.SObjectType> values() fflib_SObjectDescribe.InvalidDescribeException Signature public class InvalidDescribeException extends DescribeException fflib_SObjectDescribe.NamespacedAttributeMap This class handles emulating a Map<String,Object>'s non-mutating instance methods and helps navigate the complex topic of handling implicit namespace behavior like pre-APIv29 did, while also allowing fully qualified references. Note that this requires the API version of fflib_SObjectDescribe to be 29 or higher to function properly. Due to the lack of language support for covariant return types subclasses are responsible for implementing the get methods. A minimal implementation of these would be a cast and returning getObject's result. Signature private abstract class NamespacedAttributeMap fflib_SObjectDescribe.NamespacedAttributeMap Properties Name Signature Annotations currentNamespace protected String currentNamespace @TestVisible values protected Map<String,Object> values fflib_SObjectDescribe.NamespacedAttributeMap Constructors NamespacedAttributeMap(values) NamespacedAttributeMap() NamespacedAttributeMap(values) Signature protected NamespacedAttributeMap(Map<String,Object> values) NamespacedAttributeMap() Signature protected NamespacedAttributeMap() fflib_SObjectDescribe.NamespacedAttributeMap Methods containsKey(name) containsKey(name, implyNamespace) getObject(name) A convenient shortcut for invoking #getObject(name, true) getObject(name, implyNamespace) keySet() Returns the key set of the map. Note: unlike other NamespacedAttributeMap methods keySet defaults implyNamespace to false if not specified. keySet(implyNamespace) size() containsKey(name) Signature public virtual Boolean containsKey(String name) containsKey(name, implyNamespace) Signature public virtual Boolean containsKey(String name, Boolean implyNamespace) getObject(name) A convenient shortcut for invoking #getObject(name, true) Signature protected virtual Object getObject(String name) getObject(name, implyNamespace) Signature protected virtual Object getObject(String name, Boolean implyNamespace) keySet() Returns the key set of the map. Note: unlike other NamespacedAttributeMap methods keySet defaults implyNamespace to false if not specified. Signature public virtual Set<String> keySet() keySet(implyNamespace) Signature public virtual Set<String> keySet(Boolean implyNamespace) size() Signature public virtual Integer size()"
    },
    {
        "title": "fflib_SObjectDescribeTest",
        "fileName": "fflib_SObjectDescribeTest.html",
        "text": "fflib_SObjectDescribeTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest private class fflib_SObjectDescribeTest fflib_SObjectDescribeTest Methods FieldsMap() flushCache() getAccountDescribes() getDescribe_badInput() Verify that the different ways of getting your hands on an fflib_SObjectDescribe instance all handle null inputs(and blank/empty strings, why not?) by returning null - since there's no possible way to resolve it. GlobalDescribeMap() NamespacedAttributeMap_implementations() rawGlobalDescribeCheck() simpleAccountFieldDescribe() simpleAccountFieldSetDescribe() simpleAccountGetNameField() FieldsMap() Signature @isTest static void FieldsMap() flushCache() Signature @isTest static void flushCache() getAccountDescribes() Signature static void getAccountDescribes() getDescribe_badInput() Verify that the different ways of getting your hands on an fflib_SObjectDescribe instance all handle null inputs(and blank/empty strings, why not?) by returning null - since there's no possible way to resolve it. Signature @isTest static void getDescribe_badInput() GlobalDescribeMap() Signature @isTest static void GlobalDescribeMap() NamespacedAttributeMap_implementations() Signature @isTest static void NamespacedAttributeMap_implementations() rawGlobalDescribeCheck() Signature @isTest static void rawGlobalDescribeCheck() simpleAccountFieldDescribe() Signature @isTest static void simpleAccountFieldDescribe() simpleAccountFieldSetDescribe() Signature @isTest static void simpleAccountFieldSetDescribe() simpleAccountGetNameField() Signature @isTest static void simpleAccountGetNameField()"
    },
    {
        "title": "fflib_SObjectDomain",
        "fileName": "fflib_SObjectDomain.html",
        "text": "fflib_SObjectDomain Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public virtual with sharing class fflib_SObjectDomain fflib_SObjectDomain Properties Name Signature Annotations Description Configuration public Configuration Configuration Exposes the configuration for this domain class instance Errors public static fflib_SObjectDomain.ErrorFactory Errors DEPRECATED, This property has been moved to fflib_SObjects ExistingRecords protected Map<Id, SObject> ExistingRecords @TestVisible Provides access to Trigger.oldMap and allowing it to be mocked in unit-tests Records public List<SObject> Records Provides access to the data represented by this domain class set private set Test public static TestFactory Test Useful during unit testing to access mock support for database inserts and updates(testing without DML) TriggerEventByClass private static Map<Type, TriggerEvent> TriggerEventByClass Retains the trigger tracking configuration used for each domain TriggerStateByClass private static Map<Type, List<fflib_SObjectDomain>> TriggerStateByClass Retains instances of domain classes implementing trigger stateful fflib_SObjectDomain Constructors fflib_SObjectDomain(sObjectList) Constructs the domain class with the data on which to apply the behaviour implemented within fflib_SObjectDomain(sObjectList, sObjectType) Constructs the domain class with the data and type on which to apply the behaviour implemented within @remark Will support List<SObject> but all records in the list will be assumed to be of the type specified in sObjectType fflib_SObjectDomain(sObjectList) Constructs the domain class with the data on which to apply the behaviour implemented within Signature public fflib_SObjectDomain(List<SObject> sObjectList) Parameters sObjectList Type: List<SObject> A concrete list(e.g. List<Account> vs List<SObject>) of records fflib_SObjectDomain(sObjectList, sObjectType) Constructs the domain class with the data and type on which to apply the behaviour implemented within @remark Will support List<SObject> but all records in the list will be assumed to be of the type specified in sObjectType Signature public fflib_SObjectDomain(List<SObject> sObjectList, SObjectType sObjectType) Parameters sObjectList Type: List<SObject> A list(e.g. List<Opportunity>, List<Account>, etc.) of records sObjectType Type: SObjectType The Schema.SObjectType of the records contained in the list fflib_SObjectDomain Methods error(message, record) Ensures logging of errors in the Domain context for later assertions in tests error(message, record, field) Ensures logging of errors in the Domain context for later assertions in tests getChangedRecords(fieldNames) Detects whether any values in context records have changed for given fields as strings Returns list of SObject records that have changes in the specified fields getChangedRecords(fieldTokens) Detects whether any values in context records have changed for given fields as tokens Returns list of SObject records that have changes in the specified fields getTriggerEvent(domainClass) getTriggerInstance(domainClass) For Domain classes implementing the ITriggerStateful interface returns the instance of the domain class being shared between trigger invocations, returns null if the Domain class trigger has not yet fired or the given domain class does not implement the ITriggerStateful interface. Note this method is sensitive to recursion, meaning it will return the applicable domain instance for the level of recursion handleAfterDelete() Base handler for the Apex Trigger event After Delete, checks object security and calls the onAfterDelete method @throws DomainException if the current user context is not able to delete records handleAfterInsert() Base handler for the Apex Trigger event After Insert, checks object security and calls the onValidate and onAfterInsert methods @throws DomainException if the current user context is not able to create records handleAfterUndelete() Base handler for the Apex Trigger event After Undelete, checks object security and calls the onAfterUndelete method @throws DomainException if the current user context is not able to delete records handleAfterUpdate(existingRecords) Base handler for the Apex Trigger event After Update, checks object security and calls the onValidate, onValidate(Map<Id,SObject>) and onAfterUpdate methods @throws DomainException if the current user context is not able to update records handleBeforeDelete() Base handler for the Apex Trigger event Before Delete, calls the onBeforeDelete method handleBeforeInsert() Base handler for the Apex Trigger event Before Insert, calls the onApplyDefaults method, followed by onBeforeInsert handleBeforeUpdate(existingRecords) Base handler for the Apex Trigger event Before Update, calls the onBeforeUpdate method onAfterDelete() Override this to perform processing during the after delete phase, this is called by the handleAfterDelete method onAfterInsert() Override this to perform processing during the after insert phase, this is called by the handleAfterInsert method onAfterUndelete() Override this to perform processing during the after undelete phase, this is called by the handleAfterDelete method onAfterUpdate(existingRecords) Override this to perform processing during the after update phase, this is called by the handleAfterUpdate method onApplyDefaults() Override this to apply defaults to the records, this is called by the handleBeforeInsert method onBeforeDelete() Override this to perform processing during the before delete phase, this is called by the handleBeforeDelete method onBeforeInsert() Override this to perform processing during the before insert phase, this is called by the handleBeforeInsert method onBeforeUpdate(existingRecords) Override this to perform processing during the before update phase, this is called by the handleBeforeUpdate method onValidate() Override this to apply general validation to be performed during insert or update, called by the handleAfterInsert and handleAfterUpdate methods onValidate(existingRecords) Override this to apply validation to be performed during insert, called by the handleAfterUpdate method popTriggerInstance(domainClass, records) Pops from the stack of domain classes per type a domain object instance and updates the record set pushTriggerInstance(domainClass, domain) Pushes to the stack of domain classes per type a domain object instance sObjectType() Returns the SObjectType this Domain class represents triggerHandler(domainClass) Method constructs the given Domain class with the current Trigger context before calling the applicable override methods such as beforeInsert, beforeUpdate etc. triggerHandler(domainClass, isBefore, isAfter, isInsert, isUpdate, isDelete, isUndelete, newRecords, oldRecordsMap) Calls the applicable override methods such as beforeInsert, beforeUpdate etc. based on a Trigger context error(message, record) Ensures logging of errors in the Domain context for later assertions in tests Signature public override String error(String message, SObject record) error(message, record, field) Ensures logging of errors in the Domain context for later assertions in tests Signature public override String error(String message, SObject record, SObjectField field) getChangedRecords(fieldNames) Detects whether any values in context records have changed for given fields as strings Returns list of SObject records that have changes in the specified fields Signature public List<SObject> getChangedRecords(Set<String> fieldNames) getChangedRecords(fieldTokens) Detects whether any values in context records have changed for given fields as tokens Returns list of SObject records that have changes in the specified fields Signature public List<SObject> getChangedRecords(Set<Schema.SObjectField> fieldTokens) getTriggerEvent(domainClass) Signature public static TriggerEvent getTriggerEvent(Type domainClass) getTriggerInstance(domainClass) For Domain classes implementing the ITriggerStateful interface returns the instance of the domain class being shared between trigger invocations, returns null if the Domain class trigger has not yet fired or the given domain class does not implement the ITriggerStateful interface. Note this method is sensitive to recursion, meaning it will return the applicable domain instance for the level of recursion Signature public static fflib_SObjectDomain getTriggerInstance(Type domainClass) handleAfterDelete() Base handler for the Apex Trigger event After Delete, checks object security and calls the onAfterDelete method @throws DomainException if the current user context is not able to delete records Signature public virtual void handleAfterDelete() handleAfterInsert() Base handler for the Apex Trigger event After Insert, checks object security and calls the onValidate and onAfterInsert methods @throws DomainException if the current user context is not able to create records Signature public virtual void handleAfterInsert() handleAfterUndelete() Base handler for the Apex Trigger event After Undelete, checks object security and calls the onAfterUndelete method @throws DomainException if the current user context is not able to delete records Signature public virtual void handleAfterUndelete() handleAfterUpdate(existingRecords) Base handler for the Apex Trigger event After Update, checks object security and calls the onValidate, onValidate(Map<Id,SObject>) and onAfterUpdate methods @throws DomainException if the current user context is not able to update records Signature public virtual void handleAfterUpdate(Map<Id,SObject> existingRecords) handleBeforeDelete() Base handler for the Apex Trigger event Before Delete, calls the onBeforeDelete method Signature public virtual void handleBeforeDelete() handleBeforeInsert() Base handler for the Apex Trigger event Before Insert, calls the onApplyDefaults method, followed by onBeforeInsert Signature public virtual void handleBeforeInsert() handleBeforeUpdate(existingRecords) Base handler for the Apex Trigger event Before Update, calls the onBeforeUpdate method Signature public virtual void handleBeforeUpdate(Map<Id,SObject> existingRecords) onAfterDelete() Override this to perform processing during the after delete phase, this is called by the handleAfterDelete method Signature public virtual void onAfterDelete() onAfterInsert() Override this to perform processing during the after insert phase, this is called by the handleAfterInsert method Signature public virtual void onAfterInsert() onAfterUndelete() Override this to perform processing during the after undelete phase, this is called by the handleAfterDelete method Signature public virtual void onAfterUndelete() onAfterUpdate(existingRecords) Override this to perform processing during the after update phase, this is called by the handleAfterUpdate method Signature public virtual void onAfterUpdate(Map<Id,SObject> existingRecords) onApplyDefaults() Override this to apply defaults to the records, this is called by the handleBeforeInsert method Signature public virtual void onApplyDefaults() onBeforeDelete() Override this to perform processing during the before delete phase, this is called by the handleBeforeDelete method Signature public virtual void onBeforeDelete() onBeforeInsert() Override this to perform processing during the before insert phase, this is called by the handleBeforeInsert method Signature public virtual void onBeforeInsert() onBeforeUpdate(existingRecords) Override this to perform processing during the before update phase, this is called by the handleBeforeUpdate method Signature public virtual void onBeforeUpdate(Map<Id,SObject> existingRecords) onValidate() Override this to apply general validation to be performed during insert or update, called by the handleAfterInsert and handleAfterUpdate methods Signature public virtual void onValidate() onValidate(existingRecords) Override this to apply validation to be performed during insert, called by the handleAfterUpdate method Signature public virtual void onValidate(Map<Id,SObject> existingRecords) popTriggerInstance(domainClass, records) Pops from the stack of domain classes per type a domain object instance and updates the record set Signature private static fflib_SObjectDomain popTriggerInstance(Type domainClass, List<SObject> records) pushTriggerInstance(domainClass, domain) Pushes to the stack of domain classes per type a domain object instance Signature private static void pushTriggerInstance(Type domainClass, fflib_SObjectDomain domain) sObjectType() Returns the SObjectType this Domain class represents Signature public SObjectType sObjectType() triggerHandler(domainClass) Method constructs the given Domain class with the current Trigger context before calling the applicable override methods such as beforeInsert, beforeUpdate etc. Signature public static void triggerHandler(Type domainClass) triggerHandler(domainClass, isBefore, isAfter, isInsert, isUpdate, isDelete, isUndelete, newRecords, oldRecordsMap) Calls the applicable override methods such as beforeInsert, beforeUpdate etc. based on a Trigger context Signature private static void triggerHandler(Type domainClass, Boolean isBefore, Boolean isAfter, Boolean isInsert, Boolean isUpdate, Boolean isDelete, Boolean isUndelete, List<SObject> newRecords, Map<Id, SObject> oldRecordsMap) fflib_SObjectDomain.Configuration Fluent style Configuration system for Domain class creation Signature public class Configuration fflib_SObjectDomain.Configuration Properties Name Signature Description EnforcingTriggerCRUDSecurity public Boolean EnforcingTriggerCRUDSecurity True if the base class is checking the users CRUD requirements before invoking trigger methods OldOnUpdateValidateBehaviour public Boolean OldOnUpdateValidateBehaviour Backwards compatibility mode for handleAfterUpdate routing to onValidate() TriggerStateEnabled public Boolean TriggerStateEnabled Enables reuse of the same Domain instance between before and after trigger phases(subject to recursive scenarios) fflib_SObjectDomain.Configuration Constructors Configuration() Default configuration Configuration() Default configuration Signature public Configuration() fflib_SObjectDomain.Configuration Methods disableOldOnUpdateValidateBehaviour() See associated property disableTriggerCRUDSecurity() See associated property disableTriggerState() See associated property enableOldOnUpdateValidateBehaviour() See associated property enableTriggerState() See associated property enforceTriggerCRUDSecurity() See associated property disableOldOnUpdateValidateBehaviour() See associated property Signature public Configuration disableOldOnUpdateValidateBehaviour() disableTriggerCRUDSecurity() See associated property Signature public Configuration disableTriggerCRUDSecurity() disableTriggerState() See associated property Signature public Configuration disableTriggerState() enableOldOnUpdateValidateBehaviour() See associated property Signature public Configuration enableOldOnUpdateValidateBehaviour() enableTriggerState() See associated property Signature public Configuration enableTriggerState() enforceTriggerCRUDSecurity() See associated property Signature public Configuration enforceTriggerCRUDSecurity() fflib_SObjectDomain.DomainException General exception class for the domain layer Signature public class DomainException extends Exception fflib_SObjectDomain.Error DEPRECATED, This class has been moved to fflib_SObjects Signature public abstract class Error fflib_SObjectDomain.Error Properties Name Signature domain public fflib_SObjectDomain domain message public String message fflib_SObjectDomain.ErrorFactory DEPRECATED, This class has been moved to fflib_SObjects Signature public class ErrorFactory fflib_SObjectDomain.ErrorFactory Properties Name Signature errorList private List<Error> errorList fflib_SObjectDomain.ErrorFactory Constructors ErrorFactory() ErrorFactory() Signature private ErrorFactory() fflib_SObjectDomain.ErrorFactory Methods clearAll() error(message, record) error(domain, message, record) error(message, record, field) error(domain, message, record, field) getAll() clearAll() Signature public void clearAll() error(message, record) Signature public String error(String message, SObject record) error(domain, message, record) Signature private String error(fflib_SObjectDomain domain, String message, SObject record) error(message, record, field) Signature public String error(String message, SObject record, SObjectField field) error(domain, message, record, field) Signature private String error(fflib_SObjectDomain domain, String message, SObject record, SObjectField field) getAll() Signature public List<Error> getAll() fflib_SObjectDomain.FieldError DEPRECATED, This class has been moved to fflib_SObjects Signature public virtual class FieldError extends ObjectError fflib_SObjectDomain.FieldError Properties Name Signature field public SObjectField field fflib_SObjectDomain.FieldError Constructors FieldError() FieldError() Signature public FieldError() fflib_SObjectDomain.IConstructable Interface used to aid the triggerHandler in constructing instances of Domain classes Signature public interface IConstructable fflib_SObjectDomain.IConstructable Methods construct(sObjectList) construct(sObjectList) Signature fflib_SObjectDomain construct(List<SObject> sObjectList) fflib_SObjectDomain.IConstructable2 Interface used to aid the triggerHandler in constructing instances of Domain classes Signature public interface IConstructable2 extends IConstructable fflib_SObjectDomain.IConstructable2 Methods construct(sObjectList, sObjectType) construct(sObjectList, sObjectType) Signature fflib_SObjectDomain construct(List<SObject> sObjectList, SObjectType sObjectType) fflib_SObjectDomain.MockDatabase Class used during Unit testing of Domain classes, can be used(not exclusively) to speed up test execution and focus testing Signature public class MockDatabase fflib_SObjectDomain.MockDatabase Properties Name Signature isDelete private Boolean isDelete isInsert private Boolean isInsert isUndelete private Boolean isUndelete isUpdate private Boolean isUpdate oldRecords private Map<Id, SObject> oldRecords records private List<SObject> records fflib_SObjectDomain.MockDatabase Constructors MockDatabase() MockDatabase() Signature private MockDatabase() fflib_SObjectDomain.MockDatabase Methods hasRecords() onDelete(records) onInsert(records) onUndelete(records) onUpdate(records, oldRecords) testTriggerHandler(domainClass) hasRecords() Signature public Boolean hasRecords() onDelete(records) Signature public void onDelete(Map<Id, SObject> records) onInsert(records) Signature public void onInsert(List<SObject> records) onUndelete(records) Signature public void onUndelete(List<SObject> records) onUpdate(records, oldRecords) Signature public void onUpdate(List<SObject> records, Map<Id, SObject> oldRecords) testTriggerHandler(domainClass) Signature private void testTriggerHandler(Type domainClass) fflib_SObjectDomain.ObjectError DEPRECATED, This class has been moved to fflib_SObjects Signature public virtual class ObjectError extends Error fflib_SObjectDomain.ObjectError Properties Name Signature record public SObject record fflib_SObjectDomain.ObjectError Constructors ObjectError() ObjectError() Signature public ObjectError() fflib_SObjectDomain.TestFactory Provides test context mocking facilities to unit tests testing domain classes Signature public class TestFactory fflib_SObjectDomain.TestFactory Properties Name Signature Database public MockDatabase Database fflib_SObjectDomain.TestFactory Constructors TestFactory() TestFactory() Signature private TestFactory() fflib_SObjectDomain.TestSObjectChangedRecords Test domain class(ideally this would be in the test class, however Type.newInstance does not see such classes) Signature public with sharing class TestSObjectChangedRecords fflib_SObjectDomain.TestSObjectChangedRecords Constructors TestSObjectChangedRecords(sObjectList) TestSObjectChangedRecords(sObjectList) Signature public TestSObjectChangedRecords(List<Opportunity> sObjectList) fflib_SObjectDomain.TestSObjectChangedRecordsConstructor Typically an inner class to the domain class, supported here for test purposes Signature public class TestSObjectChangedRecordsConstructor implements fflib_SObjectDomain.IConstructable fflib_SObjectDomain.TestSObjectChangedRecordsConstructor Methods construct(sObjectList) construct(sObjectList) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList) fflib_SObjectDomain.TestSObjectDisableBehaviour Test domain class(ideally this would be in the test class, however Type.newInstance does not see such classes) Signature public with sharing class TestSObjectDisableBehaviour fflib_SObjectDomain.TestSObjectDisableBehaviour Constructors TestSObjectDisableBehaviour(sObjectList) TestSObjectDisableBehaviour(sObjectList) Signature public TestSObjectDisableBehaviour(List<Opportunity> sObjectList) fflib_SObjectDomain.TestSObjectDisableBehaviour Methods onAfterDelete() onAfterInsert() onAfterUndelete() onAfterUpdate(existing) onBeforeDelete() onBeforeInsert() onBeforeUpdate(existing) onAfterDelete() Signature public override void onAfterDelete() onAfterInsert() Signature public override void onAfterInsert() onAfterUndelete() Signature public override void onAfterUndelete() onAfterUpdate(existing) Signature public override void onAfterUpdate(map<id, SObject> existing) onBeforeDelete() Signature public override void onBeforeDelete() onBeforeInsert() Signature public override void onBeforeInsert() onBeforeUpdate(existing) Signature public override void onBeforeUpdate(map<id, SObject> existing) fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor Typically an inner class to the domain class, supported here for test purposes Signature public class TestSObjectDisableBehaviourConstructor implements fflib_SObjectDomain.IConstructable fflib_SObjectDomain.TestSObjectDisableBehaviourConstructor Methods construct(sObjectList) construct(sObjectList) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList) fflib_SObjectDomain.TestSObjectDomain Test domain class(ideally this would be in the test class, however Type.newInstance does not see such classes) Signature public with sharing class TestSObjectDomain extends fflib_SObjectDomain fflib_SObjectDomain.TestSObjectDomain Properties Name Signature someState private String someState fflib_SObjectDomain.TestSObjectDomain Constructors TestSObjectDomain(sObjectList) TestSObjectDomain(sObjectList, sObjectType) TestSObjectDomain(sObjectList) Signature public TestSObjectDomain(List<Opportunity> sObjectList) TestSObjectDomain(sObjectList, sObjectType) Signature public TestSObjectDomain(List<Opportunity> sObjectList, SObjectType sObjectType) fflib_SObjectDomain.TestSObjectDomain Methods onAfterInsert() onAfterUndelete() onApplyDefaults() onBeforeDelete() onBeforeInsert() onValidate() onValidate(existingRecords) onAfterInsert() Signature public override void onAfterInsert() onAfterUndelete() Signature public override void onAfterUndelete() onApplyDefaults() Signature public override void onApplyDefaults() onBeforeDelete() Signature public override void onBeforeDelete() onBeforeInsert() Signature public override void onBeforeInsert() onValidate() Signature public override void onValidate() onValidate(existingRecords) Signature public override void onValidate(Map<Id,SObject> existingRecords) fflib_SObjectDomain.TestSObjectDomainConstructor Typically an inner class to the domain class, supported here for test purposes Signature public class TestSObjectDomainConstructor implements fflib_SObjectDomain.IConstructable fflib_SObjectDomain.TestSObjectDomainConstructor Methods construct(sObjectList) construct(sObjectList) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList) fflib_SObjectDomain.TestSObjectOnValidateBehaviour Test domain class(ideally this would be in the test class, however Type.newInstance does not see such classes) Signature public with sharing class TestSObjectOnValidateBehaviour fflib_SObjectDomain.TestSObjectOnValidateBehaviour Constructors TestSObjectOnValidateBehaviour(sObjectList) TestSObjectOnValidateBehaviour(sObjectList) Signature public TestSObjectOnValidateBehaviour(List<Opportunity> sObjectList) fflib_SObjectDomain.TestSObjectOnValidateBehaviour Methods onValidate() onValidate() Signature public override void onValidate() fflib_SObjectDomain.TestSObjectOnValidateBehaviourConstructor Typically an inner class to the domain class, supported here for test purposes Signature public class TestSObjectOnValidateBehaviourConstructor implements fflib_SObjectDomain.IConstructable fflib_SObjectDomain.TestSObjectOnValidateBehaviourConstructor Methods construct(sObjectList) construct(sObjectList) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList) fflib_SObjectDomain.TestSObjectStatefulDomain Test domain class(ideally this would be in the test class, however Type.newInstance does not see such classes) Signature public with sharing class TestSObjectStatefulDomain fflib_SObjectDomain.TestSObjectStatefulDomain Properties Name Signature someState public String someState fflib_SObjectDomain.TestSObjectStatefulDomain Constructors TestSObjectStatefulDomain(sObjectList) TestSObjectStatefulDomain(sObjectList) Signature public TestSObjectStatefulDomain(List<Opportunity> sObjectList) fflib_SObjectDomain.TestSObjectStatefulDomain Methods onAfterInsert() onBeforeInsert() onAfterInsert() Signature public override void onAfterInsert() onBeforeInsert() Signature public override void onBeforeInsert() fflib_SObjectDomain.TestSObjectStatefulDomainConstructor Typically an inner class to the domain class, supported here for test purposes Signature public class TestSObjectStatefulDomainConstructor implements fflib_SObjectDomain.IConstructable fflib_SObjectDomain.TestSObjectStatefulDomainConstructor Methods construct(sObjectList) construct(sObjectList) Signature public fflib_SObjectDomain construct(List<SObject> sObjectList) fflib_SObjectDomain.TriggerEvent Signature public class TriggerEvent fflib_SObjectDomain.TriggerEvent Properties Name Signature AfterDeleteEnabled public boolean AfterDeleteEnabled AfterInsertEnabled public boolean AfterInsertEnabled AfterUndeleteEnabled public boolean AfterUndeleteEnabled AfterUpdateEnabled public boolean AfterUpdateEnabled BeforeDeleteEnabled public boolean BeforeDeleteEnabled BeforeInsertEnabled public boolean BeforeInsertEnabled BeforeUpdateEnabled public boolean BeforeUpdateEnabled fflib_SObjectDomain.TriggerEvent Constructors TriggerEvent() TriggerEvent() Signature public TriggerEvent() fflib_SObjectDomain.TriggerEvent Methods disableAfterDelete() disableAfterInsert() disableAfterUndelete() disableAfterUpdate() disableAll() disableAllAfter() disableAllBefore() disableBeforeDelete() disableBeforeInsert() disableBeforeUpdate() enableAfterDelete() enableAfterInsert() enableAfterUndelete() enableAfterUpdate() enableAll() enableAllAfter() enableAllBefore() enableBeforeDelete() enableBeforeInsert() enableBeforeUpdate() isEnabled(isBefore, isAfter, isInsert, isUpdate, isDelete, isUndelete) disableAfterDelete() Signature public TriggerEvent disableAfterDelete() disableAfterInsert() Signature public TriggerEvent disableAfterInsert() disableAfterUndelete() Signature public TriggerEvent disableAfterUndelete() disableAfterUpdate() Signature public TriggerEvent disableAfterUpdate() disableAll() Signature public TriggerEvent disableAll() disableAllAfter() Signature public TriggerEvent disableAllAfter() disableAllBefore() Signature public TriggerEvent disableAllBefore() disableBeforeDelete() Signature public TriggerEvent disableBeforeDelete() disableBeforeInsert() Signature public TriggerEvent disableBeforeInsert() disableBeforeUpdate() Signature public TriggerEvent disableBeforeUpdate() enableAfterDelete() Signature public TriggerEvent enableAfterDelete() enableAfterInsert() Signature public TriggerEvent enableAfterInsert() enableAfterUndelete() Signature public TriggerEvent enableAfterUndelete() enableAfterUpdate() Signature public TriggerEvent enableAfterUpdate() enableAll() Signature public TriggerEvent enableAll() enableAllAfter() Signature public TriggerEvent enableAllAfter() enableAllBefore() Signature public TriggerEvent enableAllBefore() enableBeforeDelete() Signature public TriggerEvent enableBeforeDelete() enableBeforeInsert() Signature public TriggerEvent enableBeforeInsert() enableBeforeUpdate() Signature public TriggerEvent enableBeforeUpdate() isEnabled(isBefore, isAfter, isInsert, isUpdate, isDelete, isUndelete) Signature public boolean isEnabled(Boolean isBefore, Boolean isAfter, Boolean isInsert, Boolean isUpdate, Boolean isDelete, Boolean isUndelete)"
    },
    {
        "title": "fflib_SObjectDomainTest",
        "fileName": "fflib_SObjectDomainTest.html",
        "text": "fflib_SObjectDomainTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @IsTest private with sharing class fflib_SObjectDomainTest fflib_SObjectDomainTest Methods createChatterExternalUser() Create test user itShouldReturnTheChangedRecordsBySObjectFields() itShouldReturnTheChangedRecordsByStringFields() testDisableTriggerEventsBehaviour() The following tests that the ability to enable/disable all trigger events works as required testErrorLogging() testGetChangedFieldsAsStrings() testInsertValidationFailedWithoutDML() testObjectSecurity() testOnAfterUndeleteWithoutDML() testOnBeforeDeleteWithoutDML() testOnValidateBehaviorDefault() testOnValidateBehaviorOld() testRecursiveTriggerState() testTriggerState() testUpdateValidationFailedWithoutDML() testValidationWithoutDML() createChatterExternalUser() Create test user Signature private static User createChatterExternalUser() itShouldReturnTheChangedRecordsBySObjectFields() Signature @IsTest private static void itShouldReturnTheChangedRecordsBySObjectFields() itShouldReturnTheChangedRecordsByStringFields() Signature @IsTest private static void itShouldReturnTheChangedRecordsByStringFields() testDisableTriggerEventsBehaviour() The following tests that the ability to enable/disable all trigger events works as required Signature @IsTest private static void testDisableTriggerEventsBehaviour() testErrorLogging() Signature @IsTest private static void testErrorLogging() testGetChangedFieldsAsStrings() Signature @IsTest private static void testGetChangedFieldsAsStrings() testInsertValidationFailedWithoutDML() Signature @IsTest private static void testInsertValidationFailedWithoutDML() testObjectSecurity() Signature @IsTest private static void testObjectSecurity() testOnAfterUndeleteWithoutDML() Signature @IsTest private static void testOnAfterUndeleteWithoutDML() testOnBeforeDeleteWithoutDML() Signature @IsTest private static void testOnBeforeDeleteWithoutDML() testOnValidateBehaviorDefault() Signature @IsTest private static void testOnValidateBehaviorDefault() testOnValidateBehaviorOld() Signature @IsTest private static void testOnValidateBehaviorOld() testRecursiveTriggerState() Signature @IsTest private static void testRecursiveTriggerState() testTriggerState() Signature @IsTest private static void testTriggerState() testUpdateValidationFailedWithoutDML() Signature @IsTest private static void testUpdateValidationFailedWithoutDML() testValidationWithoutDML() Signature @IsTest private static void testValidationWithoutDML() fflib_SObjectDomainTest.Accounts Signature private class Accounts extends fflib_SObjectDomain fflib_SObjectDomainTest.Accounts Constructors Accounts(records) Accounts(records) Signature public Accounts(List<SObject> records)"
    },
    {
        "title": "fflib_SObjectMocks",
        "fileName": "fflib_SObjectMocks.html",
        "text": "fflib_SObjectMocks Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @isTest public class fflib_SObjectMocks fflib_SObjectMocks.SObjectDomain Signature public virtual class SObjectDomain implements fflib_ISObjectDomain fflib_SObjectMocks.SObjectDomain Properties Name Signature mocks private fflib_ApexMocks mocks fflib_SObjectMocks.SObjectDomain Constructors SObjectDomain(mocks) SObjectDomain(mocks) Signature public SObjectDomain(fflib_ApexMocks mocks) fflib_SObjectMocks.SObjectDomain Methods getObjects() getRecords() getType() sObjectType() getObjects() Signature public List<Object> getObjects() getRecords() Signature public List<SObject> getRecords() getType() Signature public Object getType() sObjectType() Signature public Schema.SObjectType sObjectType() fflib_SObjectMocks.SObjectSelector Signature public virtual class SObjectSelector implements fflib_ISObjectSelector fflib_SObjectMocks.SObjectSelector Properties Name Signature mocks private fflib_ApexMocks mocks fflib_SObjectMocks.SObjectSelector Constructors SObjectSelector(mocks) SObjectSelector(mocks) Signature public SObjectSelector(fflib_ApexMocks mocks) fflib_SObjectMocks.SObjectSelector Methods selectSObjectsById(idSet) sObjectType() selectSObjectsById(idSet) Signature public List<SObject> selectSObjectsById(Set<Id> idSet) sObjectType() Signature public Schema.SObjectType sObjectType() fflib_SObjectMocks.SObjectUnitOfWork Signature public virtual class SObjectUnitOfWork implements fflib_ISObjectUnitOfWork fflib_SObjectMocks.SObjectUnitOfWork Properties Name Signature mocks private fflib_ApexMocks mocks fflib_SObjectMocks.SObjectUnitOfWork Constructors SObjectUnitOfWork(mocks) SObjectUnitOfWork(mocks) Signature public SObjectUnitOfWork(fflib_ApexMocks mocks) fflib_SObjectMocks.SObjectUnitOfWork Methods commitWork() registerDeleted(record) registerDeleted(records) registerDirty(record) registerDirty(records, dirtyFields) registerDirty(record, dirtyFields) registerDirty(record, relatedToParentField, relatedToParentRecord) registerDirty(records) registerEmail(email) registerEmptyRecycleBin(record) registerEmptyRecycleBin(records) registerNew(record) registerNew(records) registerNew(record, relatedToParentField, relatedToParentRecord) registerPermanentlyDeleted(record) registerPermanentlyDeleted(records) registerPublishAfterFailureTransaction(record) registerPublishAfterFailureTransaction(records) registerPublishAfterSuccessTransaction(record) registerPublishAfterSuccessTransaction(records) registerPublishBeforeTransaction(record) registerPublishBeforeTransaction(records) registerRelationship(record, relatedToField, relatedTo) registerRelationship(email, relatedTo) registerRelationship(record, relatedToField, externalIdField, externalId) registerUpsert(record) registerUpsert(records) registerWork(work) commitWork() Signature public void commitWork() registerDeleted(record) Signature public void registerDeleted(SObject record) registerDeleted(records) Signature public void registerDeleted(List<SObject> records) registerDirty(record) Signature public void registerDirty(SObject record) registerDirty(records, dirtyFields) Signature public void registerDirty(List<SObject> records, List<SObjectField> dirtyFields) registerDirty(record, dirtyFields) Signature public void registerDirty(SObject record, List<SObjectField> dirtyFields) registerDirty(record, relatedToParentField, relatedToParentRecord) Signature public void registerDirty(SObject record, Schema.sObjectField relatedToParentField, SObject relatedToParentRecord) registerDirty(records) Signature public void registerDirty(List<SObject> records) registerEmail(email) Signature public void registerEmail(Messaging.Email email) registerEmptyRecycleBin(record) Signature public void registerEmptyRecycleBin(SObject record) registerEmptyRecycleBin(records) Signature public void registerEmptyRecycleBin(List<SObject> records) registerNew(record) Signature public void registerNew(SObject record) registerNew(records) Signature public void registerNew(List<SObject> records) registerNew(record, relatedToParentField, relatedToParentRecord) Signature public void registerNew(SObject record, Schema.sObjectField relatedToParentField, SObject relatedToParentRecord) registerPermanentlyDeleted(record) Signature public void registerPermanentlyDeleted(SObject record) registerPermanentlyDeleted(records) Signature public void registerPermanentlyDeleted(List<SObject> records) registerPublishAfterFailureTransaction(record) Signature public void registerPublishAfterFailureTransaction(SObject record) registerPublishAfterFailureTransaction(records) Signature public void registerPublishAfterFailureTransaction(List<SObject> records) registerPublishAfterSuccessTransaction(record) Signature public void registerPublishAfterSuccessTransaction(SObject record) registerPublishAfterSuccessTransaction(records) Signature public void registerPublishAfterSuccessTransaction(List<SObject> records) registerPublishBeforeTransaction(record) Signature public void registerPublishBeforeTransaction(SObject record) registerPublishBeforeTransaction(records) Signature public void registerPublishBeforeTransaction(List<SObject> records) registerRelationship(record, relatedToField, relatedTo) Signature public void registerRelationship(SObject record, Schema.sObjectField relatedToField, SObject relatedTo) registerRelationship(email, relatedTo) Signature public void registerRelationship(Messaging.SingleEmailMessage email, SObject relatedTo) registerRelationship(record, relatedToField, externalIdField, externalId) Signature public void registerRelationship(SObject record, Schema.sObjectField relatedToField, Schema.sObjectField externalIdField, Object externalId) registerUpsert(record) Signature public void registerUpsert(SObject record) registerUpsert(records) Signature public void registerUpsert(List<SObject> records) registerWork(work) Signature public void registerWork(fflib_SObjectUnitOfWork.IDoWork work)"
    },
    {
        "title": "fflib_SObjects",
        "fileName": "fflib_SObjects.html",
        "text": "fflib_SObjects Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public virtual class fflib_SObjects fflib_SObjects Properties Name Signature Description Errors public static ErrorFactory Errors Useful during unit testing to assert at a more granular and robust level for errors raised during the various trigger events SObjectDescribe public Schema.DescribeSObjectResult SObjectDescribe fflib_SObjects Constructors fflib_SObjects(records) Class constructor fflib_SObjects(records, sObjectType) fflib_SObjects(records) Class constructor Signature public fflib_SObjects(List<SObject> records) fflib_SObjects(records, sObjectType) Signature public fflib_SObjects(List<SObject> records, Schema.SObjectType sObjectType) fflib_SObjects Methods addError(message) Adds an error message to the records in the domain addError(field, message) Adds an error message to the a field records in the domain clearField(field) Clear the field value on all the records of the domain clearFields(fields) Clear the field values on all the records of the domain error(message, record) Ensures logging of errors in the Domain context for later assertions in tests error(message, record, field) Ensures logging of errors in the Domain context for later assertions in tests getFieldValues(field) getIdFieldValues(field) getRecordIds() getRecords() getRecordsByFieldValue(field, value) getRecordsByFieldValues(field, values) getRecordsWithAllBlankFieldValues(fields) getRecordsWithAllNotBlankFieldValues(fields) getRecordsWithBlankFieldValues(field) getRecordsWithBlankFieldValues(fields) getRecordsWithNotBlankFieldValues(field) getRecordsWithNotBlankFieldValues(fields) getSObjectType() getStringFieldValues(field) getType() setFieldValue(field, value) Modifies a value of a field for all records in the domain setFieldValueByMap(fieldToCheck, fieldToUpdate, values) addError(message) Adds an error message to the records in the domain Signature protected void addError(String message) Parameters message Type: String The error message to add to each record addError(field, message) Adds an error message to the a field records in the domain Signature @TestVisible protected virtual void addError(Schema.SObjectField field, String message) Parameters field Type: Schema.SObjectField The field where the error should be reported message Type: String The error message to add to the given field on each record clearField(field) Clear the field value on all the records of the domain Signature @TestVisible protected virtual void clearField(Schema.SObjectField field) Parameters field Type: Schema.SObjectField The field to nullify clearFields(fields) Clear the field values on all the records of the domain Signature @TestVisible protected virtual void clearFields(Set<Schema.SObjectField> fields) Parameters fields Type: Set<Schema.SObjectField> The fields to nullify error(message, record) Ensures logging of errors in the Domain context for later assertions in tests Signature protected virtual String error(String message, SObject record) Parameters message Type: String record Type: SObject Returns Returns the Error message error(message, record, field) Ensures logging of errors in the Domain context for later assertions in tests Signature protected virtual String error(String message, SObject record, Schema.SObjectField field) Parameters message Type: String record Type: SObject field Type: Schema.SObjectField Returns Returns the Error message getFieldValues(field) Signature @TestVisible protected virtual Set<Object> getFieldValues(Schema.SObjectField field) Parameters field Type: Schema.SObjectField The SObjectField reference Returns Return a set with all the values of the given field getIdFieldValues(field) Signature @TestVisible protected Set<Id> getIdFieldValues(Schema.SObjectField field) Parameters field Type: Schema.SObjectField The SObjectField reference of the type Id Returns Return a set with all the Id values of the given field getRecordIds() Signature public virtual Set<Id> getRecordIds() getRecords() Signature public virtual List<SObject> getRecords() getRecordsByFieldValue(field, value) Signature protected virtual List<SObject> getRecordsByFieldValue(Schema.SObjectField field, Object value) Parameters field Type: Schema.SObjectField The Schema.SObjectField to compare against the given value value Type: Object The given value of the records field to include in the return Returns A list with only the SObjects where the given field has the provided value getRecordsByFieldValues(field, values) Signature protected virtual List<SObject> getRecordsByFieldValues(Schema.SObjectField field, Set<Object> values) Parameters field Type: Schema.SObjectField The Schema.SObjectField to compare against the given value values Type: Set<Object> The given values of the records field to include in the return Returns A list with only the SObjects where the given field value is part of the provided values getRecordsWithAllBlankFieldValues(fields) Signature protected virtual List<SObject> getRecordsWithAllBlankFieldValues(Set<Schema.SObjectField> fields) Parameters fields Type: Set<Schema.SObjectField> The Schema.SObjectFields to check their value for a Blank value Returns A list with only the SObjects where all given field values are either null or '' getRecordsWithAllNotBlankFieldValues(fields) Signature protected virtual List<SObject> getRecordsWithAllNotBlankFieldValues(Set<Schema.SObjectField> fields) Parameters fields Type: Set<Schema.SObjectField> The Schema.SObjectFields to check their value for a Non-Blank value Returns A list with only the SObjects where all given field values are not null or '' getRecordsWithBlankFieldValues(field) Signature protected virtual List<SObject> getRecordsWithBlankFieldValues(Schema.SObjectField field) Parameters field Type: Schema.SObjectField The Schema.SObjectField to check its value for a Blank value Returns A list with only the SObjects where the given field value is either null or '') getRecordsWithBlankFieldValues(fields) Signature protected virtual List<SObject> getRecordsWithBlankFieldValues(Set<Schema.SObjectField> fields) Parameters fields Type: Set<Schema.SObjectField> The Schema.SObjectFields to check their value for a Blank value Returns A list with only the SObjects where the at least one given field value is either null or '') getRecordsWithNotBlankFieldValues(field) Signature protected virtual List<SObject> getRecordsWithNotBlankFieldValues(Schema.SObjectField field) Parameters field Type: Schema.SObjectField The Schema.SObjectField to check its value for a Non-Blank value Returns A list with only the SObjects where the given field value is not null or '' getRecordsWithNotBlankFieldValues(fields) Signature protected virtual List<SObject> getRecordsWithNotBlankFieldValues(Set<Schema.SObjectField> fields) Parameters fields Type: Set<Schema.SObjectField> The Schema.SObjectFields to check their value for a Non-Blank value Returns A list with only the SObjects where the at least one given field value not null or '' getSObjectType() Signature public virtual SObjectType getSObjectType() getStringFieldValues(field) Signature @TestVisible protected Set<String> getStringFieldValues(Schema.SObjectField field) Parameters field Type: Schema.SObjectField The SObjectField reference of the type String Returns Return a set with all the String values of the given field getType() Signature public virtual override Object getType() setFieldValue(field, value) Modifies a value of a field for all records in the domain Signature protected virtual void setFieldValue(Schema.SObjectField field, Object value) Parameters field Type: Schema.SObjectField The reference to the SObjectField to be modified value Type: Object The value to store in the given SObjectField setFieldValueByMap(fieldToCheck, fieldToUpdate, values) Signature protected virtual void setFieldValueByMap(\t\t\tSchema.SObjectField fieldToCheck,\t\t\tSchema.SObjectField fieldToUpdate,\t\t\tMap<Object, Object> values) Parameters fieldToCheck Type: \t\t\tSchema.SObjectField The SObjectField to match the key against in the provided map fieldToUpdate The SObjectField to store the mapped value when the key matches the value in the fieldToUpdate field values Type: Object> Map of values to store by the fieldToCheck fields value fflib_SObjects.Error Ensures logging of errors in the Domain context for later assertions in tests Signature public abstract class Error fflib_SObjects.Error Properties Name Signature domain public fflib_ISObjects domain message public String message fflib_SObjects.ErrorFactory Ensures logging of errors in the Domain context for later assertions in tests Signature public virtual class ErrorFactory fflib_SObjects.ErrorFactory Properties Name Signature errorList private List<Error> errorList fflib_SObjects.ErrorFactory Constructors ErrorFactory() ErrorFactory() Signature private ErrorFactory() fflib_SObjects.ErrorFactory Methods clearAll() error(message, record) error(domain, message, record) error(message, record, field) error(domain, message, record, field) getAll() clearAll() Signature public void clearAll() error(message, record) Signature public String error(String message, SObject record) error(domain, message, record) Signature public String error(fflib_SObjects domain, String message, SObject record) error(message, record, field) Signature public String error(String message, SObject record, SObjectField field) error(domain, message, record, field) Signature public String error(fflib_ISObjects domain, String message, SObject record, SObjectField field) getAll() Signature public List<Error> getAll() fflib_SObjects.FieldError Ensures logging of errors in the Domain context for later assertions in tests Signature public virtual class FieldError extends ObjectError fflib_SObjects.FieldError Properties Name Signature field public SObjectField field fflib_SObjects.FieldError Constructors FieldError() FieldError() Signature public FieldError() fflib_SObjects.ObjectError Ensures logging of errors in the Domain context for later assertions in tests Signature public virtual class ObjectError extends Error fflib_SObjects.ObjectError Properties Name Signature record public SObject record fflib_SObjects.ObjectError Constructors ObjectError() ObjectError() Signature public ObjectError()"
    },
    {
        "title": "fflib_SObjectSelector",
        "fileName": "fflib_SObjectSelector.html",
        "text": "fflib_SObjectSelector Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public abstract with sharing class fflib_SObjectSelector fflib_SObjectSelector Properties Name Signature Description CURRENCY_ISO_CODE_ENABLED private Boolean CURRENCY_ISO_CODE_ENABLED Indicates whether the sObject has the currency ISO code field for organisations which have multi-currency enabled. DEFAULT_SORT_FIELD private static String DEFAULT_SORT_FIELD static variables describeWrapper private fflib_SObjectDescribe describeWrapper Describe helper m_dataAccess private DataAccess m_dataAccess m_enforceCRUD private Boolean m_enforceCRUD Enforce CRUD Security m_enforceFLS private Boolean m_enforceFLS Enforce FLS Security m_includeFieldSetFields private Boolean m_includeFieldSetFields Should this selector automatically include the FieldSet fields when building queries? m_orderBy private String m_orderBy Order by field m_sortSelectFields private Boolean m_sortSelectFields Sort the query fields in the select statement(defaults to true, at the expense of performance). Switch this off if you need more performant queries. SF_ID_FIELD private static String SF_ID_FIELD Enums Name Signature Values DataAccess public enum DataAccess LEGACY, USER_MODE, SYSTEM_MODE fflib_SObjectSelector Constructors fflib_SObjectSelector() Constructs the Selector with the default settings fflib_SObjectSelector(includeFieldSetFields) Constructs the Selector fflib_SObjectSelector(includeFieldSetFields, dataAccess) fflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS) Constructs the Selector fflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS, sortSelectFields) Constructs the Selector fflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS, sortSelectFields, dataAccess) fflib_SObjectSelector() Constructs the Selector with the default settings Signature public fflib_SObjectSelector() fflib_SObjectSelector(includeFieldSetFields) Constructs the Selector Signature public fflib_SObjectSelector(Boolean includeFieldSetFields) Parameters includeFieldSetFields Type: Boolean Set to true if the Selector queries are to include Fieldset fields as well fflib_SObjectSelector(includeFieldSetFields, dataAccess) Signature public fflib_SObjectSelector(Boolean includeFieldSetFields, DataAccess dataAccess) fflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS) Constructs the Selector Signature public fflib_SObjectSelector(Boolean includeFieldSetFields, Boolean enforceCRUD, Boolean enforceFLS) Deprecated - consider using dataAccess for native platform enforcement of CRUD and FLS Parameters includeFieldSetFields Type: Boolean Set to true if the Selector queries are to include Fieldset fields as well fflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS, sortSelectFields) Constructs the Selector Signature public fflib_SObjectSelector(Boolean includeFieldSetFields, Boolean enforceCRUD, Boolean enforceFLS, Boolean sortSelectFields) Deprecated - consider using dataAccess for native platform enforcement of CRUD and FLS Parameters includeFieldSetFields Type: Boolean Set to true if the Selector queries are to include Fieldset fields as well enforceCRUD Type: Boolean Enforce CRUD security enforceFLS Type: Boolean Enforce Field Level Security sortSelectFields Type: Boolean Set to false if selecting many columns to skip sorting select fields and improve performance fflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS, sortSelectFields, dataAccess) Signature private fflib_SObjectSelector(Boolean includeFieldSetFields, Boolean enforceCRUD, Boolean enforceFLS, Boolean sortSelectFields, DataAccess dataAccess) fflib_SObjectSelector Methods addQueryFactorySubselect(parentQueryFactory) Adds a subselect QueryFactory based on this selector to the given QueryFactor, returns the child QueryFactory addQueryFactorySubselect(parentQueryFactory, includeSelectorFields) Adds a subselect QueryFactory based on this selector to the given QueryFactor addQueryFactorySubselect(parentQueryFactory, relationshipName) Adds a subselect QueryFactory based on this selector to the given QueryFactor, returns the child QueryFactory addQueryFactorySubselect(parentQueryFactory, relationshipName, includeSelectorFields) Adds a subselect QueryFactory based on this selector to the given QueryFactor assertIsAccessible() Throws an exception if the SObject indicated by getSObjectType is not accessible to the current user(read access) buildQuerySObjectById() Constructs the default SOQL query for this selector, see selectSObjectsById and queryLocatorById configureQueryFactory(queryFactory, assertCRUD, enforceFLS, includeSelectorFields, access) Configures a QueryFactory instance according to the configuration of this selector configureQueryFactoryFields(queryFactory, relationshipFieldPath) Adds the selectors fields to the given QueryFactory using the given relationship path as a prefix // TODO: This should be consistent(ideally) with configureQueryFactory below enforceFLS() Set the selector to enforce FLS Security getDataAccess() getFieldListBuilder() Provides access to the builder containing the list of fields base queries are using, this is demand created if one has not already been defined via setFieldListBuilder @depricated See newQueryFactory getFieldListString() Returns in string form a comma delimited list of fields as defined via getSObjectFieldList and optionally getSObjectFieldSetList getOrderBy() Override this method to control the default ordering of records returned by the base queries, defaults to the name field of the object if it is not encrypted or CreatedDate if there the object has createdDated or Id getRelatedFieldListString(relation) Returns in string form a comma delimited list of fields as defined via getSObjectFieldList and optionally getSObjectFieldSetList @depricated See newQueryFactory getSObjectFieldList() Implement this method to inform the base class of the common fields to be queried or listed by the base class methods getSObjectFieldSetList() Override this method to provide a list of Fieldsets that can optionally drive inclusion of additional fields in the base queries getSObjectName() Returns the string representation of the SObject this selector represents getSObjectType() Implement this method to inform the base class of the SObject(custom or standard) to be queried getSObjectType2() Public access for the getSObjectType during Mock registration(adding public to the existing method broken base class API backwards compatibility) ignoreCRUD() Set the selector to ignore CRUD security @return includeFieldSetFields() Set the selector to automatically include the FieldSet fields when building queries isEnforcingCRUD() Returns True if this Selector is enforcing CRUD Security isEnforcingFLS() Returns True if this Selector is enforcing FLS isIncludeFieldSetFields() Returns True if this Selector instance has been instructed by the caller to include Field Set fields newQueryFactory() Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by newQueryFactory(includeSelectorFields) Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by newQueryFactory(assertCRUD, enforceFLS, includeSelectorFields) Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by CRUD and FLS read security will be checked if the corresponding inputs are true(overrides that defined in the selector). newQueryFactory(assertCRUD, enforceFLS, includeSelectorFields, dataAccess) queryLocatorById(idSet) Performs a SOQL query, - Selecting the fields described via getSObjectFieldsList and getSObjectFieldSetList(if included) - From the SObject described by getSObjectType - Where the Id's match those provided in the set - Ordered by the fields returned via getOrderBy selectSObjectsById(idSet) Performs a SOQL query, - Selecting the fields described via getSObjectFieldsList and getSObjectFieldSetList(if included) - From the SObject described by getSObjectType - Where the Id's match those provided in the set - Ordered by the fields returned via getOrderBy setDataAccess(access) setFieldListBuilder(fieldListBuilder) Use this method to override the default FieldListBuilder(created on demand via getFieldListBuilder) with a custom one, warning, this will bypass anything getSObjectFieldList or getSObjectFieldSetList returns @depricated See newQueryFactory sObjectType() Public access for the getSObjectType during Mock registration(adding public to the existing method broken base class API backwards compatibility1) unsortedSelectFields() addQueryFactorySubselect(parentQueryFactory) Adds a subselect QueryFactory based on this selector to the given QueryFactor, returns the child QueryFactory Signature public fflib_QueryFactory addQueryFactorySubselect(fflib_QueryFactory parentQueryFactory) addQueryFactorySubselect(parentQueryFactory, includeSelectorFields) Adds a subselect QueryFactory based on this selector to the given QueryFactor Signature public fflib_QueryFactory addQueryFactorySubselect(fflib_QueryFactory parentQueryFactory, Boolean includeSelectorFields) addQueryFactorySubselect(parentQueryFactory, relationshipName) Adds a subselect QueryFactory based on this selector to the given QueryFactor, returns the child QueryFactory Signature public fflib_QueryFactory addQueryFactorySubselect(fflib_QueryFactory parentQueryFactory, String relationshipName) addQueryFactorySubselect(parentQueryFactory, relationshipName, includeSelectorFields) Adds a subselect QueryFactory based on this selector to the given QueryFactor Signature public fflib_QueryFactory addQueryFactorySubselect(fflib_QueryFactory parentQueryFactory, String relationshipName, Boolean includeSelectorFields) assertIsAccessible() Throws an exception if the SObject indicated by getSObjectType is not accessible to the current user(read access) Signature public void assertIsAccessible() Deprecated If you utilise the newQueryFactory method this is automatically done for you(unless disabled by the selector) buildQuerySObjectById() Constructs the default SOQL query for this selector, see selectSObjectsById and queryLocatorById Signature protected String buildQuerySObjectById() configureQueryFactory(queryFactory, assertCRUD, enforceFLS, includeSelectorFields, access) Configures a QueryFactory instance according to the configuration of this selector Signature private fflib_QueryFactory configureQueryFactory(fflib_QueryFactory queryFactory,            Boolean assertCRUD,            Boolean enforceFLS,            Boolean includeSelectorFields,            DataAccess access) configureQueryFactoryFields(queryFactory, relationshipFieldPath) Adds the selectors fields to the given QueryFactory using the given relationship path as a prefix // TODO: This should be consistent(ideally) with configureQueryFactory below Signature public void configureQueryFactoryFields(fflib_QueryFactory queryFactory, String relationshipFieldPath) enforceFLS() Set the selector to enforce FLS Security Signature public fflib_SObjectSelector enforceFLS() Deprecated -- consider using setDataAccess to enforce native Apex User Mode Operations instead getDataAccess() Signature public DataAccess getDataAccess() getFieldListBuilder() Provides access to the builder containing the list of fields base queries are using, this is demand created if one has not already been defined via setFieldListBuilder @depricated See newQueryFactory Signature public fflib_StringBuilder.CommaDelimitedListBuilder getFieldListBuilder() getFieldListString() Returns in string form a comma delimited list of fields as defined via getSObjectFieldList and optionally getSObjectFieldSetList Signature public String getFieldListString() Deprecated See newQueryFactory getOrderBy() Override this method to control the default ordering of records returned by the base queries, defaults to the name field of the object if it is not encrypted or CreatedDate if there the object has createdDated or Id Signature public virtual String getOrderBy() getRelatedFieldListString(relation) Returns in string form a comma delimited list of fields as defined via getSObjectFieldList and optionally getSObjectFieldSetList @depricated See newQueryFactory Signature public String getRelatedFieldListString(String relation) Parameters relation Type: String Will prefix fields with the given relation, e.g. MyLookupField__r getSObjectFieldList() Implement this method to inform the base class of the common fields to be queried or listed by the base class methods Signature abstract List<Schema.SObjectField> getSObjectFieldList() getSObjectFieldSetList() Override this method to provide a list of Fieldsets that can optionally drive inclusion of additional fields in the base queries Signature public virtual List<Schema.FieldSet> getSObjectFieldSetList() getSObjectName() Returns the string representation of the SObject this selector represents Signature public String getSObjectName() getSObjectType() Implement this method to inform the base class of the SObject(custom or standard) to be queried Signature abstract Schema.SObjectType getSObjectType() getSObjectType2() Public access for the getSObjectType during Mock registration(adding public to the existing method broken base class API backwards compatibility) Signature public SObjectType getSObjectType2() ignoreCRUD() Set the selector to ignore CRUD security @return Signature public fflib_SObjectSelector ignoreCRUD() includeFieldSetFields() Set the selector to automatically include the FieldSet fields when building queries Signature public fflib_SObjectSelector includeFieldSetFields() isEnforcingCRUD() Returns True if this Selector is enforcing CRUD Security Signature public Boolean isEnforcingCRUD() isEnforcingFLS() Returns True if this Selector is enforcing FLS Signature public Boolean isEnforcingFLS() isIncludeFieldSetFields() Returns True if this Selector instance has been instructed by the caller to include Field Set fields Signature public Boolean isIncludeFieldSetFields() newQueryFactory() Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by Signature public fflib_QueryFactory newQueryFactory() newQueryFactory(includeSelectorFields) Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by Signature public fflib_QueryFactory newQueryFactory(Boolean includeSelectorFields) newQueryFactory(assertCRUD, enforceFLS, includeSelectorFields) Returns a QueryFactory configured with the Selectors object, fields, fieldsets and default order by CRUD and FLS read security will be checked if the corresponding inputs are true(overrides that defined in the selector). Signature public fflib_QueryFactory newQueryFactory(Boolean assertCRUD, Boolean enforceFLS, Boolean includeSelectorFields) newQueryFactory(assertCRUD, enforceFLS, includeSelectorFields, dataAccess) Signature private fflib_QueryFactory newQueryFactory(Boolean assertCRUD, Boolean enforceFLS, Boolean includeSelectorFields, DataAccess dataAccess) queryLocatorById(idSet) Performs a SOQL query, - Selecting the fields described via getSObjectFieldsList and getSObjectFieldSetList(if included) - From the SObject described by getSObjectType - Where the Id's match those provided in the set - Ordered by the fields returned via getOrderBy Signature public virtual Database.QueryLocator queryLocatorById(Set<Id> idSet) Returns A QueryLocator(typically for use in a Batch Apex job) selectSObjectsById(idSet) Performs a SOQL query, - Selecting the fields described via getSObjectFieldsList and getSObjectFieldSetList(if included) - From the SObject described by getSObjectType - Where the Id's match those provided in the set - Ordered by the fields returned via getOrderBy Signature public virtual List<SObject> selectSObjectsById(Set<Id> idSet) Returns A list of SObject's setDataAccess(access) Signature public fflib_SObjectSelector setDataAccess(DataAccess access) setFieldListBuilder(fieldListBuilder) Use this method to override the default FieldListBuilder(created on demand via getFieldListBuilder) with a custom one, warning, this will bypass anything getSObjectFieldList or getSObjectFieldSetList returns @depricated See newQueryFactory Signature public void setFieldListBuilder(fflib_StringBuilder.FieldListBuilder fieldListBuilder) sObjectType() Public access for the getSObjectType during Mock registration(adding public to the existing method broken base class API backwards compatibility1) Signature public SObjectType sObjectType() unsortedSelectFields() Signature public fflib_SObjectSelector unsortedSelectFields()"
    },
    {
        "title": "fflib_SObjectSelectorTest",
        "fileName": "fflib_SObjectSelectorTest.html",
        "text": "fflib_SObjectSelectorTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @IsTest private with sharing class fflib_SObjectSelectorTest fflib_SObjectSelectorTest Methods assertFieldListString(fieldListString, prefix) createChatterExternalUser() Create test user getMinimumAccessUser() testAddQueryFactorySubselect() testAddQueryFactorySubselect2() testAssertIsAccessible() testConfigureQueryFactoryFields() testCRUDOff() testDefaultConfig() testGetFieldListString() testGetRelatedFieldListString() testGetSObjectName() testQueryLocatorById() testSelectSObjectsById() testSetup() testSOQL() testSOQL_defaultSorting() testWithOrderingNullsLast() testWithoutSorting() toSOQL_When_PolymorphicSelect_Expect_RelatedType() toSOQL_When_PolymorphicSelectInMulticurrency_Expect_RelatedType() toSOQL_When_SystemModeAndChildRelationship_Expect_WellFormedSOQL() toSOQL_When_SystemModeAndParentRelationshipAndDuplicateFields_Expect_WellFormedSOQL() toSOQL_When_SystemModeAndUserCannnotReadField_Expect_Success() toSOQL_When_SystemModeAndUserCannnotReadObject_Expect_Success() toSOQL_When_SystemModePolymorphicSelect_Expect_RelatedType() toSOQL_When_UserModeAndUserCannnotReadField_Expect_QueryException() toSOQL_When_UserModeAndUserCannnotReadObject_Expect_QueryException() assertFieldListString(fieldListString, prefix) Signature private static void assertFieldListString(String fieldListString, String prefix) createChatterExternalUser() Create test user Signature private static User createChatterExternalUser() getMinimumAccessUser() Signature private static User getMinimumAccessUser() testAddQueryFactorySubselect() Signature @IsTest static void testAddQueryFactorySubselect() testAddQueryFactorySubselect2() Signature @IsTest static void testAddQueryFactorySubselect2() testAssertIsAccessible() Signature static testMethod void testAssertIsAccessible() testConfigureQueryFactoryFields() Signature @IsTest static void testConfigureQueryFactoryFields() testCRUDOff() Signature static testMethod void testCRUDOff() testDefaultConfig() Signature static testMethod void testDefaultConfig() testGetFieldListString() Signature @IsTest static void testGetFieldListString() testGetRelatedFieldListString() Signature @IsTest static void testGetRelatedFieldListString() testGetSObjectName() Signature static testMethod void testGetSObjectName() testQueryLocatorById() Signature static testMethod void testQueryLocatorById() testSelectSObjectsById() Signature static testMethod void testSelectSObjectsById() testSetup() Signature @TestSetup static void testSetup() testSOQL() Signature static testMethod void testSOQL() testSOQL_defaultSorting() Signature static testMethod void testSOQL_defaultSorting() testWithOrderingNullsLast() Signature @IsTest static void testWithOrderingNullsLast() testWithoutSorting() Signature @IsTest static void testWithoutSorting() toSOQL_When_PolymorphicSelect_Expect_RelatedType() Signature @IsTest static void toSOQL_When_PolymorphicSelect_Expect_RelatedType() toSOQL_When_PolymorphicSelectInMulticurrency_Expect_RelatedType() Signature @IsTest static void toSOQL_When_PolymorphicSelectInMulticurrency_Expect_RelatedType() toSOQL_When_SystemModeAndChildRelationship_Expect_WellFormedSOQL() Signature @IsTest static void toSOQL_When_SystemModeAndChildRelationship_Expect_WellFormedSOQL() toSOQL_When_SystemModeAndParentRelationshipAndDuplicateFields_Expect_WellFormedSOQL() Signature @IsTest static void toSOQL_When_SystemModeAndParentRelationshipAndDuplicateFields_Expect_WellFormedSOQL() toSOQL_When_SystemModeAndUserCannnotReadField_Expect_Success() Signature @IsTest static void toSOQL_When_SystemModeAndUserCannnotReadField_Expect_Success() toSOQL_When_SystemModeAndUserCannnotReadObject_Expect_Success() Signature @IsTest static void toSOQL_When_SystemModeAndUserCannnotReadObject_Expect_Success() toSOQL_When_SystemModePolymorphicSelect_Expect_RelatedType() Signature @IsTest static void toSOQL_When_SystemModePolymorphicSelect_Expect_RelatedType() toSOQL_When_UserModeAndUserCannnotReadField_Expect_QueryException() Signature @IsTest static void toSOQL_When_UserModeAndUserCannnotReadField_Expect_QueryException() toSOQL_When_UserModeAndUserCannnotReadObject_Expect_QueryException() Signature @IsTest static void toSOQL_When_UserModeAndUserCannnotReadObject_Expect_QueryException() fflib_SObjectSelectorTest.AccessLevelAccountSelector Signature private class AccessLevelAccountSelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.AccessLevelAccountSelector Constructors AccessLevelAccountSelector() AccessLevelAccountSelector(access) AccessLevelAccountSelector() Signature public AccessLevelAccountSelector() AccessLevelAccountSelector(access) Signature public AccessLevelAccountSelector(DataAccess access) fflib_SObjectSelectorTest.AccessLevelAccountSelector Methods createSelectAccountWithOpportunitiesSOQL() getSObjectFieldList() getSObjectType() selectAccountWithOpportunities() createSelectAccountWithOpportunitiesSOQL() Signature @TestVisible private String createSelectAccountWithOpportunitiesSOQL() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() selectAccountWithOpportunities() Signature public List<Account> selectAccountWithOpportunities() fflib_SObjectSelectorTest.AccessLevelOpportunitySelector Signature private class AccessLevelOpportunitySelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.AccessLevelOpportunitySelector Constructors AccessLevelOpportunitySelector() AccessLevelOpportunitySelector(access) AccessLevelOpportunitySelector() Signature public AccessLevelOpportunitySelector() AccessLevelOpportunitySelector(access) Signature public AccessLevelOpportunitySelector(DataAccess access) fflib_SObjectSelectorTest.AccessLevelOpportunitySelector Methods createSelectAllWithAccountSOQL() getSObjectFieldList() getSObjectType() selectAllWithAccount() createSelectAllWithAccountSOQL() Signature @TestVisible private String createSelectAllWithAccountSOQL() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() selectAllWithAccount() Signature public List<Opportunity> selectAllWithAccount() fflib_SObjectSelectorTest.CampaignMemberSelector Signature private class CampaignMemberSelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.CampaignMemberSelector Constructors CampaignMemberSelector(access) CampaignMemberSelector(access) Signature public CampaignMemberSelector(DataAccess access) fflib_SObjectSelectorTest.CampaignMemberSelector Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() fflib_SObjectSelectorTest.GroupSelector Signature private class GroupSelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.GroupSelector Constructors GroupSelector() GroupSelector() Signature public GroupSelector() fflib_SObjectSelectorTest.GroupSelector Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() fflib_SObjectSelectorTest.LeadSelector Signature private class LeadSelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.LeadSelector Constructors LeadSelector() LeadSelector() Signature public LeadSelector() fflib_SObjectSelectorTest.LeadSelector Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() fflib_SObjectSelectorTest.Testfflib_SObjectSelector Signature private class Testfflib_SObjectSelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.Testfflib_SObjectSelector Constructors Testfflib_SObjectSelector() Testfflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS, sortSelectFields) Testfflib_SObjectSelector() Signature public Testfflib_SObjectSelector() Testfflib_SObjectSelector(includeFieldSetFields, enforceCRUD, enforceFLS, sortSelectFields) Signature public Testfflib_SObjectSelector(Boolean includeFieldSetFields, Boolean enforceCRUD, Boolean enforceFLS, Boolean sortSelectFields) fflib_SObjectSelectorTest.Testfflib_SObjectSelector Methods getOrderBy() getSObjectFieldList() getSObjectType() getOrderBy() Signature public override String getOrderBy() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() fflib_SObjectSelectorTest.Testfflib_SObjectSelectorDefaultSorting Signature private class Testfflib_SObjectSelectorDefaultSorting extends fflib_SObjectSelector fflib_SObjectSelectorTest.Testfflib_SObjectSelectorDefaultSorting Constructors Testfflib_SObjectSelectorDefaultSorting(includeFieldSetFields) Testfflib_SObjectSelectorDefaultSorting(includeFieldSetFields) Signature public Testfflib_SObjectSelectorDefaultSorting(Boolean includeFieldSetFields) fflib_SObjectSelectorTest.Testfflib_SObjectSelectorDefaultSorting Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() fflib_SObjectSelectorTest.Testfflib_UserSObjectSelector Signature private class Testfflib_UserSObjectSelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.Testfflib_UserSObjectSelector Constructors Testfflib_UserSObjectSelector() Testfflib_UserSObjectSelector() Signature public Testfflib_UserSObjectSelector() fflib_SObjectSelectorTest.Testfflib_UserSObjectSelector Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType() fflib_SObjectSelectorTest.UserSelector Signature private class UserSelector extends fflib_SObjectSelector fflib_SObjectSelectorTest.UserSelector Constructors UserSelector() UserSelector() Signature public UserSelector() fflib_SObjectSelectorTest.UserSelector Methods getSObjectFieldList() getSObjectType() getSObjectFieldList() Signature public List<Schema.SObjectField> getSObjectFieldList() getSObjectType() Signature public Schema.SObjectType getSObjectType()"
    },
    {
        "title": "fflib_SObjectsTest",
        "fileName": "fflib_SObjectsTest.html",
        "text": "fflib_SObjectsTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @IsTest private class fflib_SObjectsTest fflib_SObjectsTest Methods generateDomain() itShouldClearTheField() itShouldReturnFieldValues() itShouldReturnRecordsIds() itShouldReturnRecordsWithAllFieldValues() itShouldReturnRecordsWithFieldValues() itShouldReturnRecordsWithoutAllFieldValues() itShouldReturnRecordsWithoutFieldValues() itShouldReturnRecordsWithShippingCountry() itShouldReturnTheDomainsType() itShouldSetFieldValue() itShouldSetFieldValueByCondition() testDomainErrorLogging() testErrorLogging() generateDomain() Signature private static DomainAccounts generateDomain() itShouldClearTheField() Signature @IsTest static void itShouldClearTheField() itShouldReturnFieldValues() Signature @IsTest static void itShouldReturnFieldValues() itShouldReturnRecordsIds() Signature @IsTest static void itShouldReturnRecordsIds() itShouldReturnRecordsWithAllFieldValues() Signature @IsTest static void itShouldReturnRecordsWithAllFieldValues() itShouldReturnRecordsWithFieldValues() Signature @IsTest static void itShouldReturnRecordsWithFieldValues() itShouldReturnRecordsWithoutAllFieldValues() Signature @IsTest static void itShouldReturnRecordsWithoutAllFieldValues() itShouldReturnRecordsWithoutFieldValues() Signature @IsTest static void itShouldReturnRecordsWithoutFieldValues() itShouldReturnRecordsWithShippingCountry() Signature @IsTest static void itShouldReturnRecordsWithShippingCountry() itShouldReturnTheDomainsType() Signature @IsTest static void itShouldReturnTheDomainsType() itShouldSetFieldValue() Signature @IsTest static void itShouldSetFieldValue() itShouldSetFieldValueByCondition() Signature @IsTest static void itShouldSetFieldValueByCondition() testDomainErrorLogging() Signature @IsTest static void testDomainErrorLogging() testErrorLogging() Signature @IsTest static void testErrorLogging() fflib_SObjectsTest.DomainAccounts Signature private class DomainAccounts extends fflib_SObjects fflib_SObjectsTest.DomainAccounts Constructors DomainAccounts(records) DomainAccounts(records) Signature public DomainAccounts(List<SObject> records) fflib_SObjectsTest.DomainAccounts Methods addNameError(message) clearShippingCountry() selectByRating(rating) selectByShippingCountry(country) selectPopulatedRecords() selectWithEmptyRecord() selectWithoutShippingCountry() selectWithShippingCountry() setRatingByShippingCountry(ratingByCountry) setShippingCountry(country) addNameError(message) Signature public void addNameError(String message) clearShippingCountry() Signature public void clearShippingCountry() selectByRating(rating) Signature public List<Account> selectByRating(String rating) selectByShippingCountry(country) Signature public List<Account> selectByShippingCountry(String country) selectPopulatedRecords() Signature public List<Account> selectPopulatedRecords() selectWithEmptyRecord() Signature public List<Account> selectWithEmptyRecord() selectWithoutShippingCountry() Signature public List<Account> selectWithoutShippingCountry() selectWithShippingCountry() Signature public List<Account> selectWithShippingCountry() setRatingByShippingCountry(ratingByCountry) Signature public void setRatingByShippingCountry(Map<Object, Object> ratingByCountry) setShippingCountry(country) Signature public void setShippingCountry(String country)"
    },
    {
        "title": "fflib_SObjectUnitOfWork",
        "fileName": "fflib_SObjectUnitOfWork.html",
        "text": "fflib_SObjectUnitOfWork Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public virtual class fflib_SObjectUnitOfWork fflib_SObjectUnitOfWork Properties Name Signature Annotations m_deletedMapByType protected Map<String, Map<Id, SObject>> m_deletedMapByType m_dirtyMapByType protected Map<String, Map<Id, SObject>> m_dirtyMapByType m_dml protected IDML m_dml m_emailWork protected IEmailWork m_emailWork @TestVisible m_emptyRecycleBinMapByType protected Map<String, Map<Id, SObject>> m_emptyRecycleBinMapByType m_newListByType protected Map<String, List<SObject>> m_newListByType m_publishAfterFailureListByType protected Map<String, List<SObject>> m_publishAfterFailureListByType m_publishAfterSuccessListByType protected Map<String, List<SObject>> m_publishAfterSuccessListByType m_publishBeforeListByType protected Map<String, List<SObject>> m_publishBeforeListByType m_relationships protected Map<String, Relationships> m_relationships m_sObjectTypes protected List<Schema.SObjectType> m_sObjectTypes m_workList protected List<IDoWork> m_workList fflib_SObjectUnitOfWork Constructors fflib_SObjectUnitOfWork(sObjectTypes) Constructs a new UnitOfWork to support work against the given object list fflib_SObjectUnitOfWork(sObjectTypes, dml) fflib_SObjectUnitOfWork(sObjectTypes) Constructs a new UnitOfWork to support work against the given object list Signature public fflib_SObjectUnitOfWork(List<Schema.SObjectType> sObjectTypes) Parameters sObjectTypes Type: List<Schema.SObjectType> A list of objects given in dependency order(least dependent first) fflib_SObjectUnitOfWork(sObjectTypes, dml) Signature public fflib_SObjectUnitOfWork(List<Schema.SObjectType> sObjectTypes, IDML dml) fflib_SObjectUnitOfWork Methods assertForEventSObjectType(sObjectType) assertForNonEventSObjectType(sObjectType) assertForSupportedSObjectType(theMap, sObjectType) commitWork() Takes all the work that has been registered with the UnitOfWork and commits it to the database deleteDmlByType() doAfterCommitWorkFailureSteps() doAfterCommitWorkSteps(wasSuccessful) doAfterCommitWorkSuccessSteps() doCommitWork() doWork() emptyRecycleBinByType() handleRegisterType(sObjectType) Registers the type to be used for DML operations insertDmlByType() onCommitWorkFinished(wasSuccessful) onCommitWorkFinishing() onCommitWorkStarting() onDMLFinished() onDMLStarting() onDoWorkFinished() onDoWorkStarting() onPublishAfterFailureEventsFinished() onPublishAfterFailureEventsStarting() onPublishAfterSuccessEventsFinished() onPublishAfterSuccessEventsStarting() onPublishBeforeEventsFinished() onPublishBeforeEventsStarting() onRegisterType(sObjectType) publishAfterFailureEvents() publishAfterSuccessEvents() publishBeforeEventsStarting() registerDeleted(record) Register an existing record to be deleted during the commitWork method registerDeleted(records) Register a list of existing records to be deleted during the commitWork method registerDirty(record) Register an existing record to be updated during the commitWork method registerDirty(records, dirtyFields) Registers the entire records as dirty or just only the dirty fields if the record was already registered registerDirty(record, dirtyFields) Registers the entire record as dirty or just only the dirty fields if the record was already registered registerDirty(record, relatedToParentField, relatedToParentRecord) Register an existing record to be updated when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) registerDirty(records) Register a list of existing records to be updated during the commitWork method registerEmail(email) Registers the given email to be sent during the commitWork registerEmptyRecycleBin(record) Register an deleted record to be removed from the recycle bin during the commitWork method registerEmptyRecycleBin(records) Register deleted records to be removed from the recycle bin during the commitWork method registerNew(record) Register a newly created SObject instance to be inserted when commitWork is called registerNew(records) Register a list of newly created SObject instances to be inserted when commitWork is called registerNew(record, relatedToParentField, relatedToParentRecord) Register a newly created SObject instance to be inserted when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) registerPermanentlyDeleted(records) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method registerPermanentlyDeleted(record) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method registerPublishAfterFailureTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called registerPublishAfterFailureTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called registerPublishAfterSuccessTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called registerPublishAfterSuccessTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called registerPublishBeforeTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called registerPublishBeforeTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called registerRelationship(record, relatedToField, relatedTo) Register a relationship between two records that have yet to be inserted to the database. This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. registerRelationship(email, relatedTo) Registers a relationship between a record and a Messaging.Email where the record has yet to be inserted to the database.  This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. registerRelationship(record, relatedToField, externalIdField, externalId) Registers a relationship between a record and a lookup value using an external ID field and a provided value. This information will be used during the commitWork phase to make the lookup reference requested when inserted to the database. Usage Example: uow.registerRelationship(recordSObject, record_sobject__c.relationship_field__c, lookup_sobject__c.external_id__c, 'abc123'); Wraps putSObject, creating a new instance of the lookup sobject using the external id field and value. registerUpsert(record) Register a new or existing record to be inserted/updated during the commitWork method registerUpsert(records) Register a list of mix of new and existing records to be inserted updated during the commitWork method registerWork(work) Register a generic piece of work to be invoked during the commitWork phase resolveEmailRelationships() updateDmlByType() assertForEventSObjectType(sObjectType) Signature @TestVisible private void assertForEventSObjectType(String sObjectType) assertForNonEventSObjectType(sObjectType) Signature @TestVisible private void assertForNonEventSObjectType(String sObjectType) assertForSupportedSObjectType(theMap, sObjectType) Signature @TestVisible private void assertForSupportedSObjectType(Map<String, Object> theMap, String sObjectType) commitWork() Takes all the work that has been registered with the UnitOfWork and commits it to the database Signature public void commitWork() deleteDmlByType() Signature private void deleteDmlByType() doAfterCommitWorkFailureSteps() Signature private void doAfterCommitWorkFailureSteps() doAfterCommitWorkSteps(wasSuccessful) Signature private void doAfterCommitWorkSteps(Boolean wasSuccessful) doAfterCommitWorkSuccessSteps() Signature private void doAfterCommitWorkSuccessSteps() doCommitWork() Signature private void doCommitWork() doWork() Signature private void doWork() emptyRecycleBinByType() Signature private void emptyRecycleBinByType() handleRegisterType(sObjectType) Registers the type to be used for DML operations Signature private void handleRegisterType(Schema.SObjectType sObjectType) Parameters sObjectType Type: Schema.SObjectType - The type to register insertDmlByType() Signature private void insertDmlByType() onCommitWorkFinished(wasSuccessful) Signature public virtual void onCommitWorkFinished(Boolean wasSuccessful) onCommitWorkFinishing() Signature public virtual void onCommitWorkFinishing() onCommitWorkStarting() Signature public virtual void onCommitWorkStarting() onDMLFinished() Signature public virtual void onDMLFinished() onDMLStarting() Signature public virtual void onDMLStarting() onDoWorkFinished() Signature public virtual void onDoWorkFinished() onDoWorkStarting() Signature public virtual void onDoWorkStarting() onPublishAfterFailureEventsFinished() Signature public virtual void onPublishAfterFailureEventsFinished() onPublishAfterFailureEventsStarting() Signature public virtual void onPublishAfterFailureEventsStarting() onPublishAfterSuccessEventsFinished() Signature public virtual void onPublishAfterSuccessEventsFinished() onPublishAfterSuccessEventsStarting() Signature public virtual void onPublishAfterSuccessEventsStarting() onPublishBeforeEventsFinished() Signature public virtual void onPublishBeforeEventsFinished() onPublishBeforeEventsStarting() Signature public virtual void onPublishBeforeEventsStarting() onRegisterType(sObjectType) Signature public virtual void onRegisterType(Schema.SObjectType sObjectType) publishAfterFailureEvents() Signature private void publishAfterFailureEvents() publishAfterSuccessEvents() Signature private void publishAfterSuccessEvents() publishBeforeEventsStarting() Signature private void publishBeforeEventsStarting() registerDeleted(record) Register an existing record to be deleted during the commitWork method Signature public void registerDeleted(SObject record) Parameters record Type: SObject An existing record registerDeleted(records) Register a list of existing records to be deleted during the commitWork method Signature public void registerDeleted(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerDirty(record) Register an existing record to be updated during the commitWork method Signature public void registerDirty(SObject record) Parameters record Type: SObject An existing record registerDirty(records, dirtyFields) Registers the entire records as dirty or just only the dirty fields if the record was already registered Signature public void registerDirty(List<SObject> records, List<SObjectField> dirtyFields) Parameters records Type: List<SObject> SObjects to register as dirty dirtyFields Type: List<SObjectField> A list of modified fields registerDirty(record, dirtyFields) Registers the entire record as dirty or just only the dirty fields if the record was already registered Signature public void registerDirty(SObject record, List<SObjectField> dirtyFields) Parameters record Type: SObject SObject to register as dirty dirtyFields Type: List<SObjectField> A list of modified fields registerDirty(record, relatedToParentField, relatedToParentRecord) Register an existing record to be updated when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) Signature public void registerDirty(SObject record, Schema.SObjectField relatedToParentField, SObject relatedToParentRecord) Parameters record Type: SObject A newly created SObject instance to be inserted during commitWork relatedToParentField Type: Schema.SObjectField A SObjectField reference to the child field that associates the child record with its parent relatedToParentRecord Type: SObject A SObject instance of the parent record(should also be registered as new separately) registerDirty(records) Register a list of existing records to be updated during the commitWork method Signature public void registerDirty(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerEmail(email) Registers the given email to be sent during the commitWork Signature public void registerEmail(Messaging.Email email) registerEmptyRecycleBin(record) Register an deleted record to be removed from the recycle bin during the commitWork method Signature public void registerEmptyRecycleBin(SObject record) Parameters record Type: SObject An deleted record registerEmptyRecycleBin(records) Register deleted records to be removed from the recycle bin during the commitWork method Signature public void registerEmptyRecycleBin(List<SObject> records) Parameters records Type: List<SObject> Deleted records registerNew(record) Register a newly created SObject instance to be inserted when commitWork is called Signature public void registerNew(SObject record) Parameters record Type: SObject A newly created SObject instance to be inserted during commitWork registerNew(records) Register a list of newly created SObject instances to be inserted when commitWork is called Signature public void registerNew(List<SObject> records) Parameters records Type: List<SObject> A list of newly created SObject instances to be inserted during commitWork registerNew(record, relatedToParentField, relatedToParentRecord) Register a newly created SObject instance to be inserted when commitWork is called, you may also provide a reference to the parent record instance(should also be registered as new separately) Signature public void registerNew(SObject record, Schema.SObjectField relatedToParentField, SObject relatedToParentRecord) Parameters record Type: SObject A newly created SObject instance to be inserted during commitWork relatedToParentField Type: Schema.SObjectField A SObjectField reference to the child field that associates the child record with its parent relatedToParentRecord Type: SObject A SObject instance of the parent record(should also be registered as new separately) registerPermanentlyDeleted(records) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method Signature public void registerPermanentlyDeleted(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerPermanentlyDeleted(record) Register a list of existing records to be deleted and removed from the recycle bin during the commitWork method Signature public void registerPermanentlyDeleted(SObject record) Parameters record Type: SObject A list of existing records registerPublishAfterFailureTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called Signature public void registerPublishAfterFailureTransaction(SObject record) Parameters record Type: SObject A newly created SObject(Platform Event) instance to be inserted during commitWork registerPublishAfterFailureTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called Signature public void registerPublishAfterFailureTransaction(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerPublishAfterSuccessTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called Signature public void registerPublishAfterSuccessTransaction(SObject record) Parameters record Type: SObject A newly created SObject(Platform Event) instance to be inserted during commitWork registerPublishAfterSuccessTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called Signature public void registerPublishAfterSuccessTransaction(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerPublishBeforeTransaction(record) Register a newly created SObject(Platform Event) instance to be published when commitWork is called Signature public void registerPublishBeforeTransaction(SObject record) Parameters record Type: SObject A newly created SObject(Platform Event) instance to be inserted during commitWork registerPublishBeforeTransaction(records) Register a list of newly created SObject(Platform Event) instance to be published when commitWork is called Signature public void registerPublishBeforeTransaction(List<SObject> records) Parameters records Type: List<SObject> A list of existing records registerRelationship(record, relatedToField, relatedTo) Register a relationship between two records that have yet to be inserted to the database. This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. Signature public void registerRelationship(SObject record, Schema.SObjectField relatedToField, SObject relatedTo) Parameters record Type: SObject An existing or newly created record relatedToField Type: Schema.SObjectField A SObjectField reference to the lookup field that relates the two records together relatedTo Type: SObject A SObject instance(yet to be committed to the database) registerRelationship(email, relatedTo) Registers a relationship between a record and a Messaging.Email where the record has yet to be inserted to the database.  This information will be used during the commitWork phase to make the references only when related records have been inserted to the database. Signature public void registerRelationship( Messaging.SingleEmailMessage email, SObject relatedTo ) Parameters email Type:  Messaging.SingleEmailMessage a single email message instance relatedTo Type: SObject A SObject instance(yet to be committed to the database) registerRelationship(record, relatedToField, externalIdField, externalId) Registers a relationship between a record and a lookup value using an external ID field and a provided value. This information will be used during the commitWork phase to make the lookup reference requested when inserted to the database. Usage Example: uow.registerRelationship(recordSObject, record_sobject__c.relationship_field__c, lookup_sobject__c.external_id__c, 'abc123'); Wraps putSObject, creating a new instance of the lookup sobject using the external id field and value. Signature public void registerRelationship(SObject record, Schema.SObjectField relatedToField, Schema.SObjectField externalIdField, Object externalId) Parameters record Type: SObject An existing or newly created record relatedToField Type: Schema.SObjectField A SObjectField reference to the lookup field that relates the two records together externalIdField Type: Schema.SObjectField A SObjectField reference to a field on the target SObject that is marked as isExternalId externalId Type: Object A Object representing the targeted value of the externalIdField in said lookup registerUpsert(record) Register a new or existing record to be inserted/updated during the commitWork method Signature public void registerUpsert(SObject record) Parameters record Type: SObject A new or existing record registerUpsert(records) Register a list of mix of new and existing records to be inserted updated during the commitWork method Signature public void registerUpsert(List<SObject> records) Parameters records Type: List<SObject> A list of mix of new and existing records registerWork(work) Register a generic piece of work to be invoked during the commitWork phase Signature public void registerWork(IDoWork work) resolveEmailRelationships() Signature private void resolveEmailRelationships() updateDmlByType() Signature private void updateDmlByType() fflib_SObjectUnitOfWork.EmailRelationship Signature private class EmailRelationship implements IRelationship fflib_SObjectUnitOfWork.EmailRelationship Properties Name Signature email public Messaging.SingleEmailMessage email relatedTo public SObject relatedTo fflib_SObjectUnitOfWork.EmailRelationship Methods resolve() resolve() Signature public void resolve() fflib_SObjectUnitOfWork.IDML Signature public interface IDML fflib_SObjectUnitOfWork.IDML Methods dmlDelete(objList) dmlInsert(objList) dmlUpdate(objList) emptyRecycleBin(objList) eventPublish(objList) dmlDelete(objList) Signature void dmlDelete(List<SObject> objList) dmlInsert(objList) Signature void dmlInsert(List<SObject> objList) dmlUpdate(objList) Signature void dmlUpdate(List<SObject> objList) emptyRecycleBin(objList) Signature void emptyRecycleBin(List<SObject> objList) eventPublish(objList) Signature void eventPublish(List<SObject> objList) fflib_SObjectUnitOfWork.IDoWork Interface describes work to be performed during the commitWork method Signature public interface IDoWork fflib_SObjectUnitOfWork.IDoWork Methods doWork() doWork() Signature void doWork() fflib_SObjectUnitOfWork.IEmailWork Internal implementation of Messaging.sendEmail, see outer class registerEmail method Signature public interface IEmailWork extends IDoWork fflib_SObjectUnitOfWork.IEmailWork Methods registerEmail(email) registerEmail(email) Signature void registerEmail(Messaging.Email email) fflib_SObjectUnitOfWork.IRelationship Signature private interface IRelationship fflib_SObjectUnitOfWork.IRelationship Methods resolve() resolve() Signature void resolve() fflib_SObjectUnitOfWork.Relationship Signature private class Relationship implements IRelationship fflib_SObjectUnitOfWork.Relationship Properties Name Signature Record public SObject Record RelatedTo public SObject RelatedTo RelatedToField public Schema.SObjectField RelatedToField fflib_SObjectUnitOfWork.Relationship Methods resolve() resolve() Signature public void resolve() fflib_SObjectUnitOfWork.RelationshipByExternalId Signature private class RelationshipByExternalId implements IRelationship fflib_SObjectUnitOfWork.RelationshipByExternalId Properties Name Signature ExternalId public Object ExternalId ExternalIdField public Schema.SObjectField ExternalIdField Record public SObject Record RelatedTo public Schema.SObjectType RelatedTo RelatedToField public Schema.SObjectField RelatedToField RelationshipName public String RelationshipName fflib_SObjectUnitOfWork.RelationshipByExternalId Methods resolve() resolve() Signature public void resolve() fflib_SObjectUnitOfWork.Relationships Signature private class Relationships fflib_SObjectUnitOfWork.Relationships Properties Name Signature m_relationships private List<IRelationship> m_relationships fflib_SObjectUnitOfWork.Relationships Methods add(record, relatedToField, externalIdField, externalId) add(record, relatedToField, relatedTo) add(email, relatedTo) resolve() add(record, relatedToField, externalIdField, externalId) Signature public void add(SObject record, Schema.SObjectField relatedToField, Schema.SObjectField externalIdField, Object externalId) add(record, relatedToField, relatedTo) Signature public void add(SObject record, Schema.SObjectField relatedToField, SObject relatedTo) add(email, relatedTo) Signature public void add(Messaging.SingleEmailMessage email, SObject relatedTo) resolve() Signature public void resolve() fflib_SObjectUnitOfWork.SendEmailWork Signature private class SendEmailWork implements IEmailWork fflib_SObjectUnitOfWork.SendEmailWork Properties Name Signature emails private List<Messaging.Email> emails fflib_SObjectUnitOfWork.SendEmailWork Constructors SendEmailWork() SendEmailWork() Signature public SendEmailWork() fflib_SObjectUnitOfWork.SendEmailWork Methods doWork() registerEmail(email) doWork() Signature public void doWork() registerEmail(email) Signature public void registerEmail(Messaging.Email email) fflib_SObjectUnitOfWork.SimpleDML Signature public virtual class SimpleDML implements IDML fflib_SObjectUnitOfWork.SimpleDML Methods dmlDelete(objList) dmlInsert(objList) dmlUpdate(objList) emptyRecycleBin(objList) eventPublish(objList) dmlDelete(objList) Signature public virtual void dmlDelete(List<SObject> objList) dmlInsert(objList) Signature public virtual void dmlInsert(List<SObject> objList) dmlUpdate(objList) Signature public virtual void dmlUpdate(List<SObject> objList) emptyRecycleBin(objList) Signature public virtual void emptyRecycleBin(List<SObject> objList) eventPublish(objList) Signature public virtual void eventPublish(List<SObject> objList) fflib_SObjectUnitOfWork.UnitOfWorkException UnitOfWork Exception Signature public class UnitOfWorkException extends Exception fflib_SObjectUnitOfWork.UserModeDML Signature public virtual class UserModeDML extends SimpleDML fflib_SObjectUnitOfWork.UserModeDML Properties Name Signature Annotations m_accessLevel private AccessLevel m_accessLevel @TestVisible fflib_SObjectUnitOfWork.UserModeDML Constructors UserModeDML() UserModeDML(access) Supply the AccessLevel explicitly(UserModeDML uses AccessMode.USER_MODE, by default) UserModeDML() Signature public UserModeDML() UserModeDML(access) Supply the AccessLevel explicitly(UserModeDML uses AccessMode.USER_MODE, by default) Signature public UserModeDML(AccessLevel access) fflib_SObjectUnitOfWork.UserModeDML Methods dmlDelete(objList) dmlInsert(objList) dmlUpdate(objList) dmlDelete(objList) Signature public virtual override void dmlDelete(List<SObject> objList) dmlInsert(objList) Signature public virtual override void dmlInsert(List<SObject> objList) dmlUpdate(objList) Signature public virtual override void dmlUpdate(List<SObject> objList)"
    },
    {
        "title": "fflib_SObjectUnitOfWorkTest",
        "fileName": "fflib_SObjectUnitOfWorkTest.html",
        "text": "fflib_SObjectUnitOfWorkTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @IsTest(IsParallel=true) private with sharing class fflib_SObjectUnitOfWorkTest fflib_SObjectUnitOfWorkTest Properties Name Signature MY_SOBJECTS private static List<Schema.SObjectType> MY_SOBJECTS fflib_SObjectUnitOfWorkTest Methods assertEvents(expectedEvents, actualEvents, expectedTypes, actualTypes) Assert that actual events exactly match expected events(size, order and name) and types match expected types constructUserModeDML_When_AccessLevelSupplied_Expect_SameAccessLevel() constructUserModeDML_When_DefaultConstructor_Expect_UserMode() testAssertForEventSObjectType() testAssertForEventSObjectType_ThrowExceptionOnNonEventObject() testAssertForNonEventSObjectType() testAssertForNonEventSObjectType_ThrowExceptionOnEventObject() testAssertForSupportedSObjectType_throwExceptionOnUnsupportedType() testDerivedUnitOfWork_CommitDMLFail() Create uow with data that results in DML Exception Testing: - Correct events are fired when commitWork fails during DML processing testDerivedUnitOfWork_CommitDoWorkFail() Create uow with work that fails Testing: - Correct events are fired when commitWork fails during DoWork processing testDerivedUnitOfWork_CommitSuccess() Create uow with new records and commit Testing: - Correct events are fired when commitWork completes successfully testRegisterDeleted() testRegisterDirty_ExpectReplacement() Try registering two instances of the same record as dirty. Second register should overwrite first. Testing: - Exception is thrown stopping second registration testRegisterDirty_field() Try registering a single field as dirty. Testing: - field is updated testRegisterDirty_ThrowExceptionOnNewRecord() testRegisterDirtyRecordsWithDirtyFields() Try registering a single field as dirty on multiple records. testRegisterDirtyRecordsWithDirtyFields_failing() Try registering a single field as dirty on multiple records. testRegisterEmptyRecycleBin() testRegisterNew_ThrowExceptionOnDirtyRecord() testRegisterPermanentlyDeleted() testRegisterUpsert() testUnitOfWorkEmail() assertEvents(expectedEvents, actualEvents, expectedTypes, actualTypes) Assert that actual events exactly match expected events(size, order and name) and types match expected types Signature private static void assertEvents(List<String> expectedEvents, List<String> actualEvents, Set<Schema.SObjectType> expectedTypes, Set<Schema.SObjectType> actualTypes) constructUserModeDML_When_AccessLevelSupplied_Expect_SameAccessLevel() Signature @IsTest private static void constructUserModeDML_When_AccessLevelSupplied_Expect_SameAccessLevel() constructUserModeDML_When_DefaultConstructor_Expect_UserMode() Signature @IsTest private static void constructUserModeDML_When_DefaultConstructor_Expect_UserMode() testAssertForEventSObjectType() Signature @IsTest private static void testAssertForEventSObjectType() testAssertForEventSObjectType_ThrowExceptionOnNonEventObject() Signature @IsTest private static void testAssertForEventSObjectType_ThrowExceptionOnNonEventObject() testAssertForNonEventSObjectType() Signature @IsTest private static void testAssertForNonEventSObjectType() testAssertForNonEventSObjectType_ThrowExceptionOnEventObject() Signature @IsTest private static void testAssertForNonEventSObjectType_ThrowExceptionOnEventObject() testAssertForSupportedSObjectType_throwExceptionOnUnsupportedType() Signature @IsTest private static void testAssertForSupportedSObjectType_throwExceptionOnUnsupportedType() testDerivedUnitOfWork_CommitDMLFail() Create uow with data that results in DML Exception Testing: - Correct events are fired when commitWork fails during DML processing Signature @IsTest private static void testDerivedUnitOfWork_CommitDMLFail() testDerivedUnitOfWork_CommitDoWorkFail() Create uow with work that fails Testing: - Correct events are fired when commitWork fails during DoWork processing Signature @isTest private static void testDerivedUnitOfWork_CommitDoWorkFail() testDerivedUnitOfWork_CommitSuccess() Create uow with new records and commit Testing: - Correct events are fired when commitWork completes successfully Signature @IsTest private static void testDerivedUnitOfWork_CommitSuccess() testRegisterDeleted() Signature @IsTest private static void testRegisterDeleted() testRegisterDirty_ExpectReplacement() Try registering two instances of the same record as dirty. Second register should overwrite first. Testing: - Exception is thrown stopping second registration Signature @IsTest private static void testRegisterDirty_ExpectReplacement() testRegisterDirty_field() Try registering a single field as dirty. Testing: - field is updated Signature @IsTest private static void testRegisterDirty_field() testRegisterDirty_ThrowExceptionOnNewRecord() Signature @IsTest private static void testRegisterDirty_ThrowExceptionOnNewRecord() testRegisterDirtyRecordsWithDirtyFields() Try registering a single field as dirty on multiple records. Signature @IsTest private static void testRegisterDirtyRecordsWithDirtyFields() testRegisterDirtyRecordsWithDirtyFields_failing() Try registering a single field as dirty on multiple records. Signature @IsTest private static void testRegisterDirtyRecordsWithDirtyFields_failing() testRegisterEmptyRecycleBin() Signature @IsTest private static void testRegisterEmptyRecycleBin() testRegisterNew_ThrowExceptionOnDirtyRecord() Signature @IsTest private static void testRegisterNew_ThrowExceptionOnDirtyRecord() testRegisterPermanentlyDeleted() Signature @IsTest private static void testRegisterPermanentlyDeleted() testRegisterUpsert() Signature @IsTest private static void testRegisterUpsert() testUnitOfWorkEmail() Signature @IsTest private static void testUnitOfWorkEmail() fflib_SObjectUnitOfWorkTest.DerivedUnitOfWork Derived unit of work that tracks event notifications and handle registration of type Signature private class DerivedUnitOfWork extends fflib_SObjectUnitOfWork fflib_SObjectUnitOfWorkTest.DerivedUnitOfWork Properties Name Signature m_commitWorkEventsFired private List<String> m_commitWorkEventsFired m_registeredTypes private Set<Schema.SObjectType> m_registeredTypes fflib_SObjectUnitOfWorkTest.DerivedUnitOfWork Constructors DerivedUnitOfWork(sObjectTypes) DerivedUnitOfWork(sObjectTypes, dml) DerivedUnitOfWork(sObjectTypes) Signature public DerivedUnitOfWork(List<Schema.SObjectType> sObjectTypes) DerivedUnitOfWork(sObjectTypes, dml) Signature public DerivedUnitOfWork(List<Schema.SObjectType> sObjectTypes, IDML dml) fflib_SObjectUnitOfWorkTest.DerivedUnitOfWork Methods addEvent(event) getCommitWorkEventsFired() getRegisteredTypes() onCommitWorkFinished(wasSuccessful) onCommitWorkFinishing() onCommitWorkStarting() onDMLFinished() onDMLStarting() onDoWorkFinished() onDoWorkStarting() onPublishAfterFailureEventsFinished() onPublishAfterFailureEventsStarting() onPublishAfterSuccessEventsFinished() onPublishAfterSuccessEventsStarting() onPublishBeforeEventsFinished() onPublishBeforeEventsStarting() onRegisterType(sObjectType) addEvent(event) Signature private void addEvent(String event) getCommitWorkEventsFired() Signature public List<String> getCommitWorkEventsFired() getRegisteredTypes() Signature public Set<Schema.SObjectType> getRegisteredTypes() onCommitWorkFinished(wasSuccessful) Signature public override void onCommitWorkFinished(Boolean wasSuccessful) onCommitWorkFinishing() Signature public override void onCommitWorkFinishing() onCommitWorkStarting() Signature public override void onCommitWorkStarting() onDMLFinished() Signature public override void onDMLFinished() onDMLStarting() Signature public override void onDMLStarting() onDoWorkFinished() Signature public override void onDoWorkFinished() onDoWorkStarting() Signature public override void onDoWorkStarting() onPublishAfterFailureEventsFinished() Signature public override void onPublishAfterFailureEventsFinished() onPublishAfterFailureEventsStarting() Signature public override void onPublishAfterFailureEventsStarting() onPublishAfterSuccessEventsFinished() Signature public override void onPublishAfterSuccessEventsFinished() onPublishAfterSuccessEventsStarting() Signature public override void onPublishAfterSuccessEventsStarting() onPublishBeforeEventsFinished() Signature public override void onPublishBeforeEventsFinished() onPublishBeforeEventsStarting() Signature public override void onPublishBeforeEventsStarting() onRegisterType(sObjectType) Signature public override void onRegisterType(Schema.SObjectType sObjectType) fflib_SObjectUnitOfWorkTest.DerivedUnitOfWorkException Signature public class DerivedUnitOfWorkException extends Exception fflib_SObjectUnitOfWorkTest.FailDoingWork DoWork implementation that throws exception during processing Signature private class FailDoingWork implements fflib_SObjectUnitOfWork.IDoWork fflib_SObjectUnitOfWorkTest.FailDoingWork Methods doWork() doWork() Signature public void doWork() fflib_SObjectUnitOfWorkTest.FailDoingWorkException Signature public class FailDoingWorkException extends Exception fflib_SObjectUnitOfWorkTest.Mock_SendEmailWork Mock implementation of fflib_SObjectUnitOfWork.SendEmailWork Signature private class Mock_SendEmailWork implements fflib_SObjectUnitOfWork.IEmailWork fflib_SObjectUnitOfWorkTest.Mock_SendEmailWork Properties Name Signature doWorkWasCalled private Boolean doWorkWasCalled fflib_SObjectUnitOfWorkTest.Mock_SendEmailWork Constructors Mock_SendEmailWork() Mock_SendEmailWork() Signature public Mock_SendEmailWork() fflib_SObjectUnitOfWorkTest.Mock_SendEmailWork Methods doWork() registerEmail(email) doWork() Signature public void doWork() registerEmail(email) Signature public void registerEmail(Messaging.Email email) fflib_SObjectUnitOfWorkTest.MockDML Signature private class MockDML implements fflib_SObjectUnitOfWork.IDML fflib_SObjectUnitOfWorkTest.MockDML Properties Name Signature recordsForDelete public List<SObject> recordsForDelete recordsForEventPublish public List<SObject> recordsForEventPublish recordsForInsert public List<SObject> recordsForInsert recordsForRecycleBin public List<SObject> recordsForRecycleBin recordsForUpdate public List<SObject> recordsForUpdate fflib_SObjectUnitOfWorkTest.MockDML Methods dmlDelete(objList) dmlInsert(objList) dmlUpdate(objList) emptyRecycleBin(objList) eventPublish(objList) dmlDelete(objList) Signature public void dmlDelete(List<SObject> objList) dmlInsert(objList) Signature public void dmlInsert(List<SObject> objList) dmlUpdate(objList) Signature public void dmlUpdate(List<SObject> objList) emptyRecycleBin(objList) Signature public void emptyRecycleBin(List<SObject> objList) eventPublish(objList) Signature public void eventPublish(List<SObject> objList)"
    },
    {
        "title": "fflib_StringBuilder",
        "fileName": "fflib_StringBuilder.html",
        "text": "fflib_StringBuilder Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature public virtual class fflib_StringBuilder fflib_StringBuilder Properties Name Signature buffer protected List<String> buffer fflib_StringBuilder Constructors fflib_StringBuilder() Construct an empty StringBuilder fflib_StringBuilder(values) Construct a StringBuilder with the given values fflib_StringBuilder() Construct an empty StringBuilder Signature public fflib_StringBuilder() fflib_StringBuilder(values) Construct a StringBuilder with the given values Signature public fflib_StringBuilder(List<String> values) fflib_StringBuilder Methods add(values) Add the given values to the StringBuilder add(value) Add the given value to the StringBuilder getStringValue() Return the state of the StringBuilder toString() add(values) Add the given values to the StringBuilder Signature public virtual void add(List<String> values) add(value) Add the given value to the StringBuilder Signature public virtual void add(String value) getStringValue() Return the state of the StringBuilder Signature public virtual String getStringValue() toString() Signature public virtual override String toString() fflib_StringBuilder.CommaDelimitedListBuilder Subclasses the StringBuilder to produce a comma delimited concatenation of strings Signature public virtual with sharing class CommaDelimitedListBuilder extends fflib_StringBuilder fflib_StringBuilder.CommaDelimitedListBuilder Constructors CommaDelimitedListBuilder() CommaDelimitedListBuilder(values) CommaDelimitedListBuilder() Signature public CommaDelimitedListBuilder() CommaDelimitedListBuilder(values) Signature public CommaDelimitedListBuilder(List<String> values) fflib_StringBuilder.CommaDelimitedListBuilder Methods getStringValue(itemPrefix) setDelimiter(delimiter) setItemPrefix(itemPrefix) toString() getStringValue(itemPrefix) Signature public String getStringValue(String itemPrefix) setDelimiter(delimiter) Signature public void setDelimiter(String delimiter) setItemPrefix(itemPrefix) Signature public void setItemPrefix(String itemPrefix) toString() Signature public override String toString() fflib_StringBuilder.FieldListBuilder Subclasses the StringCommaDelimitedBuilder to accept native SObjectField tokens and optional FieldSet definitions to concatinate when building queries Signature public virtual with sharing class FieldListBuilder extends CommaDelimitedListBuilder fflib_StringBuilder.FieldListBuilder Constructors FieldListBuilder(values) FieldListBuilder(values, fieldSets) FieldListBuilder(values) Signature public FieldListBuilder(List<Schema.SObjectField> values) FieldListBuilder(values, fieldSets) Signature public FieldListBuilder(List<Schema.SObjectField> values, List<Schema.FieldSet> fieldSets) fflib_StringBuilder.MultiCurrencyFieldListBuilder Subclasses the FieldListBuilder to auto sense and include when needed the CurrencyIsoCode field in the field list Signature public with sharing class MultiCurrencyFieldListBuilder extends FieldListBuilder fflib_StringBuilder.MultiCurrencyFieldListBuilder Constructors MultiCurrencyFieldListBuilder(values) MultiCurrencyFieldListBuilder(values, fieldSets) MultiCurrencyFieldListBuilder(values) Signature public MultiCurrencyFieldListBuilder(List<Schema.SObjectField> values) MultiCurrencyFieldListBuilder(values, fieldSets) Signature public MultiCurrencyFieldListBuilder(List<Schema.SObjectField> values, List<Schema.FieldSet> fieldSets)"
    },
    {
        "title": "fflib_StringBuilderTest",
        "fileName": "fflib_StringBuilderTest.html",
        "text": "fflib_StringBuilderTest Copyright(c), FinancialForce.com, inc All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of the FinancialForce.com, inc nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Signature @IsTest private with sharing class fflib_StringBuilderTest fflib_StringBuilderTest Methods testCommaDelimitedBuilder1() testCommaDelimitedBuilder2() testCommanDelimitedBuilderWithAlternativeDelimiter() testCommanDelimitedBuilderWithAlternativeDelimiterAndPrefix() testCommanDelimitedBuilderWithItemPrefix() testfflib_StringBuilder1() testfflib_StringBuilder2() testFieldListBuilder() testMultiCurrencyFieldListBuilder() testCommaDelimitedBuilder1() Signature static testMethod void testCommaDelimitedBuilder1() testCommaDelimitedBuilder2() Signature static testMethod void testCommaDelimitedBuilder2() testCommanDelimitedBuilderWithAlternativeDelimiter() Signature static testMethod void testCommanDelimitedBuilderWithAlternativeDelimiter() testCommanDelimitedBuilderWithAlternativeDelimiterAndPrefix() Signature static testMethod void testCommanDelimitedBuilderWithAlternativeDelimiterAndPrefix() testCommanDelimitedBuilderWithItemPrefix() Signature static testMethod void testCommanDelimitedBuilderWithItemPrefix() testfflib_StringBuilder1() Signature static testMethod void testfflib_StringBuilder1() testfflib_StringBuilder2() Signature static testMethod void testfflib_StringBuilder2() testFieldListBuilder() Signature static testMethod void testFieldListBuilder() testMultiCurrencyFieldListBuilder() Signature static testMethod void testMultiCurrencyFieldListBuilder()"
    },
    {
        "title": "fflib_System",
        "fileName": "fflib_System.html",
        "text": "fflib_System Contains counterparts for helper methods in the native System class. Signature public class fflib_System fflib_System Methods assertEquals(ignoredRetval, value) Verifies that the supplied argument is meaningfully equivalent to the expected argument, as defined by its matcher. See fflib_SystemTest for examples of usage. assertEquals(ignoredRetval, value, customAssertMessage) Verifies that the supplied argument is meaningfully equivalent to the expected argument, as defined by its matcher. See fflib_SystemTest for examples of usage. assertEquals(ignoredRetval, value) Verifies that the supplied argument is meaningfully equivalent to the expected argument, as defined by its matcher. See fflib_SystemTest for examples of usage. Signature public static void assertEquals(Object ignoredRetval, Object value) Parameters ignoredRetval Type: Object Dummy value, returned on registering an fflib_IMatcher. value Type: Object The object instance upon which we are checking equality. assertEquals(ignoredRetval, value, customAssertMessage) Verifies that the supplied argument is meaningfully equivalent to the expected argument, as defined by its matcher. See fflib_SystemTest for examples of usage. Signature public static void assertEquals(Object ignoredRetval, Object value, String customAssertMessage) Parameters ignoredRetval Type: Object Dummy value, returned on registering an fflib_IMatcher. value Type: Object The object instance upon which we are checking equality. customAssertMessage Type: String Provides context or additional information for the assertion."
    },
    {
        "title": "fflib_SystemTest",
        "fileName": "fflib_SystemTest.html",
        "text": "fflib_SystemTest Signature @IsTest private class fflib_SystemTest fflib_SystemTest Methods assertEquals_WithCombinedMatcher_ShouldPass() assertEquals_WithCustomMessage_WithCombinedMatcher_ShouldPass() assertEquals_WithCustomMessage_WithMatch_ShouldPass() assertEquals_WithCustomMessage_WithMismatch_ShouldThrowException() assertEquals_WithCustomMessage_WithNoMatchers_ShouldThrowException() assertEquals_WithCustomMessage_WithTooManyMatchers_ShouldThrowException() assertEquals_WithMatch_ShouldPass() assertEquals_WithMismatch_ShouldThrowException() assertEquals_WithNoMatchers_ShouldThrowException() assertEquals_WithTooManyMatchers_ShouldThrowException() assertEquals_WithCombinedMatcher_ShouldPass() Signature @IsTest private static void assertEquals_WithCombinedMatcher_ShouldPass() assertEquals_WithCustomMessage_WithCombinedMatcher_ShouldPass() Signature @IsTest private static void assertEquals_WithCustomMessage_WithCombinedMatcher_ShouldPass() assertEquals_WithCustomMessage_WithMatch_ShouldPass() Signature @IsTest private static void assertEquals_WithCustomMessage_WithMatch_ShouldPass() assertEquals_WithCustomMessage_WithMismatch_ShouldThrowException() Signature @IsTest private static void assertEquals_WithCustomMessage_WithMismatch_ShouldThrowException() assertEquals_WithCustomMessage_WithNoMatchers_ShouldThrowException() Signature @IsTest private static void assertEquals_WithCustomMessage_WithNoMatchers_ShouldThrowException() assertEquals_WithCustomMessage_WithTooManyMatchers_ShouldThrowException() Signature @IsTest private static void assertEquals_WithCustomMessage_WithTooManyMatchers_ShouldThrowException() assertEquals_WithMatch_ShouldPass() Signature @IsTest private static void assertEquals_WithMatch_ShouldPass() assertEquals_WithMismatch_ShouldThrowException() Signature @IsTest private static void assertEquals_WithMismatch_ShouldThrowException() assertEquals_WithNoMatchers_ShouldThrowException() Signature @IsTest private static void assertEquals_WithNoMatchers_ShouldThrowException() assertEquals_WithTooManyMatchers_ShouldThrowException() Signature @IsTest private static void assertEquals_WithTooManyMatchers_ShouldThrowException()"
    },
    {
        "title": "fflib_VerificationMode",
        "fileName": "fflib_VerificationMode.html",
        "text": "fflib_VerificationMode This class implements the verification modes with Mockito syntax style. It can be used in the classic verify and in the ordered verify. Signature public with sharing class fflib_VerificationMode fflib_VerificationMode Properties Name Signature CustomAssertMessage public String CustomAssertMessage Method public ModeName Method VerifyMax public Integer VerifyMax VerifyMin public Integer VerifyMin Enums Name Signature Values ModeName public enum ModeName times, atLeast, atMost, between, atLeastOnce, calls fflib_VerificationMode Constructors fflib_VerificationMode() fflib_VerificationMode() Signature public fflib_VerificationMode() fflib_VerificationMode Methods atLeast(atLeastTimes) Sets the minimum number of times the method is expected to be called. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. atLeastOnce() Sets that the method is called at least once. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. atMost(atMostTimes) Sets the maximum number of times the method is expected to be called. Not available in the InOrder verification. between(atLeastTimes, atMostTimes) Sets the range of how many times the method is expected to be called. Not available in the InOrder verification. calls(callingTimes) Sets how many times the method is expected to be called for an InOrder verifier. Available Only with the InOrder verification. A verification mode using calls will not fail if the method is called more times than expected. description(customAssertMessage) Sets a custom assert message for the verify. never() Sets that the method is not expected to be called. times(times) Sets how many times the method is expected to be called. For InOrder verification we copy Mockito behavior which is as follows;  Consume the specified number of matching invocations, ignoring non-matching invocations in between  Fail an assert if the very next invocation matches, but additional matches can still exist so long as at least one non-matching invocation exists before them    For example if you had a(); a(); b(); a(); then inOrder.verify(myMock, 2)).a(); or inOrder.verify(myMock, 3)).a(); would pass but not inOrder.verify(myMock, 1)).a(); atLeast(atLeastTimes) Sets the minimum number of times the method is expected to be called. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. Signature public fflib_VerificationMode atLeast(Integer atLeastTimes) Parameters atLeastTimes Type: Integer The minimum number of times you expect the method to have been called. Returns The fflib_VerificationMode object instance with the proper settings. atLeastOnce() Sets that the method is called at least once. With the InOrder verification it performs a greedy verification, which means it would consume all the instances of the method verified. Signature public fflib_VerificationMode atLeastOnce() Returns The fflib_VerificationMode object instance with the proper settings. atMost(atMostTimes) Sets the maximum number of times the method is expected to be called. Not available in the InOrder verification. Signature public fflib_VerificationMode atMost(Integer atMostTimes) Parameters atMostTimes Type: Integer The maximum number of times the method is expected to be called. Returns The fflib_VerificationMode object instance with the proper settings. between(atLeastTimes, atMostTimes) Sets the range of how many times the method is expected to be called. Not available in the InOrder verification. Signature public fflib_VerificationMode between(Integer atLeastTimes, Integer atMostTimes) Parameters atLeastTimes Type: Integer The minimum number of times you expect the method to have been called. atMostTimes Type: Integer The maximum number of times the method is expected to be called. Returns The fflib_VerificationMode object instance with the proper settings. calls(callingTimes) Sets how many times the method is expected to be called for an InOrder verifier. Available Only with the InOrder verification. A verification mode using calls will not fail if the method is called more times than expected. Signature public fflib_VerificationMode calls(Integer callingTimes) Parameters callingTimes Type: Integer The number of times you expect the method to have been called in the InOrder verifying(no greedy verify). Returns The fflib_VerificationMode object instance with the proper settings. description(customAssertMessage) Sets a custom assert message for the verify. Signature public fflib_VerificationMode description(String customAssertMessage) Parameters customAssertMessage Type: String The custom message for the assert in case the assert is false. The custom message is queued to the default message. Returns The fflib_VerificationMode object instance with the proper settings. never() Sets that the method is not expected to be called. Signature public fflib_VerificationMode never() Returns The fflib_VerificationMode object instance with the proper settings. times(times) Sets how many times the method is expected to be called. For InOrder verification we copy Mockito behavior which is as follows;  Consume the specified number of matching invocations, ignoring non-matching invocations in between  Fail an assert if the very next invocation matches, but additional matches can still exist so long as at least one non-matching invocation exists before them    For example if you had a(); a(); b(); a(); then inOrder.verify(myMock, 2)).a(); or inOrder.verify(myMock, 3)).a(); would pass but not inOrder.verify(myMock, 1)).a(); Signature public fflib_VerificationMode times(Integer times) Parameters times Type: public fflib_VerificationMode The number of times you expect the method to have been called. Returns The fflib_VerificationMode object instance with the proper settings."
    }
];
